<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>无名氏无情兮</title>
  <subtitle>生命不止、奋斗不息</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://eagleless.github.io/"/>
  <updated>2016-11-14T04:20:32.303Z</updated>
  <id>https://eagleless.github.io/</id>
  
  <author>
    <name>kaiyang</name>
    <email>fox520527088@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ldap基础知识</title>
    <link href="https://eagleless.github.io/20161114/20161114Ldap%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html"/>
    <id>https://eagleless.github.io/20161114/20161114Ldap基础知识.html</id>
    <published>2016-11-14T03:42:08.000Z</published>
    <updated>2016-11-14T04:20:32.303Z</updated>
    
    <content type="html"><![CDATA[<p>LDAP：<code>Lightweight Directory Access Protocol</code>轻量级目录访问协议。LDAP协议基于<code>X.500</code>标准, 与<code>X.500</code>不同，LDAP支持<code>TCP/IP</code>, 是跨平台的和标准的协议。<br><a id="more"></a></p>
<p>在LDAP中信息以树状方式组织，在树状信息中的基本数据单元是条目，而每个条目由属性构成，属性中存储有属性值<br>    <code>O(zhangyang.com)</code><br>        <code>/</code>       <code>/</code><br>     <code>ou1</code>     <code>ou2</code><br>        <code>/</code>     <code>/</code><br>        <code>test</code></p>
<ol>
<li>O:Organization 组织<br>根的表示方法（参考LDAP Server）<br>a.  组织名称(x.500)<br>假设组织名称为zhangyang(o=zhangyang)<br>b.  域名<br>假设组织域名为zhangyang.com(o=zhangyang.com或dc=zhangyang, dc=com)</li>
<li>OU: Organization Unit 组织单元</li>
<li>Entry: 条目,记录， 由DN唯一标识</li>
<li>DN: Distinguished Name，每个叶子结点到根的路径就是DN,如: cn=test, ou=ou1, o=zhangyang.com</li>
<li>RDN: Relative Distinguished Name，叶子结点本身的名字是RDN,如:test就是RDN</li>
<li>Base DN: 基准DN，指定LDAP search的起始DN,即从哪个DN下开始搜索。搜索组织单元为ou1，则base DN为 ou=ou1,o=O(ou=ou1,o=zhangyang.com 或 ou=ou1,dc=zhangyang, dc=com)</li>
<li>AttributeType：属性类型，    </li>
<li>ObjectClass: 对象类,由多个attributetype(属性类型)组成, 每个条目(Entry)必须属于某个或多个对象类（Object Class）</li>
<li>schema文件: 定义对象类、属性类型、语法和匹配规则, 有系统schema，用户也可自定义schema文件</li>
<li><p>LDIF:<code>LDAP Interchange Format</code>, 是指存储LDAP配置信息及目录内容的标准文本文件格式。LDIF文件常用来向目录导入或更改记录信息，<br>基本格式：AttributeName: value(属性名 冒号 空格 属性值)<br>例如:</p>
<p>dn: dc=zy,dc=net<br>objectclass: dcObject<br>objectclass: organization<br>dc: zy<br>o: zhangyang</p>
</li>
<li><p>监听端口<br>TCP/IP port: 389<br>SSL port: 636</p>
</li>
</ol>
<h1 id="Search-filter"><a href="#Search-filter" class="headerlink" title="Search filter:"></a>Search filter:</h1><p>每个表达式都放在括号内，多个表达式用与(&amp;)，或(|)，非(!)等连结</p>
<h3 id="amp-filter1-filter2-…-filtern同时满足"><a href="#amp-filter1-filter2-…-filtern同时满足" class="headerlink" title="&amp;filter1,filter2,…,filtern同时满足"></a>&amp;filter1,filter2,…,filtern同时满足</h3><pre><code>(&amp;(filter1)(filter2)...(filtern))
</code></pre><h3 id="filter1-filter2-…-filtern至少有一个满足"><a href="#filter1-filter2-…-filtern至少有一个满足" class="headerlink" title="|filter1,filter2,…,filtern至少有一个满足"></a>|filter1,filter2,…,filtern至少有一个满足</h3><pre><code>(|(filter1)(filter2)...(filtern))    
</code></pre><h3 id="非filter"><a href="#非filter" class="headerlink" title="!非filter"></a>!非filter</h3><pre><code>(!(filter))                             
</code></pre><p>filter支持通配符(wildcard)<em>
</em>表示零或多个字符<br>如（objectclass=*）,指列出所有类型的记录（不过分类）</p>
<h1 id="LDAP客户端和LDAP服务器端交互过程"><a href="#LDAP客户端和LDAP服务器端交互过程" class="headerlink" title="LDAP客户端和LDAP服务器端交互过程"></a>LDAP客户端和LDAP服务器端交互过程</h1><ol>
<li>绑定。LDAP客户端与LDAP服务器建立连接。可匿名绑定，也可以用户名+密码形式绑定(具体参考LDAP Server, AD不支持匿名查询)。</li>
<li>LDAP客户端向LDAP服务器发出查询、添加、修改、删除entry等操作。  </li>
<li>解除绑定。LDAP客户端与LDAP服务器断开连接。</li>
</ol>
<h1 id="LDAP软件"><a href="#LDAP软件" class="headerlink" title="LDAP软件"></a>LDAP软件</h1><p>常见的LDAP服务器：Microsoft Active Directory, IBM Domino, openldap<br>常见的LDAP客户端： JXplorer</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;LDAP：&lt;code&gt;Lightweight Directory Access Protocol&lt;/code&gt;轻量级目录访问协议。LDAP协议基于&lt;code&gt;X.500&lt;/code&gt;标准, 与&lt;code&gt;X.500&lt;/code&gt;不同，LDAP支持&lt;code&gt;TCP/IP&lt;/code&gt;, 是跨平台的和标准的协议。&lt;br&gt;
    
    </summary>
    
    
      <category term="ldap" scheme="https://eagleless.github.io/tags/ldap/"/>
    
  </entry>
  
  <entry>
    <title>Spider之webmagic</title>
    <link href="https://eagleless.github.io/20161111/20161111Spider%E4%B9%8Bwebmagic.html"/>
    <id>https://eagleless.github.io/20161111/20161111Spider之webmagic.html</id>
    <published>2016-11-11T06:15:59.000Z</published>
    <updated>2016-11-11T07:02:16.194Z</updated>
    
    <content type="html"><![CDATA[<p>JAVA爬虫框架webmagic:<a href="https://github.com/code4craft/webmagic" target="_blank" rel="external">https://github.com/code4craft/webmagic</a><br><a id="more"></a><br><a href="http://webmagic.io/docs/zh/posts/ch1-overview/component.html" target="_blank" rel="external">http://webmagic.io/docs/zh/posts/ch1-overview/component.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JAVA爬虫框架webmagic:&lt;a href=&quot;https://github.com/code4craft/webmagic&quot;&gt;https://github.com/code4craft/webmagic&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="spider" scheme="https://eagleless.github.io/tags/spider/"/>
    
  </entry>
  
  <entry>
    <title>浏览器与服务器通讯方式</title>
    <link href="https://eagleless.github.io/20161106/20161106%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F.html"/>
    <id>https://eagleless.github.io/20161106/20161106浏览器与服务器通讯方式.html</id>
    <published>2016-11-06T06:30:40.000Z</published>
    <updated>2016-11-11T06:12:59.073Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器与服务器实时通信的方式。场景：商家在商家后台需要实时的获取到有没有新订单，有的话是几个；这个需求类似与日常中使用QQ或者微信时的新信息提醒一样，只要有新信息就需要提醒。<br><a id="more"></a></p>
<h1 id="AJAX轮询"><a href="#AJAX轮询" class="headerlink" title="AJAX轮询"></a>AJAX轮询</h1><p>这是我们最自然想到的。采用常规AJAX轮询的方式，每10s或者30s轮询一次，既可以判断出有有多少个新订单进入，且这种时间间隔对于消息提醒也是可以接受的。这种技术方式实现起来非常简单，目前的机器都是可以机器的，前端浏览器也都支持。<br>但是这种方式会有非常严重的问题，就是需要不断的向服务器发送消息询问，如果有1w个商家打开了浏览器，采用10s轮询的方式，则服务器则会承担1000的QPS，这1w个商家可能只有10个有订单通知；这种方式会对服务器造成极大的性能浪费。<br>还有一个类似的轮询是使用JSONP跨域请求的方式轮询，在实现起来有差别，但基本原理都是相同的，都是客户端不断的向服务器发起请求。<br>优点：实现简单。<br>缺点：这是通过模拟服务器发起的通信，不是实时通信，不顾及应用的状态改变而盲目检查更新，导致服务器资源的浪费，且会加重网络负载，拖累服务器。</p>
<h1 id="comet"><a href="#comet" class="headerlink" title="comet"></a>comet</h1><p>使用示例：<a href="http://blog.csdn.net/majian_1987/article/details/8489488" target="_blank" rel="external">http://blog.csdn.net/majian_1987/article/details/8489488</a><br>Comet是一种用于Web的推送技术，能使服务器实时地将更新的信息传送到客户端，而无须客户端发出请求，目前有两种实现方式：</p>
<ol>
<li>长轮询（long polling)<br>长轮询 (long polling) 是在打开一条连接以后保持，等待服务器推送来数据再关闭，可以采用HTTP长轮询和XHR长轮询两种方式。<br>HTTP和JSONP方式的长轮询：把 script 标签附加到页面上以让脚本执行。服务器会挂起连接直到有事件发生，接着把脚本内容发送回浏览器，然后重新打开另一个script标签来获取下一个事件，从而实现长轮询的模型。</li>
<li>XHR长轮询：这种方式是使用比较多的长轮询模式。<br>客户端打开一个到服务器端的 AJAX 请求然后等待响应；服务器端需要一些特定的功能来允许请求被挂起，只要一有事件发生，服务器端就会在挂起的请求中送回响应并关闭该请求。客户端 JavaScript 响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接；如此循环。<br>现在浏览器已经支持CROS的跨域方式请求，因此HTTP和JSONP的长轮询方式是慢慢被淘汰的一种技术，建议采用XHR长轮询。<br>优点：客户端很容易实现良好的错误处理系统和超时管理，实现成本与Ajax轮询的方式类似。<br>缺点：需要服务器端有特殊的功能来临时挂起连接。当客户端发起的连接较多时，服务器端会长期保持多个连接，具有一定的风险。</li>
</ol>
<h1 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h1><p>iframe是很早就存在的一种HTML标记，通过在HTML页面里嵌入一个隐蔵帧，然后将这个隐蔵帧的 SRC 属性设为对一个长连接的请求，服务器端就能源源不断地往客户端输入数据。<br>优点：这种方式每次数据传送不会关闭连接，连接只会在通信出现错误时，或是连接重建时关闭（一些防火墙常被设置为丢弃过长的连接， 服务器端可以设置一个超时时间， 超时后通知客户端重新建立连接，并关闭原来的连接）。<br>缺点：IE、Morzilla Firefox 下端的进度栏都会显示加载没有完成，而且IE上方的图标会不停的转动，表示加载正在进行。<br>Google 的天才们使用一个称为“htmlfile”的ActiveX解决了在IE中的加载显示问题，并将这种方法用到了 gmail+gtalk 产品中。Alex Russell 在 “What else is burried down in the depth’s of Google’s amazing JavaScript?”文章中介绍了这种方法。Zeitoun 网站提供的 comet-iframe.tar.gz，封装了一个基于 iframe 和 htmlfile 的JavaScript comet 对象，支持 IE、Mozilla Firefox 浏览器，可以作为参考。<br>我们常用的网页版的gtalk就是这种实现方式,Google的开发人员使使用一个称为“htmlfile”的 ActiveX 解决了在 IE 中的加载显示问题。</p>
<h1 id="Comet实现框架"><a href="#Comet实现框架" class="headerlink" title="Comet实现框架"></a>Comet实现框架</h1><p>Comet实现要点不要在同一客户端同时使用超过两个的 HTTP 长连接<br>HTTP 1.1 规范中规定，客户端不应该与服务器端建立超过两个的HTTP连接，新的连接会被阻塞，在IE浏览器中严格遵守了这种规定。<br>服务器端的性能和可扩展性:一般Web服务器会为每个连接创建一个线程，如果在大型的商业应用中使用 Comet，服务器端需要维护大量并发的长连接。在这种应用背景下，服务器端需要考虑负载均衡和集群技术；或是在服务器端为长连接作一些改进。<br>在客户和服务器之间保持“心跳”信息:在浏览器与服务器之间维持一个长连接会为通信带来一些不确定性：因为数据传输是随机的，客户端不知道何时服务器才有数据传送。服务器端需要确保当客户端不再工作时，释放为这个客户端分配的资源，防止内存泄漏。因此需要一种机制使双方知道双方都在正常运行。<br>服务器端在阻塞读时会设置一个时限，超时后阻塞读调用会返回，同时发给客户端没有新数据到达的心跳信息。此时如果客户端已经关闭，服务器往通道写数据会出现异常，服务器端就会及时释放为这个客户端分配的资源。<br>如果客户端使用的是基于 AJAX 的长轮询方式；服务器端返回数据、关闭连接后，经过某个时限没有收到客户端的再次请求，会认为客户端不能正常工作，会释放为这个客户端分配、维护的资源。<br>当服务器处理信息出现异常情况，需要发送错误信息通知客户端，同时释放资源、关闭连接。</p>
<ol>
<li><p>CometD<br>CometD 框架是基于HTTP的事件驱动通信解决方案，使用了Bayeux通信协议，提供了一个 Java 服务器部件和一个 Java 客户端部件，还有一个基于jQuery和Dojo的JavaScript 客户端库。<br>Bayeux通信协议主要是基于HTTP，提供了客户端与服务器之间的响应性双向异步通信。Bayeux 协议基于通道进行通信，通过该通道从客户端到服务器、从服务器到客户端或从客户端到客户端（但是是通过服务器）路由和发送消息。Bayeux 是一种 “发布- 订阅” 协议。<br>CometD 与三个传输协议绑定在一起：JSON、JSONP 和 WebSocket。他们都依赖于 Jetty Continuations 和 Jetty WebSocket API。在默认情况下，可以在 Jetty6、Jetty7、和 Jetty 8 中以及其他所有支持 Servlet 3.0 Specification 的服务中使用CometD。</p>
</li>
<li><p>服务器和内部构：Atmosphere框架<br>Atmosphere提供了一个通用 API，以便使用许多Web服务器（包括Tomcat、Jetty、GlassFish、Weblogic、Grizzly、JBossWeb、JBoss和Resin）的Comet和WebSocket特性。它支持任何支持 Servlet 3.0 Specification 的 Web 服务器。<br>Atmosphere 提供了一个 jQuery 客户端库，该库可以使连接设置变得更容易，它能够自动检测可以使用的最佳传输协议（WebSockets或CometD）。Atmosphere的jQuery插件的用法与 HTML5 WebSockets API 相似。</p>
</li>
<li><p>Pushlet<br>Pushlet 使用了观察者模型：客户端发送请求，订阅感兴趣的事件；服务器端为每个客户端分配一个会话ID作为标记，事件源会把新产生的事件以多播的方式发送到订阅者的事件队列里。<br>Pushlet 最后更新于2010年2月5号，之后至今没有再更新。<br>Cometd 和Atmosphere框架参见示例代码 (<a href="https://github.com/brucefengnju/cometdatoms)。" target="_blank" rel="external">https://github.com/brucefengnju/cometdatoms)。</a></p>
</li>
<li><p>websocket<br>WebSocket是HTML5开始提供的一种在单个TCP连接上进行全双工通讯的协议。WebSocket通讯协议于2011年被IETF定为标准RFC 6455，WebSocketAPI被W3C定为标准。在WebSocket API中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</p>
</li>
</ol>
<p>总结:总结下来长轮询不是一个很好的方案，而且对于服务器而言是有风险的；另外支持WebSocket协议的浏览器都比较新，特比是IE需要10以上的版本；而我们的业务是面向于商家端，商家的浏览器版本相对较低，很多对WebSocket都不支持；相对而言Comet的方式比较适合，也有相应的实现框架，实现成本最低；因此使用Comet的方式来实现，是一个不错的选择。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浏览器与服务器实时通信的方式。场景：商家在商家后台需要实时的获取到有没有新订单，有的话是几个；这个需求类似与日常中使用QQ或者微信时的新信息提醒一样，只要有新信息就需要提醒。&lt;br&gt;
    
    </summary>
    
    
      <category term="http" scheme="https://eagleless.github.io/tags/http/"/>
    
      <category term="server" scheme="https://eagleless.github.io/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>Log4j路径配置</title>
    <link href="https://eagleless.github.io/20161106/20161106Log4j%E8%B7%AF%E5%BE%84%E9%85%8D%E7%BD%AE.html"/>
    <id>https://eagleless.github.io/20161106/20161106Log4j路径配置.html</id>
    <published>2016-11-06T06:04:21.000Z</published>
    <updated>2016-11-11T06:12:59.072Z</updated>
    
    <content type="html"><![CDATA[<p>Log4j路径配置:绝对路径、使用Listener、spring集成（配置web.xml）。<br><a id="more"></a></p>
<ol>
<li>方法一</li>
</ol>
<p>直接在log4j配置中写绝对路径</p>
<ol>
<li>方法二</li>
</ol>
<p>新建一个ServletContextListener的实现类Log4jConfigListener，Log4jConfigListener做：</p>
<pre><code>String path = Environment.class.getResource(&quot;&quot;).getPath();  
String webAppPath = path.substring(0, path.toUpperCase().lastIndexOf(&quot;WEB-INF/&quot;)).replaceAll(&quot;%20&quot;, &quot; &quot;);  
System.setProperty(&quot;webapp&quot;,webAppPath + &quot;logs/log.log&quot;); 
</code></pre><p>在log4j配置中：</p>
<pre><code>log4j.appender.A2.File=${webapp}/logs/log.log  
</code></pre><p>也可以使用jvm里自带的参数例如user.home</p>
<ol>
<li>方法三</li>
</ol>
<p>（跟Spring集成）：在web.xml中配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>webAppRootKey<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>    </div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>webapp.root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>    </div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span>   </div><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>log4jConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/config/log4j.properties<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span>   </div><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>log4jRefreshInterval<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>6000<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span>  </div><div class="line">   <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.util.Log4jConfigListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>然后在log4j中用上述配置的webAppRootKey对应的值</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Log4j路径配置:绝对路径、使用Listener、spring集成（配置web.xml）。&lt;br&gt;
    
    </summary>
    
    
      <category term="log" scheme="https://eagleless.github.io/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>Log4j日志格式</title>
    <link href="https://eagleless.github.io/20161105/20161105Log4j%E6%97%A5%E5%BF%97%E6%A0%BC%E5%BC%8F.html"/>
    <id>https://eagleless.github.io/20161105/20161105Log4j日志格式.html</id>
    <published>2016-11-05T15:36:04.000Z</published>
    <updated>2016-11-11T06:12:59.071Z</updated>
    
    <content type="html"><![CDATA[<p>常用log4j日志格式。<br><a id="more"></a><br>常用格式如下：</p>
<pre><code>%m 输出代码中指定的消息
%p 输出优先级，即debug、info、warn、error、fatal
%r 输出自应用启动到输出该log信息耗费的毫秒数
%c 输出所属的类目，通常就是所在类的全名
%t 输出产生该日志事件的线程名
%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
%d 输出日志时间点的日期或时间，默认格式为ISO8601,也可以在其后指定格式，比如：%d{yyy MM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22:10:28,921
%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。例如，Testlog4j.main(Test Log4j.java:10)
%x 输出与产生日志事件的线程相关的NDC
%X 输出与产生日志事件的线程相关的MDC
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用log4j日志格式。&lt;br&gt;
    
    </summary>
    
    
      <category term="log" scheme="https://eagleless.github.io/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>Log4j之FileAppender</title>
    <link href="https://eagleless.github.io/20161105/20161105Log4j%E4%B9%8BFileAppender.html"/>
    <id>https://eagleless.github.io/20161105/20161105Log4j之FileAppender.html</id>
    <published>2016-11-05T15:13:14.000Z</published>
    <updated>2016-11-11T06:12:59.070Z</updated>
    
    <content type="html"><![CDATA[<p>DailyRollingAppender按日分割日志。RollingAppender按文件大小分割日志。<br><a id="more"></a></p>
<h1 id="DailyRollingAppender"><a href="#DailyRollingAppender" class="headerlink" title="DailyRollingAppender"></a>DailyRollingAppender</h1><p>使用FileAppender可以将log信息输出到文件中，但是如果文件太大了读起来就很不方便了。这时就可以使用DailyRollingAppender。可以把log信息输出到按照日期来区分的文件中。配置文件就会每天产生一个文件，每个log文件只记录当天的log信息。</p>
<pre><code>log4j.appender.A2=org.apache.log4j.DailyRollingFileAppender
log4j.appender.A2.file=dglog
log4j.appender.A2.DatePattern=&apos;.&apos;yyyy-MM-dd
log4j.appender.A2.layout=org.apache.log4j.PatternLayout
log4j.appender.A2.layout.ConversionPattern=%5r %-5p %c{2} -%m%n
</code></pre><h1 id="RollingAppender"><a href="#RollingAppender" class="headerlink" title="RollingAppender"></a>RollingAppender</h1><p>文件大小到达指定尺寸的时候产生一个新的文件。</p>
<pre><code>log4j.appender.R=org.apache.log4j.RollingFileAppender
log4j.appender.R.File=../logs/dglog.log
#Controller the maximum log file size
log4j.appender.R.MaxFileSize=100KB
#Archive log files(one backup file here)
log4j.appender.R.MaxBackupIndex=1
log4j.appender.R.layoutorg.apache.log4j.PatternLayout
log4j.appender.R.ConversionPattern=%p %t %c - %m%n
</code></pre><p>这个配置文件指定了输出源R，是一个轮转日志文件。最大的文件是100KB，当一个文件达到最大尺寸时，log4j会自动把example.log重名民为dglog.log.1，然后重建一个新的dglog.log文件依次轮转。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DailyRollingAppender按日分割日志。RollingAppender按文件大小分割日志。&lt;br&gt;
    
    </summary>
    
    
      <category term="log" scheme="https://eagleless.github.io/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>JPA大纲</title>
    <link href="https://eagleless.github.io/20161105/20161105JPA%E5%A4%A7%E7%BA%B2.html"/>
    <id>https://eagleless.github.io/20161105/20161105JPA大纲.html</id>
    <published>2016-11-05T14:58:43.000Z</published>
    <updated>2016-11-11T06:12:59.069Z</updated>
    
    <content type="html"><![CDATA[<p>常用JPA相关资源地址。<br><a id="more"></a></p>
<h1 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h1><p><a href="http://blog.csdn.net/hz_blog/article/details/7563253" target="_blank" rel="external">http://blog.csdn.net/hz_blog/article/details/7563253</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用JPA相关资源地址。&lt;br&gt;
    
    </summary>
    
    
      <category term="jpa" scheme="https://eagleless.github.io/tags/jpa/"/>
    
  </entry>
  
  <entry>
    <title>Java爬虫HelloWorld</title>
    <link href="https://eagleless.github.io/20161104/20161104Java%E7%88%AC%E8%99%ABHelloWorld.html"/>
    <id>https://eagleless.github.io/20161104/20161104Java爬虫HelloWorld.html</id>
    <published>2016-11-04T10:00:22.000Z</published>
    <updated>2016-11-11T06:12:59.068Z</updated>
    
    <content type="html"><![CDATA[<p>使用爬虫获取产品信息。<br><a id="more"></a></p>
<h1 id="jar包坐标"><a href="#jar包坐标" class="headerlink" title="jar包坐标"></a>jar包坐标</h1><pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.jsoup&lt;/groupId&gt;
    &lt;artifactId&gt;jsoup&lt;/artifactId&gt;
    &lt;version&gt;1.9.2&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><h1 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h1><p>获取产品信息，根据一定的条件，选择优质债权发送给指定邮箱。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Timer timer = <span class="keyword">new</span> Timer();</div><div class="line">timer.schedule( <span class="keyword">new</span> TimerTask() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(DateTool.format( <span class="keyword">new</span> Date(),<span class="string">"yyyy-MM-dd HH:mm:ss"</span> ));</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String url = <span class="string">"https://xinghuo.yixin.com/wuqing?category=12"</span>;</div><div class="line">            Document doc = Jsoup.connect(url).get();</div><div class="line">            Elements els = doc.getElementsByClass(<span class="string">"ui-bg-color"</span>);</div><div class="line">            StringBuffer sb = <span class="keyword">new</span> StringBuffer();</div><div class="line">            <span class="keyword">for</span>(Iterator&lt;Element&gt; es = els.iterator();es.hasNext();)&#123;</div><div class="line">                Element e = es.next();</div><div class="line">                String info = e.text();</div><div class="line">                String[] infos = info.split( <span class="string">" "</span> ) ;</div><div class="line">                Double a = Double.valueOf( infos[<span class="number">1</span>].replaceAll( <span class="string">"%"</span>, <span class="string">""</span> ) ) ;</div><div class="line">                Integer rundays = Integer.valueOf( infos[<span class="number">3</span>].replaceAll( <span class="string">"天"</span>, <span class="string">""</span> ) );</div><div class="line">                Double result = rundays/a;</div><div class="line">                <span class="keyword">if</span>(result &lt; <span class="number">42</span>)&#123;</div><div class="line">                    sb.append( <span class="string">"【"</span>+infos[<span class="number">0</span>] +<span class="string">"】收益率为"</span> + infos[<span class="number">1</span>]+<span class="string">",当前剩余配额【"</span>+infos[<span class="number">4</span>]+<span class="string">"】,投资天数【"</span>+infos[<span class="number">3</span>]+<span class="string">"】\n"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(sb!=<span class="keyword">null</span> &amp;&amp; sb.length()&gt;<span class="number">0</span>)&#123;</div><div class="line">                JmsTool.sendMultipartEmail( <span class="string">"变现贷好产品提醒"</span>, <span class="string">"kaiyang12@creditease.cn"</span>, <span class="keyword">null</span>, sb.toString() );</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> ( IOException e ) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;, <span class="number">60000</span>*<span class="number">5</span>,<span class="number">60000</span>*<span class="number">5</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用爬虫获取产品信息。&lt;br&gt;
    
    </summary>
    
    
      <category term="spider" scheme="https://eagleless.github.io/tags/spider/"/>
    
  </entry>
  
  <entry>
    <title>RedirectAttributes使用</title>
    <link href="https://eagleless.github.io/20161102/20161102RedirectAttributes%E4%BD%BF%E7%94%A8.html"/>
    <id>https://eagleless.github.io/20161102/20161102RedirectAttributes使用.html</id>
    <published>2016-11-02T09:14:38.000Z</published>
    <updated>2016-11-02T09:19:31.029Z</updated>
    
    <content type="html"><![CDATA[<p>SpringMVC重定向传参数的实现。<br><a id="more"></a></p>
<p>addFlashAttribute这个方法原理是放到session中，session在跳到页面后马上移除对象。所以你刷新一下后这个值就会丢失。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.demo.controller;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> java.util.Map;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;  </div><div class="line"><span class="keyword">import</span> org.springframework.ui.Model;  </div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;  </div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;  </div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;  </div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.support.RedirectAttributes;  </div><div class="line"> </div><div class="line"><span class="meta">@Controller</span>  </div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)  </div><div class="line"><span class="comment">//  public String login(@RequestParam Map&lt;String, String&gt; user, Model model) &#123;  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestParam Map&lt;String, String&gt; user, RedirectAttributes model)</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"用户提交了一次表单"</span>);  </div><div class="line">        String username;  </div><div class="line">        <span class="keyword">if</span> (user.get(<span class="string">"name"</span>).isEmpty()) &#123;  </div><div class="line">            username = <span class="string">"Tom"</span>;  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            username = user.get(<span class="string">"name"</span>);  </div><div class="line">        &#125;  </div><div class="line">        model.addFlashAttribute(<span class="string">"msg"</span>, username);  </div><div class="line"><span class="comment">//      return "home";//此方式跳转，页面刷新会重复提交表单  </span></div><div class="line">        <span class="keyword">return</span> <span class="string">"redirect:/user/toHome"</span>;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/toHome"</span>)  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">(@ModelAttribute(<span class="string">"msg"</span>)</span> String msg, Model model) </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"拿到重定向得到的参数msg:"</span> + msg);  </div><div class="line">        model.addAttribute(<span class="string">"msg"</span>, msg);  </div><div class="line">        <span class="keyword">return</span> <span class="string">"home"</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这边我们使用@ModelAttribute注解，获取之前addFlashAttribute添加的数据，之后就可以正常使用啦。<br>或者</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Map&lt;String,?&gt; map = RequestContextUtils.getInputFlashMap(request); </div><div class="line">System.out.println(map.get(<span class="string">"test"</span>).toString());</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SpringMVC重定向传参数的实现。&lt;br&gt;
    
    </summary>
    
    
      <category term="spring" scheme="https://eagleless.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring注解Resource与Autowired的区别</title>
    <link href="https://eagleless.github.io/20161102/20161102Spring%E6%B3%A8%E8%A7%A3Resource%E4%B8%8EAutowired%E7%9A%84%E5%8C%BA%E5%88%AB.html"/>
    <id>https://eagleless.github.io/20161102/20161102Spring注解Resource与Autowired的区别.html</id>
    <published>2016-11-02T03:31:46.000Z</published>
    <updated>2016-11-02T03:44:21.995Z</updated>
    
    <content type="html"><![CDATA[<p>@autowired和@resource的区别</p>
<a id="more"></a>
<p>@Resource的作用相当于@Autowired，只不过@Autowired按byType自动注入，而@Resource默认按 byName自动注入罢了。</p>
<p>@Resource有两个属性是比较重要的，分是name和type，Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。</p>
<p>所以如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不指定name也不指定type属性，这时将通过反射机制使用byName自动注入策略。</p>
<blockquote>
<p>  @Resource装配顺序</p>
</blockquote>
<p>这个注解属于J2EE的。</p>
<ol>
<li>如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常;</li>
<li>如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常;</li>
<li>如果指定了type，则从上下文中找到类型匹配的唯一bean进行装配，找不到或者找到多个，都会抛出异常;</li>
<li>如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配；</li>
</ol>
<blockquote>
<p>  @Autowired</p>
</blockquote>
<p>默认按类型装配（这个注解是属业spring的），默认情况下必须要求依赖对象必须存在，如果要允许null值，可以设置它的required属性为false，如：@Autowired(required=false),如果我们想使用名称装配可以结合@Qualifier注解进行使用，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span>() <span class="meta">@Qualifier</span>(<span class="string">"baseDao"</span>)    </div><div class="line"><span class="keyword">private</span> BaseDao baseDao;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@autowired和@resource的区别&lt;/p&gt;
    
    </summary>
    
    
      <category term="spring" scheme="https://eagleless.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Mysql自增长触发器</title>
    <link href="https://eagleless.github.io/20161029/20161029Mysql%E8%87%AA%E5%A2%9E%E9%95%BF%E8%A7%A6%E5%8F%91%E5%99%A8.html"/>
    <id>https://eagleless.github.io/20161029/20161029Mysql自增长触发器.html</id>
    <published>2016-10-29T10:08:57.000Z</published>
    <updated>2016-11-02T02:39:38.016Z</updated>
    
    <content type="html"><![CDATA[<p>Mysql自增长触发器。<br><a id="more"></a><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb(BH <span class="built_in">CHAR</span>(<span class="number">16</span>),<span class="keyword">content</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>),<span class="string">`date`</span> DATETIME,val <span class="built_in">INT</span>);</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> tri_NewBH $$</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> tri_NewBH <span class="keyword">BEFORE</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> tb</div><div class="line">    <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></div><div class="line">    <span class="keyword">BEGIN</span></div><div class="line">        <span class="keyword">DECLARE</span> dt <span class="built_in">CHAR</span>(<span class="number">8</span>);</div><div class="line">        <span class="keyword">DECLARE</span> bh_id <span class="built_in">CHAR</span>(<span class="number">16</span>);</div><div class="line">        <span class="keyword">DECLARE</span> <span class="built_in">number</span> <span class="built_in">INT</span>;</div><div class="line">        <span class="keyword">DECLARE</span> new_bh <span class="built_in">VARCHAR</span>(<span class="number">16</span>);</div><div class="line">    </div><div class="line">        <span class="keyword">SET</span> dt = <span class="keyword">DATE_FORMAT</span>(<span class="keyword">CURDATE</span>(),<span class="string">'%Y%m%d'</span>);</div><div class="line">    </div><div class="line">        <span class="keyword">SELECT</span></div><div class="line">            <span class="keyword">MAX</span>(BH) <span class="keyword">INTO</span> bh_id</div><div class="line">        <span class="keyword">FROM</span> tb</div><div class="line">        <span class="keyword">WHERE</span> BH <span class="keyword">LIKE</span> <span class="keyword">CONCAT</span>(dt,<span class="string">'%'</span>);</div><div class="line">    </div><div class="line">        IF bh_id = '' OR bh_id IS NULL THEN</div><div class="line">            <span class="keyword">SET</span> new_bh = <span class="keyword">CONCAT</span>(dt,<span class="string">'00000001'</span>);</div><div class="line">        ELSE</div><div class="line">            <span class="keyword">SET</span> <span class="built_in">number</span> = <span class="keyword">RIGHT</span>(bh_id,<span class="number">8</span>) + <span class="number">1</span>;</div><div class="line">            <span class="keyword">SET</span> new_bh =  <span class="keyword">RIGHT</span>(<span class="keyword">CONCAT</span>(<span class="string">'00000000'</span>,<span class="built_in">number</span>),<span class="number">8</span>);</div><div class="line">            <span class="keyword">SET</span> new_bh=<span class="keyword">CONCAT</span>(dt,new_bh);</div><div class="line">        <span class="keyword">END</span> <span class="keyword">IF</span>;</div><div class="line">    </div><div class="line">        <span class="keyword">SET</span> NEW.BH = new_bh;</div><div class="line">    <span class="keyword">END</span>$$</div><div class="line"></div><div class="line">    </div><div class="line">DELIMITER ;</div><div class="line"></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb(<span class="keyword">content</span>,<span class="string">`date`</span>,val) <span class="keyword">VALUES</span>(<span class="string">'LiangCK'</span>,<span class="string">'2009-05-11'</span>,<span class="number">20</span>);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mysql自增长触发器。&lt;br&gt;
    
    </summary>
    
    
      <category term="database" scheme="https://eagleless.github.io/tags/database/"/>
    
      <category term="mysql" scheme="https://eagleless.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql配置简介</title>
    <link href="https://eagleless.github.io/20161029/20161029Mysql%E9%85%8D%E7%BD%AE%E7%AE%80%E4%BB%8B.html"/>
    <id>https://eagleless.github.io/20161029/20161029Mysql配置简介.html</id>
    <published>2016-10-29T10:02:32.000Z</published>
    <updated>2016-11-02T02:39:38.017Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<blockquote>
<p>  数据文件存放</p>
</blockquote>
<p>在my.init中定义了数据文件的存放目录<br>datadir=”C:/ProgramData/MySQL/MySQL Server 5.1/Data/“<br>文件夹中有mysql各数据库文件</p>
<blockquote>
<p>  注意事项</p>
</blockquote>
<p>注释–之后务必添加一个空格使注释生效</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;  数据文件存放&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在my.init中定义了数据文件的存放目录&lt;br&gt;datadir=”C:/ProgramData/MySQL/MySQL Server 5.1/Data
    
    </summary>
    
    
      <category term="database" scheme="https://eagleless.github.io/tags/database/"/>
    
      <category term="mysql" scheme="https://eagleless.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql常用语句汇总</title>
    <link href="https://eagleless.github.io/20161029/20161029Mysql%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5%E6%B1%87%E6%80%BB.html"/>
    <id>https://eagleless.github.io/20161029/20161029Mysql常用语句汇总.html</id>
    <published>2016-10-29T09:59:54.000Z</published>
    <updated>2016-11-02T02:39:38.013Z</updated>
    
    <content type="html"><![CDATA[<p>修改自增长、显示建表语句。<br><a id="more"></a></p>
<blockquote>
<p>  修改自增长</p>
</blockquote>
<pre><code>ALTER TABLE test_table AUTO_INCREMENT = 100
</code></pre><blockquote>
<p>  显示建表语句</p>
</blockquote>
<pre><code>SHOW CREATE TABLE APP_USER;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;修改自增长、显示建表语句。&lt;br&gt;
    
    </summary>
    
    
      <category term="database" scheme="https://eagleless.github.io/tags/database/"/>
    
      <category term="mysql" scheme="https://eagleless.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql常用问题汇总</title>
    <link href="https://eagleless.github.io/20161029/20161029Mysql%E5%B8%B8%E7%94%A8%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB.html"/>
    <id>https://eagleless.github.io/20161029/20161029Mysql常用问题汇总.html</id>
    <published>2016-10-29T09:56:07.000Z</published>
    <updated>2016-11-02T02:39:38.014Z</updated>
    
    <content type="html"><![CDATA[<p>重置root密码、数据库乱码。<br><a id="more"></a></p>
<blockquote>
<p>  重置root密码</p>
</blockquote>
<p>在my.ini中的<br>【mysqld】下添加<br>skip-grant-tables</p>
<blockquote>
<p>  MySql优化</p>
</blockquote>
<p><a href="http://blog.chinaunix.net/uid-16728139-id-3156242.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-16728139-id-3156242.html</a></p>
<blockquote>
<p>  关于MySQL的wait_timeout连接超时问题报错解决方案</p>
</blockquote>
<p><a href="http://blog.csdn.net/happyangelling/article/details/5877343" target="_blank" rel="external">http://blog.csdn.net/happyangelling/article/details/5877343</a></p>
<blockquote>
<p>  数据库乱码</p>
</blockquote>
<p>现象:用JDBC将中文字段插入MySQL数据库中，然后打开表发现，那些字段都是”??”,或者是乱码.。</p>
<p>原因:</p>
<ol>
<li>创建数据库时没有指定默认的编码方式，导致数据库使用了MySql的默认字符集latin1。 </li>
<li>Client端字符集为latin1. </li>
<li>进行jdbc链接时使用了不匹配的字符集。</li>
</ol>
<p>解决办法:</p>
<ol>
<li>创建数据库时将数据库的缺省字符集指定为utf8。sql语句没查到…</li>
<li>修改Client默认字符集为utft。windows下在mysql安装目录下找到my.ini,将里面的default-character-set=latin1 改为default-character-set=UTF8，然后重起mysql服务即可将数据库默认字符集改为utf8.此时应该在mysql命令行用\s命令检查一下看是否改好了。</li>
<li>修改jdbc的链接，将原来的<code>jdbc:mysql://localhost:3306/YourDb</code><br>改为<code>jdbc:mysql://localhost:3306/YourDb?useUnicode=true&amp;characterEncoding=UTF-8</code></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;重置root密码、数据库乱码。&lt;br&gt;
    
    </summary>
    
    
      <category term="database" scheme="https://eagleless.github.io/tags/database/"/>
    
      <category term="mysql" scheme="https://eagleless.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql开机自启动</title>
    <link href="https://eagleless.github.io/20161029/20161029Mysql%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8.html"/>
    <id>https://eagleless.github.io/20161029/20161029Mysql开机自启动.html</id>
    <published>2016-10-29T09:50:41.000Z</published>
    <updated>2016-11-02T02:39:38.015Z</updated>
    
    <content type="html"><![CDATA[<p>添加Mysql系统服务，设置开机自启动。<br><a id="more"></a></p>
<blockquote>
<p>  将MYSQL服务添加进winsows services.msc</p>
</blockquote>
<pre><code>mysqld --install MySQL --defaults-file=&quot;C:\Program Files\MySQL\MySQL Server 5.6\my-default.ini&quot;
</code></pre><p>成功后，开始-&gt;运行-&gt;services.msc 找MySQL服务，启动服务即可。<br>注：若启动不成功 修改注册表开始-&gt;运行-&gt;regedit<br>找HKEY_LOCAL_MECHINE—SYSTEM —ControlSet001或ControlSet002中找Services，再找MySQL项，修改 ImagePath 值改为：”C:\Program Files\MySQL\MySQL Server 5.6\bin\mysqld” –defaults-file=”C:\Program Files\MySQL\MySQL Server 5.6\my.ini” MySQL</p>
<p>卸载mysql系统服务：mysqld –remove</p>
<p>使用命令行手动启动:mysqld</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;添加Mysql系统服务，设置开机自启动。&lt;br&gt;
    
    </summary>
    
    
      <category term="database" scheme="https://eagleless.github.io/tags/database/"/>
    
      <category term="mysql" scheme="https://eagleless.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>CHM中文乱码</title>
    <link href="https://eagleless.github.io/20161029/20161029CHM%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81.html"/>
    <id>https://eagleless.github.io/20161029/20161029CHM中文乱码.html</id>
    <published>2016-10-29T09:43:12.000Z</published>
    <updated>2016-11-11T06:12:59.067Z</updated>
    
    <content type="html"><![CDATA[<p>CHM中文乱码问题。</p>
<a id="more"></a>
<p>经常碰到一些 CHM 格式的帮助文档出现乱码无法阅读的情况，而且 CHM 文档不像浏览器一样，右键可以选择字符编码，非常不便。究其原因，主要就是 CHM 文档在页面中没有指定合适的字符编码所致。</p>
<p>CHM 的实质是 HTML 文件。一般情况下没有指定字符编码的 CHM 是调用 Internet Explorer 浏览器的字符编码设定来显示 CHM 文件的。</p>
<p>在注册表 HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer\International 下有 AutoDetect 和 Default_CodePage 2个键名，就是IE浏览器字符编码的相关设定键。<br>其中：AutoDetect 是表示自动侦测字符编码的意思。同 IE 浏览器“查看”菜单的“编码”中的“自动选择”。键值设置1，表示启用自动侦测。一般的，简体中文的操作系统，IE浏览器就会使用 GB2312去显示那些没有指定字符编码的页面。如果AutoDetect设置为0，那浏览器会去使用 Default_CodePage 的设定来显示页面</p>
<p>因此，我们在简体中文的操作系统上打开简体中文的 CHM 文档出现乱码时，把 AutoDetect 设置为1就能正常显示；在简体中文的操作系统上打开繁体中文的 CHM 文档出现乱码时，先把 AutoDetect 设置为0，然后把 Default_CodePage 设置为 BIG5 的代码页 950 即可。</p>
<p>简体中文Windows常用 ANSI 代码页936，在注册表二进制值是 A8 03 00 00；<br>繁体中文Windows常用 ANSI 代码页950，在注册表二进制值是 B6 03 00 00；<br>拉丁语系Windows常用 ANSI 代码页1252，在注册表二进制值是 E4 04 00 00</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CHM中文乱码问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="chm" scheme="https://eagleless.github.io/tags/chm/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat问题汇总</title>
    <link href="https://eagleless.github.io/20161029/20161029Tomcat%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB.html"/>
    <id>https://eagleless.github.io/20161029/20161029Tomcat问题汇总.html</id>
    <published>2016-10-29T09:40:47.000Z</published>
    <updated>2016-11-02T02:39:38.017Z</updated>
    
    <content type="html"><![CDATA[<p>开发中遇到的一些tomcat问题汇总。</p>
<a id="more"></a>
<blockquote>
<p>  CSRF Security Error</p>
</blockquote>
<p>利用DWR实现无刷新动态提交,结果,配置到远程服务器上竟然出现了这样的错误,弹出了错误窗口,错误信息为 “CSRF Security Error” ,左查右查,终于知道为啥了…<br>一般tomcat6是没有这样的错误,换成tomcat7就会这样,听一个老外说,tomcat7默认为<code>sessionID</code>实现HTTP,所以,解决问题的办法,就是更改这个tomcat的默认配置:<br>在<code>tomcat/conf/context.xml</code>中,在<context>中添加属性:<context usehttponly="false">.<br>重启tomcat就over啦~</context></context></p>
<blockquote>
<p>  welcome-list不起作用</p>
</blockquote>
<p>解决问题一定要从原理入手，所以要先分析welcome-file-list是怎么工作的。<br>welcome-file-list的工作原理是，按照welcome-file的.list一个一个去检查是否web目录下面存在这个文件，如果存在，继续下面的工作（或者跳转到index.html页面，或者配置有struts的，会直接struts的过滤工作）.如上例，先去webcontent(这里是Eclipse的工程目录根目录)下是否真的存在index.html这个文件，如果不存在去找是否存在index.jsp这个文件，以此类推。<br>还要说的是welcome-file不一定是html或者jsp等文件，也可以是直接访问一个action。就像我上面配置的一样，但要注意的是，一定要在webcontent下面建立一个index.action的空文件，然后使用struts配置去跳转，不然web找不到index.action这个文件，会报404错误。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发中遇到的一些tomcat问题汇总。&lt;/p&gt;
    
    </summary>
    
    
      <category term="tomcat" scheme="https://eagleless.github.io/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Maven生命周期</title>
    <link href="https://eagleless.github.io/20161029/20161029Maven%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html"/>
    <id>https://eagleless.github.io/20161029/20161029Maven生命周期.html</id>
    <published>2016-10-29T09:25:37.000Z</published>
    <updated>2016-11-02T02:39:38.012Z</updated>
    
    <content type="html"><![CDATA[<p>Maven的生命周期是抽象的，实际工作都是由插件来完成的。插件都在<code>org\apache\maven\plugins</code>里，运行机制类似于设计模式中的模板方法。</p>
<a id="more"></a>
<p>Maven生命周期不是一个整体，有三套独立的生命周期，分别是<code>clean</code>（清理项目）、<code>default</code>（构建项目）和<code>site</code>（建立项目站点）。以clean生命周期为例，有pre-clean、clean和post-clean，当执行pre-clean时只执行此命令，当执行clean时会执行pre-clean和clean，当执行post-clean时会将三个命令顺序执行。</p>
<blockquote>
<p>  clean生命周期</p>
</blockquote>
<p>pre-clean：执行一些清理前需要完成的工作。<br>clean：清理上一次构建生成的文件。<br>post-clean：执行一些清理后需要完成的工作。</p>
<blockquote>
<p>  default生命周期：真正的构建</p>
</blockquote>
<p>validate<br>initialize<br>generate-sources<br>process-sources:处理项目主资源文件。一般是对src/main/sources目录的内容进行变量替换等工作后，复制到项目输出的主classpath目录中。<br>generate-resources<br>process-resources<br>compile:编译项目的主源码。一般是编译src/main/java目录中的java文件至项目输出的主classpath目录中。<br>process-classes<br>generate-test-sources<br>process-test-sources:处理项目测试资源文件。一般是对src/test/sources目录的内容进行变量替换等工作后，复制到项目输出的主classpath目录中。<br>generate-test-resources<br>process-test-resources<br>test-compile:编译测试代码。一般是编译src/test/java目录中的java文件至项目输出的主classpath目录中。<br>process-test-classes<br>test:使用单元测试框架运行测试，测试代码不会被打包或部署。<br>prepare-package<br>package:接受编译好的代码，打包成可发布的格式，如jar。<br>pre-integration-test<br>integration-test<br>post-integration-test<br>verify<br>install:将包安装到本地Maven仓库，供本地的其他项目使用。<br>deploy：将最终的包复制到远程仓库，供其他开发人员和Maven项目使用。</p>
<blockquote>
<p>  site生命周期</p>
</blockquote>
<p>建立和发布项目站点，基于POM所包含的信息，自动生成一个友好的站点，方便团队交流和项目发布。<br>pre-site执行一些在生成项目站点之前需要完成的工作。<br>site生成项目站点文档。<br>post-site执行一些在生成项目站点之后需要完成的工作。<br>site-deploy将生成的项目站点发布到服务器上。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Maven的生命周期是抽象的，实际工作都是由插件来完成的。插件都在&lt;code&gt;org\apache\maven\plugins&lt;/code&gt;里，运行机制类似于设计模式中的模板方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="maven" scheme="https://eagleless.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>常用ORACLE函数</title>
    <link href="https://eagleless.github.io/20161025/20161025%E5%B8%B8%E7%94%A8ORACLE%E5%87%BD%E6%95%B0.html"/>
    <id>https://eagleless.github.io/20161025/20161025常用ORACLE函数.html</id>
    <published>2016-10-25T09:38:52.000Z</published>
    <updated>2016-10-25T10:05:09.070Z</updated>
    
    <content type="html"><![CDATA[<p>常用oracle函数。</p>
<a id="more"></a>
<blockquote>
<p>  随机获取</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> d.mobile <span class="keyword">from</span> (<span class="keyword">select</span> u.mobile <span class="keyword">from</span> itm_store s ,itm_user u <span class="keyword">where</span> s.userid =u.id <span class="keyword">and</span> s.status = <span class="number">0</span> <span class="keyword">order</span> <span class="keyword">by</span> dbms_random.value) d <span class="keyword">where</span> <span class="keyword">rownum</span> = <span class="number">1</span></div></pre></td></tr></table></figure>
<blockquote>
<p>  随机数</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> trunc(dbms_random.value(<span class="number">0</span>, <span class="number">1000</span>)) <span class="keyword">from</span> dual; <span class="comment">--(0-1000的整数)</span></div><div class="line"><span class="keyword">select</span> dbms_random.value(<span class="number">0</span>, <span class="number">1000</span>) <span class="keyword">from</span> dual; <span class="comment">--(0-1000的浮点数)</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用oracle函数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="oracle" scheme="https://eagleless.github.io/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>SpringMvc静态资源处理</title>
    <link href="https://eagleless.github.io/20161013/20161013SpringMvc%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86.html"/>
    <id>https://eagleless.github.io/20161013/20161013SpringMvc静态资源处理.html</id>
    <published>2016-10-13T02:01:52.000Z</published>
    <updated>2016-10-13T02:09:10.791Z</updated>
    
    <content type="html"><![CDATA[<p>处理静态资源，我想这可能是框架搭建完成之后Web开发的”头等大事“了。<br><a id="more"></a><br>还记得Spring MVC中的DispatcherServlet吗？它是Spring MVC中的前置控制器，若配置的拦截路径为“/”，那么所有的请求都将被它拦截。对静态资源的访问也属于一个请求，那么也会被它拦截，然后进入它的匹配流 程，我们知道它是根据HandlerMapping的配置来匹配的。而对于静态资源来说，默认的Spring MVC是没有注册匹配规则的，此时若你去请求一个静态资源，则会报404错误。</p>
<blockquote>
<p>  如何处理静态资源的请求呢？</p>
</blockquote>
<p>我们可以配置一个处理静态资源的HandlerMapping<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"resourceHttpRequestHandler"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.resource.ResourceHttpRequestHandler"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span> <span class="attr">value</span>=<span class="string">"classpath:/META-INF/resources/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>     </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/resources/**"</span>&gt;</span>resourceHttpRequestHandler<span class="tag">&lt;/<span class="name">prop</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>另外，还可以使用mvc命名空间的resources标签来配置</p>
<pre><code>&lt;mvc:resources mapping=&quot;/resources/**&quot; location=&quot;/resources/&quot; /&gt;
</code></pre><blockquote>
<p>  直接用容器的DefaultServlet</p>
</blockquote>
<p>比如我们将资源文件都放在resouces目录下，那么只需要在web.xml中配置：</p>
<pre><code> &lt;servlet-mapping&gt;  
    &lt;servlet-name&gt;default&lt;/servlet-name&gt;  
    &lt;url-pattern&gt;/resource/*&lt;/url-pattern&gt;  
&lt;/servlet-mapping&gt;  
</code></pre><p>并将它放在所有Servlet的最前面（为了让它最先匹配），这样的话性能上应该比较好</p>
<p>所以，综上所述，性能最好的应该是直接利用容器的DefaultServlet，让它最先拦截静态资源请求，这样就避免了后续的转发等操作，提高了 性能，但是无法访问classpath下的资源文件。而通过mvc:resources标签可以简单配置匹配规则和资源文件路径，应该说是最简单快捷的一 种方式，当然这大概也是mvc命名空间设计的初衷。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;处理静态资源，我想这可能是框架搭建完成之后Web开发的”头等大事“了。&lt;br&gt;
    
    </summary>
    
    
      <category term="spring" scheme="https://eagleless.github.io/tags/spring/"/>
    
  </entry>
  
</feed>
