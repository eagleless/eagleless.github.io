<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kai.Yang&#39; Blog</title>
  <subtitle>生命不止、奋斗不息</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yangkai0725.com/"/>
  <updated>2016-09-18T07:47:36.946Z</updated>
  <id>http://www.yangkai0725.com/</id>
  
  <author>
    <name>kaiyang</name>
    <email>fox520527088@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>20160829Tomcat简介</title>
    <link href="http://www.yangkai0725.com/20160829/20160829Tomcat%E7%AE%80%E4%BB%8B.html"/>
    <id>http://www.yangkai0725.com/20160829/20160829Tomcat简介.html</id>
    <published>2016-08-29T07:59:47.000Z</published>
    <updated>2016-09-18T07:47:36.946Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

    
    </summary>
    
    
      <category term="tomcat" scheme="http://www.yangkai0725.com/tags/tomcat/"/>
    
      <category term="server" scheme="http://www.yangkai0725.com/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>CXFWebservice暴露方式</title>
    <link href="http://www.yangkai0725.com/20160828/20160828CXFWebservice%E6%9A%B4%E9%9C%B2%E6%96%B9%E5%BC%8F.html"/>
    <id>http://www.yangkai0725.com/20160828/20160828CXFWebservice暴露方式.html</id>
    <published>2016-08-28T14:39:18.000Z</published>
    <updated>2016-09-18T07:47:36.942Z</updated>
    
    <content type="html"><![CDATA[<p>使用注解和XML方式暴露REST风格webservice，使用JAX-WS暴露SOAP风格webservice。<br>使用wsdl2java根据wsdl生成java源码。<br><a id="more"></a></p>
<blockquote>
<p>  REST风格 注解方式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//接口使用注解</span></div><div class="line"><span class="meta">@WebService</span></div><div class="line"><span class="meta">@Path</span>(<span class="string">"/users"</span>)</div><div class="line"><span class="comment">//方法声明如下</span></div><div class="line"><span class="meta">@GET</span>    </div><div class="line"><span class="meta">@Path</span>(<span class="string">"&#123;lastname&#125;"</span>)    </div><div class="line"><span class="function">List&lt;Person&gt; <span class="title">findByLastName</span><span class="params">(@PathParam(<span class="string">"lastname"</span>)</span> String lastName)</span>;     </div><div class="line"><span class="meta">@GET</span>    </div><div class="line"><span class="function">List&lt;Person&gt; <span class="title">getPeople</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>  REST风格 XML配置方式</p>
</blockquote>
<p>使用了JAX-RS，无需在接口中声明任何注解<br><code>src/main/webapp/WEB-INF/cxf-servlet.xml</code>中添加</p>
<pre><code>&lt;jaxrs:serviceBeans&gt;
    &lt;ref bean=&quot;userManager&quot;/&gt;
&lt;/jaxrs:serviceBeans&gt;
</code></pre><p><code>http://localhost:8080/services/api/users.json</code><br>也可以这样访问<code>http://localhost:8080/services/api/users</code><br>但必须给User添加@XmlRootElement注解</p>
<blockquote>
<p>  暴露SOAP WebService</p>
</blockquote>
<p>SOAP:Simple Object Access Protocol简单对象访问协议<br>接口UserService使用@WebService注解</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebService</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span></span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现类UserServiceImpl使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(<span class="string">"userManager"</span>)</div><div class="line"><span class="meta">@WebService</span>(serviceName = <span class="string">"UserService"</span>,  endpointInterface = <span class="string">"com.joiest.service.UserService"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最好提供无参构造器，以满足JAX-WS<br><code>src/main/webapp/WEB-INF/cxf-servlet.xml</code> 中添加</p>
<pre><code>&lt;jaxws:endpoint id=&quot;userService&quot; implementor=&quot;#userManager&quot; address=&quot;/UserService&quot;/&gt;
</code></pre><p>运行mvn jetty:run<br><a href="http://localhost:8080/services/UserService?wsdl" target="_blank" rel="external">http://localhost:8080/services/UserService?wsdl</a><br>即可查看userService的wsdl描述</p>
<blockquote>
<p>  wsdl2java生成java源码</p>
</blockquote>
<pre><code>wsdl2java -s E:\myToolsApi\studyTools\tools\webservice\cxf\gen_src\src -uri http://localhost:8088/cxfws/services/Hellows?wsdl

wsimport –s . client http://localhost:8088/cxfws/services/Hellows?wsdl

wsimport -s . http://127.0.0.1:8088/cxfws/services/Hellows?wsdl

wsdl2java -s . -uri http://localhost:8088/cxfws/services/Hellows?wsdl
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用注解和XML方式暴露REST风格webservice，使用JAX-WS暴露SOAP风格webservice。&lt;br&gt;使用wsdl2java根据wsdl生成java源码。&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://www.yangkai0725.com/tags/java/"/>
    
      <category term="webservice" scheme="http://www.yangkai0725.com/tags/webservice/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ简介</title>
    <link href="http://www.yangkai0725.com/20160828/20160828RabbitMQ%E7%AE%80%E4%BB%8B.html"/>
    <id>http://www.yangkai0725.com/20160828/20160828RabbitMQ简介.html</id>
    <published>2016-08-28T11:10:31.000Z</published>
    <updated>2016-09-18T07:47:36.945Z</updated>
    
    <content type="html"><![CDATA[<p>MQ是消费-生产者模型的一个典型的代表，一端往消息队列中不断写入消息，而另一端则可以读取或者订阅队列中的消息。MQ和JMS类似，但不同的是JMS是JAVA消息中间件服务的一个标准和API定义，而MQ则是遵循了AMQP协议的具体实现和产品。<br><a id="more"></a></p>
<p>一个exchange能用n条routing-key规则去指向一个queue。<br>如果一个Message符合n条规则去往同一个queue，这个Message只会被投放到这个queue一次。</p>
<blockquote>
<p>  概念说明</p>
</blockquote>
<p>Broker:简单来说就是消息队列服务器实体。<br>Exchange:消息交换机，它指定消息按什么规则，路由到哪个队列。<br>Queue:消息队列载体，每个消息都会被投入到一个或多个队列。<br>Binding:绑定，它的作用就是把exchange和queue按照路由规则绑定起来。<br>Routing Key:路由关键字，exchange根据这个关键字进行消息投递。<br>vhost:虚拟主机，一个broker里可以开设多个vhost，用作不同用户的权限分离。<br>producer:消息生产者，就是投递消息的程序。<br>consumer:消息消费者，就是接受消息的程序。<br>channel:消息通道，在客户端的每个连接里，可建立多个channel，每个channel代表一个会话任务。</p>
<blockquote>
<p>  消息队列的使用过程</p>
</blockquote>
<ul>
<li>客户端连接到消息队列服务器，打开一个channel。</li>
<li>客户端声明一个exchange，并设置相关属性。</li>
<li>客户端声明一个queue，并设置相关属性。</li>
<li>客户端使用<code>routing key</code>，在exchange和queue之间建立好绑定关系。</li>
<li>客户端投递消息到exchange。</li>
</ul>
<blockquote>
<p>  消息队列持久化</p>
</blockquote>
<p>RabbitMQ支持消息的持久化，也就是数据写在磁盘上，为了数据安全考虑，我想大多数用户都会选择持久化。消息队列持久化包括3个部分：</p>
<ul>
<li>exchange持久化，在声明时指定durable =&gt; 1</li>
<li>queue持久化，在声明时指定durable =&gt; 1</li>
<li>消息持久化，在投递时指定delivery_mode =&gt; 2（1是非持久化）<br>如果exchange和queue都是持久化的，那么它们之间的binding也是持久化的。如果exchange和queue两者之间有一个持久化，一个非持久化，就不允许建立绑定。</li>
</ul>
<blockquote>
<p>  exchange的类型</p>
</blockquote>
<p>在实际的情况下，消息发送者不会直接将Message发入queue，而是发入exchange，<code>exchange</code>能通过指定的规则将message放入指定的queue中（<code>public/subscribe</code>模型）。exchange有direct，topic，headers和fanout等几种类型。</p>
<ul>
<li>Direct交换机:完全根据key进行投递，例如，绑定时设置了<code>routing key</code>为”abc”，那么客户端提交的消息，只有设置了key为”abc”的才会投递到队列。</li>
<li>Topic交换机:对key进行模式匹配后进行投递，功能强大，几乎能实现其他exchange的routing规则，符号<code>#</code>匹配一个或多个词，符号<code>*</code>匹配任意一个词。routing-key不能是任意，它必须是一个一些词的数组，用”.”隔开，每个词可以是任意的，但通常是代表某些含义的。这个词的数组不能超过255个字节。例如<code>abc.#</code>匹配<code>abc.def.ghi</code>，<code>abc.*</code>只匹配<code>abc.def</code>。</li>
<li>Fanout交换机:不需要key的，它采取广播模式，一个消息进来时，将消息派发到所有的绑定到该exchange的queque中。</li>
</ul>
<blockquote>
<p>  JAVA API</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//connecting to a broker 服务器实体</span></div><div class="line">ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</div><div class="line">factory.setUsername(userName);</div><div class="line">factory.setPassword(password);</div><div class="line">factory.setVirtualHost(virtualHost);</div><div class="line">factory.setHost(hostName);</div><div class="line">factory.setPort(portNumber);</div><div class="line"><span class="comment">//或者factory.setUri("amqp://userName:password@hostName:portNumber/virtualHost");</span></div><div class="line">Connection conn = factory.newConnection();</div><div class="line"><span class="comment">//或者 address array  --com.rabbitmq.client</span></div><div class="line">Address[] addrArr = <span class="keyword">new</span> Address[]&#123; <span class="keyword">new</span> Address(hostname1, portnumber1)</div><div class="line">                                 , <span class="keyword">new</span> Address(hostname2, portnumber2)&#125;;</div><div class="line">Connection conn = factory.newConnection(addrArr);</div><div class="line"><span class="comment">//open a channel</span></div><div class="line">Channel channel = conn.createChannel();</div><div class="line"><span class="comment">//disconnect</span></div><div class="line">channel.colse();</div><div class="line">conn.close();</div><div class="line">consumer thread pool --java.util.concurrent </div><div class="line">ExecutorService es = Executors.newFixedThreadPool(<span class="number">20</span>);</div><div class="line">Connection conn = factory.newConnection(es);</div><div class="line"><span class="comment">//Using exchanges and queues</span></div><div class="line">channel.exchangeDeclare(exchangeName, <span class="string">"direct"</span>, <span class="keyword">true</span>);</div><div class="line">String queueName = channel.queueDeclare().getQueue();</div><div class="line">channel.queueBind(queueName, exchangeName, routingKey);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MQ是消费-生产者模型的一个典型的代表，一端往消息队列中不断写入消息，而另一端则可以读取或者订阅队列中的消息。MQ和JMS类似，但不同的是JMS是JAVA消息中间件服务的一个标准和API定义，而MQ则是遵循了AMQP协议的具体实现和产品。&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://www.yangkai0725.com/tags/java/"/>
    
      <category term="mq" scheme="http://www.yangkai0725.com/tags/mq/"/>
    
      <category term="jms" scheme="http://www.yangkai0725.com/tags/jms/"/>
    
  </entry>
  
  <entry>
    <title>Maven之appfuse模板</title>
    <link href="http://www.yangkai0725.com/20160828/20160828Maven%E4%B9%8Bappfuse%E6%A8%A1%E6%9D%BF.html"/>
    <id>http://www.yangkai0725.com/20160828/20160828Maven之appfuse模板.html</id>
    <published>2016-08-28T10:09:55.000Z</published>
    <updated>2016-09-18T07:47:36.944Z</updated>
    
    <content type="html"><![CDATA[<p>Appfuse是由Matt Raible开发的一个指导性的入门级J2EE框架，它对如何集成流行的Spring、Hibernate、iBatis、struts、Xdoclet、junit 等基础框架给出了示范。提供了对Taperstry和JSF的支持。<br><a id="more"></a></p>
<blockquote>
<p>  常用命令</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th style="text-align:left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>mvn appfuse:gen-model</td>
<td style="text-align:left">根据数据库的表生成java类</td>
</tr>
<tr>
<td>mvn appfuse:gen</td>
<td style="text-align:left">根据 POJOs.生成并安装Tests, DAO, Managers, Controllers and Views</td>
</tr>
<tr>
<td>mvn appfuse:full-source</td>
<td style="text-align:left">把运行所需要的org.appfuse中的依赖类转换成你的包名称</td>
</tr>
<tr>
<td>mvn eclipse:eclipse</td>
<td style="text-align:left">生成eclipse的项目的配置文件，用户可以直接把项目导入到eclipse中</td>
</tr>
<tr>
<td>mvn jetty:run-war</td>
<td style="text-align:left">打包并且发布你的应用程序到Jetty, 查看在 <a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a></td>
</tr>
<tr>
<td>mvn appfuse:install</td>
<td style="text-align:left">把生成的源代码及配置文件写入到src中</td>
</tr>
<tr>
<td>mvn integration-test</td>
<td style="text-align:left">启动TOMCAT(或别的服务器)进行测试</td>
</tr>
<tr>
<td>mvn appfuse:remove</td>
<td style="text-align:left">删除appfuse:gen.生成的代码mvn</td>
</tr>
<tr>
<td>appfuse:clean</td>
<td style="text-align:left">清除target下的所有内容</td>
</tr>
</tbody>
</table>
<blockquote>
<p>  生成实体类</p>
</blockquote>
<p>mvn appfuse:gen-model</p>
<blockquote>
<p>  生成dao、service等</p>
</blockquote>
<pre><code>mvn appfuse:gen -Dentity=com.joiest.model.MqConfig
mvn appfuse:gen -Dentity=YbtTransaction
</code></pre><blockquote>
<p>  使用appfuse创建maven项目</p>
</blockquote>
<p>使用maven创建项目</p>
<pre><code>mvn archetype:create -DgroupId=com.joiest -DartifactId=webtest -DarchetypeArtifactId=maven-archetype-webapp
</code></pre><p><em>说明：DartifactId:项目名称   DgroupId：包结构</em></p>
<p>生成项目文件生成.classpath,.project,.setting文件</p>
<pre><code>mvn eclipse:eclipse
</code></pre><p>更改appFuse的代码生成方式，修改pom中<br>修改生成代码方式，找到 </p>
<pre><code>&lt;genericCore&gt;${amp.genericCore}&lt;/genericCore&gt; 
&lt;fullSource&gt;${amp.fullSource}&lt;/fullSource&gt; 
</code></pre><p>修改成：</p>
<pre><code> &lt;genericCore&gt;false&lt;/genericCore&gt; 
&lt;fullSource&gt;true&lt;/fullSource&gt; 
</code></pre><p>注意，这里必须吧pom.xml中的genericCore属性设为false 否则只会生成Action<br>数据库配置信息(mysql在最底下)</p>
<p>执行项目创建命令后，进入项目主目录后，更改AppFuse到全源代码模式</p>
<pre><code>mvn appfuse:full-source
</code></pre><p>生成Model类</p>
<pre><code>mvn appfuse:gen-mode


mvn appfuse:gen -Dentity=com.joiest.model.YbtAccount 
</code></pre><p>把生成的配置文件写入到src目录下的配置文件中</p>
<pre><code>mvn appfuse:install
</code></pre><p>下载项目的依赖jar包到本地，并进行集成测试</p>
<pre><code>mvn
</code></pre><p>打包并运行项目</p>
<pre><code>mvn jetty:run-war
</code></pre><p>通过浏览器访问admin/admin</p>
<pre><code>http://localhost:8080
</code></pre><p>修改pom.xml</p>
<pre><code>&lt;artifactId&gt;maven-eclipse-plugin&lt;/artifactId&gt;
&lt;version&gt;2.4&lt;/version&gt;
</code></pre><p>配置repositories,M2_REPO</p>
<p>运行服务器查看生成的crud实例</p>
<pre><code>mvn jetty:run
</code></pre><blockquote>
<p>  下面是创建不同种类项目的Archetype Command：</p>
</blockquote>
<p><strong><em>JSF Basic</em></strong></p>
<pre><code>mvn archetype:create -DarchetypeGroupId=org.appfuse.archetypes -DarchetypeArtifactId=appfuse-basic-jsf -DremoteRepositories=http://static.appfuse.org/releases-DarchetypeVersion=2.0 -DgroupId=com.mycompany.app -DartifactId=myproject 
</code></pre><p><strong><em>Spring MVC Basic</em></strong></p>
<pre><code>mvn archetype:create -DarchetypeGroupId=org.appfuse.archetypes -DarchetypeArtifactId=appfuse-basic-spring -DremoteRepositories=http://static.appfuse.org/releases-DarchetypeVersion=2.0 -DgroupId=com.mycompany.app -DartifactId=myproject 
</code></pre><p><strong><em>Struts 2 Basic</em></strong> </p>
<pre><code>mvn archetype:create -DarchetypeGroupId=org.appfuse.archetypes -DarchetypeArtifactId=appfuse-basic-struts -DremoteRepositories=http://static.appfuse.org/releases-DarchetypeVersion=2.0 -DgroupId=com.mycompany.app -DartifactId=myproject 
</code></pre><p><strong><em>Tapestry Basic</em></strong> </p>
<pre><code>mvn archetype:create -DarchetypeGroupId=org.appfuse.archetypes -DarchetypeArtifactId=appfuse-basic-tapestry -DremoteRepositories=http://static.appfuse.org/releases-DarchetypeVersion=2.0 -DgroupId=com.mycompany.app -DartifactId=myproject 
</code></pre><p><strong><em>JSF Modula</em></strong></p>
<pre><code>mvn archetype:create -DarchetypeGroupId=org.appfuse.archetypes -DarchetypeArtifactId=appfuse-modular-jsf -DremoteRepositories=http://static.appfuse.org/releases-DarchetypeVersion=2.0 -DgroupId=com.mycompany.app -DartifactId=myproject 
</code></pre><p><strong><em>Spring MVC Modular</em></strong></p>
<pre><code>mvn archetype:create -DarchetypeGroupId=org.appfuse.archetypes -DarchetypeArtifactId=appfuse-modular-spring -DremoteRepositories=http://static.appfuse.org/releases-DarchetypeVersion=2.0 -DgroupId=com.mycompany.app -DartifactId=myproject 
</code></pre><p><strong><em>Struts 2 Modular</em></strong></p>
<pre><code>mvn archetype:create -DarchetypeGroupId=org.appfuse.archetypes -DarchetypeArtifactId=appfuse-modular-struts -DremoteRepositories=http://static.appfuse.org/releases-DarchetypeVersion=2.0 -DgroupId=com.mycompany.app -DartifactId=myproject 
</code></pre><p><strong><em>Tapestry Modular</em></strong> </p>
<pre><code>mvn archetype:create -DarchetypeGroupId=org.appfuse.archetypes -DarchetypeArtifactId=appfuse-modular-tapestry -DremoteRepositories=http://static.appfuse.org/releases-DarchetypeVersion=2.0 -DgroupId=com.mycompany.app -DartifactId=myproject 
</code></pre><p><strong><em>Core(backend only)</em></strong></p>
<pre><code>mvn archetype:create -DarchetypeGroupId=org.appfuse.archetypes -DarchetypeArtifactId=appfuse-core -DremoteRepositories=http://static.appfuse.org/releases-DarchetypeVersion=2.0 -DgroupId=com.mycompany.app -DartifactId=myproject
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Appfuse是由Matt Raible开发的一个指导性的入门级J2EE框架，它对如何集成流行的Spring、Hibernate、iBatis、struts、Xdoclet、junit 等基础框架给出了示范。提供了对Taperstry和JSF的支持。&lt;br&gt;
    
    </summary>
    
      <category term="maven" scheme="http://www.yangkai0725.com/categories/maven/"/>
    
    
      <category term="maven" scheme="http://www.yangkai0725.com/tags/maven/"/>
    
      <category term="appfuse" scheme="http://www.yangkai0725.com/tags/appfuse/"/>
    
  </entry>
  
  <entry>
    <title>Maven之pom简介</title>
    <link href="http://www.yangkai0725.com/20160827/20160827Maven%E4%B9%8Bpom%E7%AE%80%E4%BB%8B.html"/>
    <id>http://www.yangkai0725.com/20160827/20160827Maven之pom简介.html</id>
    <published>2016-08-27T10:52:54.000Z</published>
    <updated>2016-09-18T07:47:36.940Z</updated>
    
    <content type="html"><![CDATA[<p>pom.xml简介。</p>
<a id="more"></a>
<blockquote>
<p>  pom.xml 文件基本节点介绍</p>
</blockquote>
<p><code>&lt;project&gt;</code>：文件的根节点<br><code>&lt;modelversion&gt;</code> ： pom.xml 使用的对象模型版本<br><code>&lt;groupId&gt;</code> ：创建项目的组织或团体的唯一 Id<br><code>&lt;artifactId&gt;</code> ：项目的唯一 Id, 可视为项目名<br><code>&lt;packaging&gt;</code> ：打包物的扩展名，一般有 JAR,WAR,EAR 等<br><code>&lt;version&gt;</code> ：产品的版本号<br><code>&lt;name&gt;</code> ：项目的显示名，常用于 Maven 生成的文档。<br><code>&lt;url&gt;</code> ：组织的站点，常用于 Maven 生成的文档。<br><code>&lt;description&gt;</code> ：项目的描述，常用于 Maven 生成的文档。<br><code>&lt;finalName&gt;</code>:项目打包的名称。</p>
<blockquote>
<p>  Maven自定义源码目录</p>
</blockquote>
<pre><code>&lt;build&gt;
    &lt;sourceDirectory&gt;src/java&lt;/sourceDirectory&gt;
&lt;/build&gt;
</code></pre><p>如此源码目录就变成了src/java，而不是默认的src/main/java</p>
<blockquote>
<p>  超级POM</p>
</blockquote>
<p>对于maven3，超级POM位于<br><code>$MAVEN_HOME/lib/maven-model-builder-x.x.x.jar</code><br>中的<code>org\apache\maven\model\pom-4.0.0.xml</code><br>超级POM中定义了诸多关于项目目录</p>
<p>项目的主输出目录directory：<code>${project.basedir}/target</code></p>
<p>主代码输入目录outputDirectory:<code>${project.build.directory}/classes</code></p>
<p>最终构建的名称格式finalName：<code>${project.artifactId}-${project.version}</code></p>
<p>测试代码输出目录testOutputDirectory：<code>${project.build.directory}/test-classes</code></p>
<p>主源码目录sourceDirectory：<code>${project.basedir}/src/main/java</code></p>
<p>脚本源码目录scriptSourceDirectory：<code>src/main/scripts</code></p>
<p>测试源码目录testSourceDirectory：<code>${project.basedir}/src/test/java</code></p>
<p>主资源目录</p>
<pre><code>&lt;resources&gt;
      &lt;resource&gt;
        &lt;directory&gt;${project.basedir}/src/main/resources&lt;/directory&gt;
      &lt;/resource&gt;
&lt;/resources&gt;
</code></pre><p>测试资源目录</p>
<pre><code>&lt;testResources&gt;
      &lt;testResource&gt;
        &lt;directory&gt;${project.basedir}/src/test/resources&lt;/directory&gt;
      &lt;/testResource&gt;
&lt;/testResources&gt;
</code></pre><blockquote>
<p>  跳过测试</p>
</blockquote>
<pre><code>&lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
    &lt;configuration&gt;
        &lt;skip&gt;true&lt;/skip&gt;
    &lt;/configuration&gt;
&lt;/plugin&gt;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pom.xml简介。&lt;/p&gt;
    
    </summary>
    
      <category term="maven" scheme="http://www.yangkai0725.com/categories/maven/"/>
    
    
      <category term="java" scheme="http://www.yangkai0725.com/tags/java/"/>
    
      <category term="maven" scheme="http://www.yangkai0725.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Maven简介及常用命令</title>
    <link href="http://www.yangkai0725.com/20160827/20160827Maven%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
    <id>http://www.yangkai0725.com/20160827/20160827Maven简介及常用命令.html</id>
    <published>2016-08-27T10:11:14.000Z</published>
    <updated>2016-09-18T07:47:36.941Z</updated>
    
    <content type="html"><![CDATA[<p>Maven的核心思想：约定大于配置。<br>找那个jar的pom配置：<a href="http://mvnrepository.com/" target="_blank" rel="external">http://mvnrepository.com/</a><br>找jar包：www.findjar.com<br><a id="more"></a></p>
<blockquote>
<p>  maven打包package</p>
</blockquote>
<pre><code>mvn clean package -DskipTests
</code></pre><p>为了生成可执行的jar需要依赖maven-shade-plugin<br>如果pom中没有指定，则默认打jar包</p>
<blockquote>
<p>  安装任务install</p>
</blockquote>
<pre><code>mvn clean install
</code></pre><blockquote>
<p>  编译compile</p>
</blockquote>
<pre><code>mvn clean compile
</code></pre><blockquote>
<p>  测试test</p>
</blockquote>
<pre><code>mvn clean test
</code></pre><p>执行顺序：compile–&gt;test–&gt;package–&gt;install</p>
<blockquote>
<p>  maven安装jar包到仓库</p>
</blockquote>
<pre><code>mvn install:install-file -DgroupId=com.yk -DartifactId=zxing-core -Dversion=2.0 -Dpackaging=jar -Dfile=E:\my\jars\zxing\zxing-core-2.0.jar
</code></pre><p>如果要上传源码把packaging=jar,jar改成java-source</p>
<blockquote>
<p>  maven命令创建web项目</p>
</blockquote>
<pre><code>mvn archetype:create -DgroupId=com.joiest -DartifactId=webtest -DarchetypeArtifactId=maven-archetype-webapp
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Maven的核心思想：约定大于配置。&lt;br&gt;找那个jar的pom配置：&lt;a href=&quot;http://mvnrepository.com/&quot;&gt;http://mvnrepository.com/&lt;/a&gt;&lt;br&gt;找jar包：www.findjar.com&lt;br&gt;
    
    </summary>
    
      <category term="maven" scheme="http://www.yangkai0725.com/categories/maven/"/>
    
    
      <category term="java" scheme="http://www.yangkai0725.com/tags/java/"/>
    
      <category term="maven" scheme="http://www.yangkai0725.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Javascript键盘事件</title>
    <link href="http://www.yangkai0725.com/20160827/20160827Javascript%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6.html"/>
    <id>http://www.yangkai0725.com/20160827/20160827Javascript键盘事件.html</id>
    <published>2016-08-27T10:00:06.000Z</published>
    <updated>2016-09-18T07:47:36.939Z</updated>
    
    <content type="html"><![CDATA[<p>Javascript键盘事件。</p>
<a id="more"></a>
<blockquote>
<p>  keyup键盘弹起事件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"input[name='password']"</span>,loginForm).keyup(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> ev = <span class="built_in">document</span>.all ? <span class="built_in">window</span>.event : e;  </div><div class="line">    <span class="keyword">if</span>(ev.keyCode==<span class="number">13</span>) &#123;<span class="comment">// 如（ev.ctrlKey &amp;&amp; ev.keyCode==13）为ctrl+Center 触发</span></div><div class="line">        $(<span class="string">"#ulogin"</span>).click();</div><div class="line">    &#125;  </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Javascript键盘事件。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.yangkai0725.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://www.yangkai0725.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo简介</title>
    <link href="http://www.yangkai0725.com/20160827/20160827Dubbo%E7%AE%80%E4%BB%8B.html"/>
    <id>http://www.yangkai0725.com/20160827/20160827Dubbo简介.html</id>
    <published>2016-08-27T04:01:06.000Z</published>
    <updated>2016-09-18T07:47:36.938Z</updated>
    
    <content type="html"><![CDATA[<p>DUBBO是一个分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，是阿里巴巴SOA服务化治理方案的核心框架，每天为2,000+个服务提供3,000,000,000+次访问量支持，并被广泛应用于阿里巴巴集团的各成员站点。</p>
<a id="more"></a>
<h1 id="Dubbo-Feature-Road-Map"><a href="#Dubbo-Feature-Road-Map" class="headerlink" title="Dubbo Feature Road Map"></a>Dubbo Feature Road Map</h1><p><img src="/images/dubbo/1.png" alt=""></p>
<h1 id="Dubbo-Extension-Road-Map"><a href="#Dubbo-Extension-Road-Map" class="headerlink" title="Dubbo Extension Road Map"></a>Dubbo Extension Road Map</h1><p><img src="/images/dubbo/2.png" alt=""></p>
<h1 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h1><p><img src="/images/dubbo/3.png" alt=""></p>
<h1 id="Dubbo代码框架"><a href="#Dubbo代码框架" class="headerlink" title="Dubbo代码框架"></a>Dubbo代码框架</h1><p><img src="/images/dubbo/5.bmp" alt=""></p>
<h1 id="启动顺序"><a href="#启动顺序" class="headerlink" title="启动顺序"></a>启动顺序</h1><p>1、zookeeper注册中心<br>2、监控中心simple-monitor<br>3、提供者provider<br>4、消费者consumer<br>5、可选的admin控制台</p>
<h1 id="暴露服务与消费服务"><a href="#暴露服务与消费服务" class="headerlink" title="暴露服务与消费服务"></a>暴露服务与消费服务</h1><p><img src="/images/dubbo/4.bmp" alt=""></p>
<p>service–&gt;ServiceConfig–&gt;ProxyFactory(getInvoker)–&gt;Invoker–&gt;protocol(dubbo,hessian,rmi)–&gt;exporter</p>
<p>service—&gt;&gt;invoker—&gt;&gt;exporter</p>
<p>..–&gt;ReferenceConfig.init–&gt;protocol.refer(dubbo,hessian,rmi)–&gt;invoker–&gt;ProxyFactory(getProxy)–&gt;ref</p>
<h1 id="线程派发模式"><a href="#线程派发模式" class="headerlink" title="线程派发模式"></a>线程派发模式</h1><p><img src="/images/dubbo/6.bmp" alt=""></p>
<h1 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h1><p><img src="/images/dubbo/7.bmp" alt=""></p>
<h1 id="模块扩展"><a href="#模块扩展" class="headerlink" title="模块扩展"></a>模块扩展</h1><p>RPC协议扩展，封装远程调用协议<br>rpc.Protocol/Exporter/Invoker<br>调用拦截扩展<br>rpc.Filter/rpc.filter.XXXFilter<br>引用监听扩展<br>rpc.InvokerListener/rpc.listener.XXXInvokerListener<br>暴露监听扩展<br>rpc.ExporterListener/registry.directory.ResistryExporterListener<br>集群扩展<br>rpc.cluster.Cluster/rpc.cluster.support.XXXCluster<br>路由扩展<br>rpc.cluster.Router/RouterFactory/rpc.cluster.router.XXXRouterFactory<br>负载均衡扩展<br>rpc.cluster.LoadBalance/rpc.cluster.loadbalance.XXXLoadBalance<br>合并结果扩展<br>rpc.cluster.Merge/rpc.cluster.merge.XXXMerge<br>注册中心扩展<br>registry.Registry/RegistryFactory/registry.support.dubbo.DubboRegistryFactory<br>监控中心扩展<br>monitor.Monitor/MonitorFactory/monitor.support.dubbo.DubboMonitorFactory<br>扩展点加载扩展<br>common.extension.ExtensionFactory/common.extension.factory.SpiExtensionFactory/config.spring.extension.SpringExtensionFactory<br>动态代理扩展<br>rpc.proxy.ProxyFactory/JdkProxyFactory/JavassistProxyFactory<br>编译器扩展<br>common.compiler.Compiler/common.compiler.support.JdkCompiler/JavassistCompiler<br>消息派发扩展<br>remoting.Dispater<br>线程池扩展<br>common.thredpool.ThreadPool/FixedThreadPool/CachedThreadPool<br>序列化扩展<br>common.serializer.Serialization/ObjectInput/ObjectOutput<br>网络传输扩展<br>remoting.Transporter/Server/Client Netty/Mina/GrizzlyTransporter<br>信息交换扩展<br>remoting.exchange.Exchanger/ExchangeServer/ExchangeClient<br>组网扩展<br>remoting.p2p.NetWorker/remoting.p2p.supporter.MulticastNetworker/FileNetworker<br>Telnet命令扩展<br>remoting.telnet.TelnetHandler/remoting.telnet.XXXTelnetHandler/rpc.dubbo.telnet.XXXTelnetHandler<br>状态检查扩展<br>common.status.StatusChecker<br>容器扩展<br>container.Container/container.spring.SpringContainer/JettyContainer/Log4jContainer<br>页面扩展<br>container.page.PageHandler/container.page.pages.Home/Status/Log/SystemPageHandler<br>缓存扩展<br>cache.CacheFactory/cache.support.xxx.Lru/ThreadLocal/JCacheFactory<br>验证扩展<br>validation.Validation/validation.support.jvalidation.JValidation<br>日志适配扩展<br>common.logger.LoggerAdapter/common.logger.xxx.Slf4j/Jcl/Log4j/JdkLoggerAdapter</p>
<h1 id="源码结构"><a href="#源码结构" class="headerlink" title="源码结构"></a>源码结构</h1><p>dubbo.cache<br>缓存相关，filter、support<br>dubbo.common<br>util类及通用模型，io、json、log、threadpool、serializer等<br>dubbo.config<br>配置模块，是Dubbo对外的API，用户通过Config使用Dubbo，隐藏Dubbo所有细节，annotation、spring、support等<br>dubbo.container<br>容器模块，是一个Standlone的容器，以简单的Main加载Spring启动，因为服务通常不需要Tomcat/JBoss等Web容器的特性，没必要用Web容器去加载服务<br>dubbo.monitor<br>监控模块，统计服务调用次数，调用时间的，调用链跟踪的服务<br>dubbo.registry<br>注册中心模块，基于注册中心下发地址的集群方式，以及对各种注册中心的抽象<br>dubbo.remoting<br>远程通讯模块，相当于Dubbo协议的实现，如果RPC用RMI协议则不需要使用此包<br>dubbo.rpc<br>远程调用模块，抽象各种协议，以及动态代理，只包含一对一的调用，不关心集群的管理<br>dubbo.validation</p>
<h1 id="dubbo-XXX配置"><a href="#dubbo-XXX配置" class="headerlink" title="dubbo-XXX配置"></a>dubbo-XXX配置</h1><p><dubbo:service><br>服务配置，用于暴露一个服务，定义服务的元信息，一个服务可以用多个协议暴露，一个服务也可以注册到多个注册中心。</dubbo:service></p>
<p><dubbo:reference><br>引用配置，用于创建一个远程服务代理，一个引用可以指向多个注册中心。</dubbo:reference></p>
<p><dubbo:protocol><br>协议配置，用于配置提供服务的协议信息，协议由提供方指定，消费方被动接受。</dubbo:protocol></p>
<p><dubbo:application><br>应用配置，用于配置当前应用信息，不管该应用是提供者还是消费者。</dubbo:application></p>
<p><dubbo:module><br>模块配置，用于配置当前模块信息，可选。</dubbo:module></p>
<p><dubbo:registry><br>注册中心配置，用于配置连接注册中心相关信息。</dubbo:registry></p>
<p><dubbo:monitor><br>监控中心配置，用于配置连接监控中心相关信息，可选。</dubbo:monitor></p>
<p><dubbo:provider><br>提供方的缺省值，当ProtocolConfig和ServiceConfig某属性没有配置时，采用此缺省值，可选。</dubbo:provider></p>
<p><dubbo:consumer><br>消费方缺省配置，当ReferenceConfig某属性没有配置时，采用此缺省值，可选。</dubbo:consumer></p>
<p><dubbo:method><br>方法配置，用于ServiceConfig和ReferenceConfig指定方法级的配置信息。</dubbo:method></p>
<p><dubbo:argument><br>用于指定方法参数配置。</dubbo:argument></p>
<p><img src="/images/dubbo/8.bmp" alt=""></p>
<h1 id="dubbo-protocol"><a href="#dubbo-protocol" class="headerlink" title="dubbo:protocol"></a>dubbo:protocol</h1><pre><code>&lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;9090&quot;    
    client=&quot;netty&quot;  serialization=&quot;hessian2&quot; charset=&quot;UTF-8&quot;    
    threadpool=&quot;fixed&quot; threads=&quot;100&quot; queues=&quot;0&quot; iothreads=&quot;9&quot; buffer=&quot;8192&quot;    
    accepts=&quot;1000&quot; payload=&quot;8388608&quot; /&gt;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DUBBO是一个分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，是阿里巴巴SOA服务化治理方案的核心框架，每天为2,000+个服务提供3,000,000,000+次访问量支持，并被广泛应用于阿里巴巴集团的各成员站点。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.yangkai0725.com/categories/java/"/>
    
    
      <category term="java" scheme="http://www.yangkai0725.com/tags/java/"/>
    
      <category term="dubbo" scheme="http://www.yangkai0725.com/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>ORACLE常用数值函数、转换函数、字符串函数</title>
    <link href="http://www.yangkai0725.com/20160823/20160823Oracle%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0.html"/>
    <id>http://www.yangkai0725.com/20160823/20160823Oracle常用函数.html</id>
    <published>2016-08-23T11:56:30.000Z</published>
    <updated>2016-08-23T12:42:31.641Z</updated>
    
    <content type="html"><![CDATA[<p>N表示数字型，C表示字符型，D表示日期型，[]表示内中参数可被忽略，fmt表示格式。</p>
<a id="more"></a>
<p><strong><em>单值函数在查询中返回单个值，可被应用到select，where子句，start with以及connect by 子句和having子句.</em></strong></p>
<blockquote>
<blockquote>
<p> <strong><em>数值型函数(Number Functions)</em></strong> </p>
</blockquote>
</blockquote>
<p><em>数值型函数输入数字型参数并返回数值型的值。多数该类函数的返回值支持38位小数点，诸如：COS, COSH, EXP, LN, LOG, SIN, SINH, SQRT, TAN, and TANH 支持36位小数点。ACOS, ASIN, ATAN, and ATAN2支持30位小数点。</em> </p>
<ol>
<li><p>MOD(n1,n2) 返回n1除n2的余数，如果n2=0则返回n1的值。<br>例如：SELECT MOD(24,5) FROM DUAL; </p>
</li>
<li><p>ROUND(n1[,n2]) 返回四舍五入小数点右边n2位后n1的值，n2缺省值为0，如果n2为负数就舍入到小数点左边相应的位上(虽然oracle documents上提到n2的值必须为整数，事实上执行时此处的判断并不严谨，即使n2为非整数，它也会自动将n2取整后做处理，但是我文档中其它提到必须为整的地方需要特别注意，如果不为整执行时会报错的)。<br>例如：SELECT ROUND(23.56),ROUND(23.56,1),ROUND(23.56,-1) FROM DUAL; </p>
</li>
<li><p>TRUNC(n1[,n2] 返回截尾到n2位小数的n1的值，n2缺省设置为0，当n2为缺省设置时会将n1截尾为整数，如果n2为负值，就截尾在小数点左边相应的位上。<br>例如：SELECT TRUNC(23.56),TRUNC(23.56,1),TRUNC(23.56,-1) FROM DUAL; </p>
</li>
</ol>
<blockquote>
<blockquote>
<p> <strong><em>字符型函数返回字符值(Character Functions Returning Character Values)</em></strong> </p>
</blockquote>
</blockquote>
<p><em>该类函数返回与输入类型相同的类型。</em><br><em>返回的CHAR类型值长度不超过2000字节；</em><br><em>返回的VCHAR2类型值长度不超过4000字节；</em><br><em>如果上述应返回的字符长度超出，oracle并不会报错而是直接截断至最大可支持长度返回</em><br><em>返回的CLOB类型值长度不超过4G；</em><br><em>对于CLOB类型的函数，如果返回值长度超出，oracle不会返回任何错误而是直接抛出错误</em></p>
<ol>
<li><p>LOWER(c) 将指定字符串内字符变为小写，支持CHAR,VARCHAR2,NCHAR,NVARCHAR2,CLOB,NCLOB类型<br>例如：SELECT LOWER(‘WhaT is tHis’) FROM DUAL; </p>
</li>
<li><p>UPPER(c) 将指定字符串内字符变为大写，支持CHAR,VARCHAR2,NCHAR,NVARCHAR2,CLOB,NCLOB类型<br>例如：SELECT UPPER(‘WhaT is tHis’) FROM DUAL; </p>
</li>
<li><p>LPAD(c1,n[,c2])<br>返回指定长度=n的字符串，需要注意的有几点：<br>如果n<c1.length则从右到左截取指定长度返回； 如果n="">c1.length and c2 is null，以空格从左向右补充字符长度至n并返回；<br>如果n&gt;c1.length and c2 is not null，以指定字符c2从左向右补充c1长度至n并返回；<br>例如：SELECT LPAD(‘WhaT is tHis’,5),LPAD(‘WhaT is tHis’,25),LPAD(‘WhaT is tHis’,25,’-‘) FROM DUAL;<br>最后大家再猜一猜，如果n&lt;0，结果会怎么样 </c1.length则从右到左截取指定长度返回；></p>
</li>
<li><p>RPAD(c1,n[,c2])<br>返回指定长度=n的字符串，基本与上同，不过补充字符是从右向左方向正好与上相反；<br>例如：SELECT RPAD(‘WhaT is tHis’,5),RPAD(‘WhaT is tHis’,25),RPAD(‘WhaT is tHis’,25,’-‘) FROM DUAL; </p>
</li>
<li><p>TRIM([[LEADING||TRAILING||BOTH] c2 FROM] c1) 哈哈，被俺无敌的形容方式搞晕头了吧，这个地方还是看图更明了一些。<br>看起来很复杂，理解起来很简单：<br>如果没有指定任何参数则oracle去除c1头尾空格<br>例如：SELECT TRIM(‘ WhaT is tHis ‘) FROM DUAL;<br>如果指定了c2参数，则oracle去掉c1头尾c2(这个建议细致测试，有多种不同情形的哟)<br>例如：SELECT TRIM(‘W’ FROM ‘WhaT is tHis w W’) FROM DUAL;<br>如果指定了leading参数则会去掉c1头部c2<br>例如：SELECT TRIM(leading ‘W’ FROM ‘WhaT is tHis w W’) FROM DUAL;<br>如果指定了trailing参数则会去掉c1尾部c2<br>例如：SELECT TRIM(trailing ‘W’ FROM ‘WhaT is tHis w W’) FROM DUAL;<br>如果指定了both参数则会去掉c1头尾c2(跟不指定有区别吗？没区别！)<br>例如：SELECT TRIM(both ‘W’ FROM ‘WhaT is tHis w W’) FROM DUAL;<br>注意：c2长度=1 </p>
</li>
<li>LTRIM(c1[,c2]) 千万表以为与上面那个长的像，功能也与上面的类似，本函数是从字符串c1左侧截取掉与指定字符串c2相同的字符并返回。如果c2为空则默认截取空格。<br>例如：SELECT LTRIM(‘WWhhhhhaT is tHis w W’,’Wh’) FROM DUAL; </li>
<li>RTRIM(c1,c2)与上同，不过方向相反<br>例如：SELECT RTRIM(‘WWhhhhhaT is tHis w W’,’W w’) FROM DUAL; </li>
<li>REPLACE(c1,c2[,c3]) 将c1字符串中的c2替换为c3，如果c3为空，则从c1中删除所有c2。<br>例如：SELECT REPLACE(‘WWhhhhhaT is tHis w W’,’W’,’-‘) FROM DUAL; </li>
<li><p>SOUNDEX(c) 神奇的函数啊，该函数返回字符串参数的语音表示形式，对于比较一些读音相同，但是拼写不同的单词非常有用。计算语音的算法如下：<br>保留字符串首字母，但删除a、e、h、i、o、w、y。<br>将下表中的数字赋给相对应的字母</p>
<p> 1：b、f、p、v<br> 2：c、g、k、q、s、x、z<br> 3：d、t<br> 4：l<br> 5：m、n<br> 6：R </p>
</li>
</ol>
<p>如果字符串中存在拥有相同数字的2个以上（包含2个）的字母在一起（例如b和f），或者只有h或w，则删除其他的，只保留1个；<br>只返回前4个字节，不够用0填充<br>例如：SELECT SOUNDEX(‘dog’),soundex(‘boy’) FROM DUAL; </p>
<ol>
<li>SUBSTR(c1,n1[,n2]) 截取指定长度的字符串。稍不注意就可能充满了陷阱的函数。<br>n1=开始长度；<br>n2=截取的字符串长度，如果为空，默认截取到字符串结尾；<br>如果n1=0 then n1=1<br>如果n1&gt;0，则oracle从左向右确认起始位置截取<br>例如：SELECT SUBSTR(‘What is this’,5,3) FROM DUAL;<br>如果n1<0，则oracle从右向左数确认起始位置 例如：select="" substr('what="" is="" this',-5,3)="" from="" dual;="" 如果n1="">c1.length则返回空<br>例如：SELECT SUBSTR(‘What is this’,50,3) FROM DUAL;<br>然后再请你猜猜，如果n2&lt;1，会如何返回值呢 </0，则oracle从右向左数确认起始位置></li>
<li>TRANSLATE(c1,c2,c3) 就功能而言，此函数与replace有些相似。但需要注意的一点是，translate是绝对匹配替换，这点与replace函数具有非常大区别。什么是绝对匹配替换呢？简单的说，是将字符串c1中按一定的格式c2替换为c3。如果文字形容仍然无法理解，我们通过几具实例来说明：<br>例如：<br>SELECT TRANSLATE(‘What is this’,’’,’-‘) FROM DUAL;<br>SELECT TRANSLATE(‘What is this’,’-‘,’’) FROM DUAL;<br>结果都是空。来试试这个：<br>SELECT TRANSLATE(‘What is this’,’ ‘,’ ‘) FROM DUAL;<br>再来看这个：<br>SELECT TRANSLATE(‘What is this’,’ait’,’-*’) FROM DUAL;<br>是否明白了点呢？Replace函数理解比较简单，它是将字符串中指定字符替换成其它字符，它的字符必须是连续的。而translate中，则是指定字符串c1中出现的c2，将c2中各个字符替换成c3中位置顺序与其相同的c3中的字符。明白了？Replace是替换，而translate则像是过滤 </li>
</ol>
<blockquote>
<blockquote>
<p> <strong><em>字符型函数返回数字值(Character Functions Returning Number Values)</em></strong><br>本类函数支持所有的数据类型 </p>
</blockquote>
</blockquote>
<ol>
<li><p>INSTR(c1,c2[,n1[,n2]]) 返回c2在c1中位置<br>c1:原字符串<br>c2:要寻找的字符串<br>n1:查询起始位置，正值表示从左到右，负值表示从右到左 (大小表示位置,比如3表示左面第3处开始,-3表示右面第3处开始)。黑黑，如果为0的话，则返回的也是0<br>n2:第几个匹配项。大于0<br>例如：SELECT INSTR(‘abcdefg’,’e’,-3) FROM DUAL; </p>
</li>
<li><p>LENGTH(c) 返回指定字符串的长度。如果<br>例如：SELECT LENGTH(‘A123中’) FROM DUAL;<br>猜猜SELECT LENGTH(‘’) FROM DUAL;的返回值是什么 </p>
</li>
</ol>
<blockquote>
<blockquote>
<p> <strong><em>日期函数(Datetime Functions)</em></strong><br>本类函数中，除months_between返回数值外，其它都将返回日期。 </p>
</blockquote>
</blockquote>
<ol>
<li><p>ADD_MONTHS() 返回指定日期月份+n之后的值，n可以为任何整数。<br>例如：SELECT ADD_MONTHS(sysdate,12),ADD_MONTHS(sysdate,-12) FROM DUAL; </p>
</li>
<li><p>CURRENT_DATE 返回当前session所在时区的默认时间<br>例如：<br> SQL&gt; alter session set nls_date_format = ‘mm-dd-yyyy’ ;<br> SQL&gt; select current_date from dual; </p>
</li>
<li><p>SYSDATE 功能与上相同，返回当前session所在时区的默认时间。但是需要注意的一点是，如果同时使用sysdate与current_date获得的时间不一定相同，某些情况下current_date会比sysdate快一秒。经过与xyf_tck(兄台的大作ORACLE的工作机制写的很好，深入浅出)的短暂交流，我们认为current_date是将current_timestamp中毫秒四舍五入后的返回，虽然没有找到文档支持，但是想来应该八九不离十。同时，仅是某些情况下会有一秒的误差，一般情况下并不会对你的操作造成影响，所以了解即可。<br>例如：SELECT SYSDATE,CURRENT_DATE FROM DUAL; </p>
</li>
<li><p>LAST_DAY(d) 返回指定时间所在月的最后一天<br>例如：SELECT last_day(SYSDATE) FROM DUAL; </p>
</li>
<li><p>NEXT_DAY(d,n) 返回指定日期后第一个n的日期，n为一周中的某一天。但是，需要注意的是n如果为字符的话，它的星期形式需要与当前session默认时区中的星期形式相同。<br>例如：三思用的中文nt，nls_language值为SIMPLIFIED CHINESE<br>SELECT NEXT_DAY(SYSDATE,5) FROM DUAL;<br>SELECT NEXT_DAY(SYSDATE,’星期四’) FROM DUAL;<br>两种方式都可以取到正确的返回，但是：<br>SELECT NEXT_DAY(SYSDATE,’Thursday’) FROM DUAL;<br>则会执行出错，提供你说周中的日无效，就是这个原因了。 </p>
</li>
<li><p>MONTHS_BETWEEN(d1,d2) 返回d1与d2间的月份差，视d1,d2的值大小，结果可正可负，当然也有可能为0<br>例如：<br>SELECT months_between(SYSDATE, sysdate),<br>months_between(SYSDATE, add_months(sysdate, -1)),<br>months_between(SYSDATE, add_months(sysdate, 1))<br>FROM DUAL; </p>
</li>
<li><p>ROUND(d[,fmt]) 前面讲数值型函数的时候介绍过ROUND，此处与上功能基本相似，不过此处操作的是日期。如果不指定fmt参数，则默认返回距离指定日期最近的日期。<br>例如：SELECT ROUND(SYSDATE,’HH24’) FROM DUAL; </p>
</li>
<li><p>TRUNC(d[,fmt]) 与前面介绍的数值型TRUNC原理相同，不过此处也是操作的日期型。<br>例如：SELECT TRUNC(SYSDATE,’HH24’) FROM DUAL; </p>
</li>
</ol>
<blockquote>
<blockquote>
<p><strong><em>转换函数(Conversion Functions) </em></strong></p>
</blockquote>
</blockquote>
<p>转换函数将指定字符从一种类型转换为另一种，通常这类函数遵循如下惯例：函数名称后面跟着待转换类型以及输出类型。 </p>
<ol>
<li>TO_CHAR() 本函数又可以分三小类，分别是<br>转换字符-&gt;字符TO_CHAR(c)：将nchar,nvarchar2,clob,nclob类型转换为char类型；<br>例如：SELECT TO_CHAR(‘AABBCC’) FROM DUAL;<br>转换时间-&gt;字符TO_CHAR(d[,fmt])：将指定的时间(data,timestamp,timestamp with time zone)按照指定格式转换为varchar2类型；<br>例如：SELECT TO_CHAR(sysdate,’yyyy-mm-dd hh24:mi:ss’) FROM DUAL;<br>转换数值-&gt;字符TO_CHAR(n[,fmt]):将指定数值n按照指定格式fmt转换为varchar2类型并返回;例如：SELECT TO_CHAR(-100, ‘L99G999D99MI’) FROM DUAL; </li>
<li>TO_DATE(c[,fmt[,nls]]) 将char,nchar,varchar2,nvarchar2转换为日期类型，如果fmt参数不为空，则按照fmt中指定格式进行转换。注意这里的fmt参数。如果ftm为’J’则表示按照公元制(Julian day)转换，c则必须为大于0并小于5373484的正整数。<br>例如：<br>SELECT TO_DATE(2454336, ‘J’) FROM DUAL;<br>SELECT TO_DATE(‘2007-8-23 23:25:00’, ‘yyyy-mm-dd hh24:mi:ss’) FROM DUAL;<br>为什么公元制的话，c的值必须不大于5373484呢？因为Oracle的DATE类型的取值范围是公元前4712年1月1日至公元9999年12月31日。看看下面这个语句：<br>SELECT TO_CHAR(TO_DATE(‘9999-12-31’,’yyyy-mm-dd’),’j’) FROM DUAL; </li>
<li>TO_NUMBER(c[,fmt[,nls]]) 将char,nchar,varchar2,nvarchar2型字串按照fmt中指定格式转换为数值类型并返回。<br>例如：SELECT TO_NUMBER(‘-100.00’, ‘9G999D99’) FROM DUAL; </li>
</ol>
<blockquote>
<blockquote>
<p> <strong><em>其它辅助函数(Miscellaneous Single-Row Functions)</em></strong></p>
</blockquote>
</blockquote>
<ol>
<li>DECODE(exp,s1,r1,s2,r2..s,r[,def])</li>
</ol>
<p>可以把它理解成一个增强型的if else，只不过它并不通过多行语句，而是在一个函数内实现if else的功能。<br>exp做为初始参数。s做为对比值，相同则返回r，如果s有多个，则持续遍历所有s，直到某个条件为真为止，否则返回默认值def(如果指定了的话)，如果没有默认值，并且前面的对比也都没有为真，则返回空。<br>毫无疑问，decode是个非常重要的函数，在实现行转列等功能时都会用到，需要牢记和熟练使用。<br>例如：select decode(‘a2’,’a1’,’true1’,’a2’,’true2’,’default’) from dual; </p>
<ol>
<li><p>GREATEST(n1,n2,…n) 返回序列中的最大值<br>例如：SELECT GREATEST(15,5,75,8) “Greatest” FROM DUAL; </p>
</li>
<li><p>LEAST(n1,n2….n) 返回序列中的最小值<br>例如：SELECT LEAST(15,5,75,8) LEAST FROM DUAL; </p>
</li>
<li><p>NULLIF(c1,c2)<br>Nullif也是个很有意思的函数。逻辑等价于：CASE WHEN c1 = c2 THEN NULL ELSE c1 END<br>例如：SELECT NULLIF(‘a’,’b’),NULLIF(‘a’,’a’) FROM DUAL; </p>
</li>
<li><p>NVL(c1,c2) 逻辑等价于IF c1 is null THEN c2 ELSE c1 END。c1,c2可以是任何类型。如果两者类型不同，则oracle会自动将c2转换为c1的类型。<br>例如：SELECT NVL(null, ‘12’) FROM DUAL; </p>
</li>
<li><p>NVL2(c1,c2,c3) 大家可能都用到nvl，但你用过nvl2吗？如果c1非空则返回c2,如果c1为空则返回c3<br>例如：select nvl2(‘a’, ‘b’, ‘c’) isNull,nvl2(null, ‘b’, ‘c’) isNotNull from dual; </p>
</li>
<li><p>SYS_CONNECT_BY_PATH(col,c) 该函数只能应用于树状查询。返回通过c1连接的从根到节点的路径。该函数必须与connect by 子句共同使用。<br>例如：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> tmp3(rootcol varchar2(<span class="number">10</span>),nodecol varchar2(<span class="number">10</span>)); </div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp3 <span class="keyword">values</span> (<span class="string">''</span>,<span class="string">'a001'</span>); </div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp3 <span class="keyword">values</span> (<span class="string">''</span>,<span class="string">'b001'</span>); </div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp3 <span class="keyword">values</span> (<span class="string">'a001'</span>,<span class="string">'a002'</span>); </div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp3 <span class="keyword">values</span> (<span class="string">'a002'</span>,<span class="string">'a004'</span>); </div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp3 <span class="keyword">values</span> (<span class="string">'a001'</span>,<span class="string">'a003'</span>); </div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp3 <span class="keyword">values</span> (<span class="string">'a003'</span>,<span class="string">'a005'</span>); </div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp3 <span class="keyword">values</span> (<span class="string">'a005'</span>,<span class="string">'a008'</span>); </div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp3 <span class="keyword">values</span> (<span class="string">'b001'</span>,<span class="string">'b003'</span>); </div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp3 <span class="keyword">values</span> (<span class="string">'b003'</span>,<span class="string">'b005'</span>); </div><div class="line"><span class="keyword">select</span> <span class="keyword">lpad</span>(<span class="string">' '</span>, <span class="keyword">level</span>*<span class="number">10</span>,<span class="string">'='</span>) ||<span class="string">'&gt;'</span>|| sys_connect_by_path(nodecol,<span class="string">'/'</span>) </div><div class="line"><span class="keyword">from</span> tmp3 </div><div class="line"><span class="keyword">start</span> <span class="keyword">with</span> rootcol = <span class="string">'a001'</span> </div><div class="line"><span class="keyword">connect</span> <span class="keyword">by</span> <span class="keyword">prior</span> nodecol =rootcol;</div></pre></td></tr></table></figure>
</li>
<li><p>SYS_CONTEXT(c1,c2[,n]) 将指定命名空间c1的指定参数c2的值按照指定长度n截取后返回。<br>Oracle9i提供内置了一个命名空间USERENV，描述了当前session的各项信息，其拥有下列参数：<br>CURRENT_SCHEMA:当前模式名<br>CURRENT_USER:当前用户<br>IP_ADDRESS:当前客户端IP地址<br>OS_USER:当前客户端操作系统用户<br>等等数十项，更详细的参数列还请大家直接参考Oracle Online Documents </p>
</li>
</ol>
<p>例如：SELECT SYS_CONTEXT(‘USERENV’, ‘SESSION_USER’) FROM DUAL;<br>注：N表示数字型，C表示字符型，D表示日期型，[]表示内中参数可被忽略，fmt表示格式。 </p>
<p>单值函数在查询中返回单个值，可被应用到select，where子句，start with以及connect by 子句和having子句。</p>
<blockquote>
<blockquote>
<p> <strong><em>数值型函数(Number Functions)</em></strong> </p>
</blockquote>
</blockquote>
<p>数值型函数输入数字型参数并返回数值型的值。多数该类函数的返回值支持38位小数点，诸如：COS, COSH, EXP, LN, LOG, SIN, SINH, SQRT, TAN, and TANH 支持36位小数点。ACOS, ASIN, ATAN, and ATAN2支持30位小数点。 </p>
<ol>
<li><p>ABS(n) 返回数字的绝对值<br>例如：SELECT ABS(-1000000.01) FROM DUAL; </p>
</li>
<li><p>COS(n) 返回n的余弦值<br>例如：SELECT COS(-2) FROM DUAL; </p>
</li>
<li><p>ACOS(n) 反余弦函数，n between -1 and 1，返回值between 0 and pi。<br>例如：SELECT ACOS(0.9) FROM DUAL; </p>
</li>
<li><p>BITAND(n1,n2) 位与运算，这个太有意思了，虽然没想到可能用到哪里，详细说明一下：<br>假设3,9做位与运算，3的二进制形式为：0011，9的二进制形式为：1001，则结果是0001，转换成10进制数为1。<br>例如：SELECT BITAND(3,9) FROM DUAL; </p>
</li>
<li><p>CEIL(n) 返回大于或等于n的最小的整数值<br>例如：SELECT ceil(18.2) FROM DUAL;<br>考你一下，猜猜ceil(-18.2)的值会是什么呢 </p>
</li>
<li><p>FLOOR(n) 返回小于等于n的最大整数值<br>例如：SELECT FLOOR(2.2) FROM DUAL;<br>再猜猜floor(-2.2)的值会是什么呢 </p>
</li>
<li><p>BIN_TO_NUM(n1,n2,….n) 二进制转向十进制<br>例如：SELECT BIN_TO_NUM(1),BIN_TO_NUM(1,0),BIN_TO_NUM(1,1) FROM DUAL; </p>
</li>
<li><p>SIN(n) 返回n的正玄值,n为弧度。<br>例如：SELECT SIN(10) FROM DUAL; </p>
</li>
<li><p>SINH(n) 返回n的双曲正玄值,n为弧度。<br>例如：SELECT SINH(10) FROM DUAL; </p>
</li>
<li><p>ASIN(n) 反正玄函数，n between -1 and 1，返回值between pi/2 and -pi/2。<br>例如：SELECT ASIN(0.8) FROM DUAL; </p>
</li>
<li><p>TAN(n) 返回n的正切值,n为弧度<br>例如：SELECT TAN(0.8) FROM DUAL; </p>
</li>
<li><p>TANH(n) 返回n的双曲正切值,n为弧度<br>例如：SELECT TANH(0.8) FROM DUAL; </p>
</li>
<li><p>ATAN(n) 反正切函数，n表示弧度，返回值between pi/2 and -pi/2。<br>例如：SELECT ATAN(-444444.9999999) FROM DUAL; </p>
</li>
<li><p>EXP(n) 返回e的n次幂，e = 2.71828183 …<br>例如：SELECT EXP(3) FROM DUAL; </p>
</li>
<li><p>LN(n) 返回n的自然对数，n&gt;0<br>例如：SELECT LN(0.9) FROM DUAL; </p>
</li>
<li><p>LOG(n1,n2) 返回以n1为底n2的对数，n1 &gt;0 and not 1 ，n2&gt;0<br>例如：SELECT LOG(1.1,2.2) FROM DUAL; </p>
</li>
<li><p>POWER(n1,n2) 返回n1的n2次方。n1,n2可以为任意数值，不过如果m是负数，则n必须为整数<br>例如：SELECT POWER(2.2,2.2) FROM DUAL; </p>
</li>
<li><p>SIGN(n) 如果n<0返回-1,如果n>0返回1，如果n=0返回0.<br>例如：SELECT SIGN(14),SIGN(-14),SIGN(0) FROM DUAL; </0返回-1,如果n></p>
</li>
<li><p>SQRT(n) 返回n的平方根,n为弧度。n&gt;=0<br>例如：SELECT SQRT(0.1) FROM DUAL; </p>
</li>
</ol>
<blockquote>
<blockquote>
<p> <strong><em>字符型函数返回字符值(Character Functions Returning Character Values)</em></strong></p>
</blockquote>
</blockquote>
<p>该类函数返回与输入类型相同的类型。<br>返回的CHAR类型值长度不超过2000字节；<br>返回的VCHAR2类型值长度不超过4000字节；<br>如果上述应返回的字符长度超出，oracle并不会报错而是直接截断至最大可支持长度返回。<br>返回的CLOB类型值长度不超过4G；<br>对于CLOB类型的函数，如果返回值长度超出，oracle不会返回任何错误而是直接抛出错误。 </p>
<ol>
<li><p>CHR(N[ USING NCHAR_CS]) 返回指定数值在当前字符集中对应的字符<br>例如：SELECT CHR(95) FROM DUAL; </p>
</li>
<li><p>CONCAT(c1,c2) 连接字符串，等同于||<br>例如：SELECT concat(‘aa’,’bb’) FROM DUAL; </p>
</li>
<li><p>INITCAP(c) 将字符串中单词的第一个字母转换为大写，其它则转换为小写<br>例如：SELECT INITCAP(‘whaT is this’) FROM DUAL; </p>
</li>
<li><p>NLS_INITCAP(c) 返回指定字符串，并将字符串中第一个字母变大写，其它字母变小写<br>例如：SELECT NLS_INITCAP(‘中华miNZHu’) FROM DUAL;<br>它还具有一个参数：Nlsparam用来指定排序规则，可以忽略，默认状态该参数为当前session的排序规则。 </p>
</li>
</ol>
<blockquote>
<blockquote>
<p> <strong><em>字符型函数返回数字值(Character Functions Returning Number Values) </em></strong></p>
</blockquote>
</blockquote>
<p>本类函数支持所有的数据类型 </p>
<ol>
<li>ASCII(c) 与chr函数的用途刚刚相反，本函数返回指定字符在当前字符集下对应的数值。<br>例如：SELECT ASCII(‘_’) FROM DUAL; </li>
</ol>
<blockquote>
<blockquote>
<p> <strong><em>日期函数(Datetime Functions) </em></strong></p>
</blockquote>
</blockquote>
<p>本类函数中，除months_between返回数值外，其它都将返回日期。 </p>
<ol>
<li><p>CURRENT_TIMESTAMP([n]) 返回当前session所在时区的日期和时间。n表示毫秒级的精度，不大于6<br>例如：SELECT CURRENT_TIMESTAMP(3) FROM DUAL; </p>
</li>
<li><p>LOCALTIMESTAMP([n]) 与上同，返回当前session所在时区的日期和时间。n表示毫秒级的精度，不大于6<br>例如：SELECT LOCALTIMESTAMP(3) FROM DUAL; </p>
</li>
<li><p>SYSTIMESTAMP([n]) 与上同，返回当前数据库所在时区的日期和时间，n表示毫秒级的精度，&gt;0 and &lt;6<br>例如：SELECT SYSTIMESTAMP(4) FROM DUAL; </p>
</li>
<li><p>DBTIMEZONE 返回数据库的当前时区<br>例如：SELECT DBTIMEZONE FROM DUAL; </p>
</li>
<li><p>SESSIONTIMEZONE 返回当前session所在时区<br>例如：SELECT SESSIONTIMEZONE FROM DUAL; </p>
</li>
<li><p>EXTRACT(key from date) key=(year,month,day,hour,minute,second) 从指定时间提到指定日期列<br>例如：SELECT EXTRACT(year from sysdate) FROM DUAL; </p>
</li>
<li><p>TO_TIMESTAMP(c1[,fmt]) 将指定字符按指定格式转换为timestamp格式。<br>例如：SELECT TO_TIMESTAMP(‘2007-8-22’, ‘YYYY-MM-DD HH:MI:SS’) FROM DUAL; </p>
</li>
</ol>
<blockquote>
<blockquote>
<p> <strong><em>转换函数(Conversion Functions)</em></strong> </p>
</blockquote>
</blockquote>
<p>转换函数将指定字符从一种类型转换为另一种，通常这类函数遵循如下惯例：函数名称后面跟着待转换类型以及输出类型。 </p>
<ol>
<li><p>BIN_TO_NUM(n1,n2…n) 将一组位向量转换为等价的十进制形式。<br>例如：SELECT BIN_TO_NUM(1,1,0) FROM DUAL; </p>
</li>
<li><p>CAST(c as newtype) 将指定字串转换为指定类型，基本只对字符类型有效，比如char,number,date,rowid等。此类转换有一个专门的表列明了哪种类型可以转换为哪种类型，此处就不作酹述。<br>例如：SELECT CAST(‘1101’ AS NUMBER(5)) FROM DUAL; </p>
</li>
<li><p>CHARTOROWID(c) 将字符串转换为rowid类型<br>例如：SELECT CHARTOROWID(‘A003D1ABBEFAABSAA0’) FROM DUAL; </p>
</li>
<li><p>ROWIDTOCHAR(rowid) 转换rowid值为varchar2类型。返回串长度为18个字节。<br>例如：SELECT ROWIDTOCHAR(rowid) FROM DUAL; </p>
</li>
<li><p>TO_MULTI_BYTE(c) 将指定字符转换为全角并返回char类型字串<br>例如：SELECT TO_MULTI_BYTE(‘ABC abc　中华’) FROM DUAL; </p>
</li>
<li><p>TO_SINGLE_BYTE(c) 将指定字符转换为半角并返回char类型字串<br>例如：SELECT TO_SINGLE_BYTE(‘ＡＢＣ　ａｂｃ中华’) FROM DUAL; </p>
</li>
</ol>
<blockquote>
<blockquote>
<p> <strong><em>其它辅助函数(Miscellaneous Single-Row Functions)</em></strong> </p>
</blockquote>
</blockquote>
<ol>
<li><p>COALESCE(n1,n2,….n) 返回序列中的第一个非空值<br>例如：SELECT COALESCE(null,5,6,null,9) FROM DUAL; </p>
</li>
<li><p>DUMP(exp[,fmt[,start[,length]]])<br>dump是个功能非常强悍的函数，对于深入了解oracle存储的人而言相当有用。所以对于我们这些仅仅只是应用的人而言就不知道能将其应用于何处了。此处仅介绍用法，不对其功能做深入分析。如上所示，dump拥有不少参数。其本质是以指定格式，返回指定长度的exp的内部表示形式的varchar2值。fmt含4种格式：8||10||16||17，分别表示8进制，10进制，16进制和单字符，默认为10进制。start参数表示开始位置，length表示以,分隔的字串数。<br>例如：SELECT DUMP(‘abcdefg’,17,2,4) FROM DUAL; </p>
</li>
<li><p>EMPTY_BLOB,EMPTY_CLOB 这两个函数都是返回空lob类型，通常被用于insert和update等语句以初始化lob列，或者将其置为空。EMPTY表示LOB已经被初始化，只不过还没有用来存储数据。 </p>
</li>
<li><p>NLS_CHARSET_NAME(n) 返回指定数值对应的字符集名称。<br>例如：SELECT NLS_CHARSET_NAME(1) FROM DUAL; </p>
</li>
<li><p>NLS_CHARSET_ID(c) 返回指定字符对应的字符集id。<br>例如：SELECT NLS_CHARSET_ID(‘US7ASCII’) FROM DUAL; </p>
</li>
<li><p>NLS_CHARSET_DECL_LEN(n1,n2) 返回一个NCHAR值的声明宽度(以字符为单位).n1是该值以字节为单位的长度，n2是该值的字符集ID<br>例如：SELECT NLS_CHARSET_DECL_LEN(100, nls_charset_id(‘US7ASCII’)) FROM DUAL; </p>
</li>
<li><p>SYS_EXTRACT_UTC(timestamp) 返回标准通用时间即格林威治时间。<br>例如：SELECT SYS_EXTRACT_UTC(current_timestamp) FROM DUAL; </p>
</li>
<li><p>SYS_TYPEID(object_type) 返回对象类型对应的id。<br>例如：这个这个，没有建立过自定义对象，咋做示例？ </p>
</li>
<li><p>UID 返回一个唯一标识当前数据库用户的整数。<br>例如：SELECT UID FROM DUAL; </p>
</li>
<li><p>USER 返回当前session用户<br>例如：SELECT USER FROM DUAL; </p>
</li>
<li><p>USERENV(c) 该函数用来返回当前session的信息，据oracle文档的说明，userenv是为了保持向下兼容的遗留函数。oracle公司推荐你使用sys_context函数调用USERENV命名空间来获取相关信息，所以大家了解下就行了。<br>例如：SELECT USERENV(‘LANGUAGE’) FROM DUAL; </p>
</li>
<li><p>VSIZE(c) 返回c的字节数。<br>例如：SELECT VSIZE(‘abc中华’) FROM DUAL;</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;N表示数字型，C表示字符型，D表示日期型，[]表示内中参数可被忽略，fmt表示格式。&lt;/p&gt;
    
    </summary>
    
      <category term="handbook" scheme="http://www.yangkai0725.com/categories/handbook/"/>
    
    
      <category term="database" scheme="http://www.yangkai0725.com/tags/database/"/>
    
      <category term="oracle" scheme="http://www.yangkai0725.com/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>Linux之less命令</title>
    <link href="http://www.yangkai0725.com/20160822/20160822linux-less-command.html"/>
    <id>http://www.yangkai0725.com/20160822/20160822linux-less-command.html</id>
    <published>2016-08-22T15:16:03.000Z</published>
    <updated>2016-08-23T11:49:03.676Z</updated>
    
    <content type="html"><![CDATA[<p>Linux中的less命令主要用来浏览文件内容，与more命令的用法相似，不同于more命令的是，less命令可往回卷动浏览以看过的部分。</p>
<a id="more"></a>
<p>参考：<a href="http://www.xitongzhijia.net/xtjc/20141209/32242.html" target="_blank" rel="external">http://www.xitongzhijia.net/xtjc/20141209/32242.html</a><br>less 的用法比起 more 更加的有弹性。在 more 的时候，我们并没有办法向前面翻， 只能往后面看，但若使用了 less 时，就可以使用 ［pageup］ ［pagedown］ 等按键的功能来往前往后翻看文件，更容易用来查看一个文件的内容！除此之外，在 less 里头可以拥有更多的搜索功能，不止可以向下搜，也可以向上搜。</p>
<h1 id="1．命令格式"><a href="#1．命令格式" class="headerlink" title="1．命令格式"></a>1．命令格式</h1><p>　　less［参数］ 文件</p>
<h1 id="2．命令功能"><a href="#2．命令功能" class="headerlink" title="2．命令功能"></a>2．命令功能</h1><p>less与more类似,但使用less可以随意浏览文件，而more仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。</p>
<h1 id="3．命令参数"><a href="#3．命令参数" class="headerlink" title="3．命令参数"></a>3．命令参数</h1><pre><code>-b 《缓冲区大小》 设置缓冲区的大小
-e 当文件显示结束后，自动离开
-f 强迫打开特殊文件，例如外围设备代号、目录和二进制文件
-g 只标志最后搜索的关键词
-i 忽略搜索时的大小写
-m 显示类似more命令的百分比
-N 显示每行的行号
-o 《文件名》 将less 输出的内容在指定文件中保存起来
-Q 不使用警告音
-s 显示连续空行为一行
-S 行过长时间将超出部分舍弃
-x 《数字》 将“tab”键显示为规定的数字空格
/字符串：向下搜索“字符串”的功能
？字符串：向上搜索“字符串”的功能
n：重复前一个搜索（与 / 或 ？ 有关）
N：反向重复前一个搜索（与 / 或 ？ 有关）
b 向后翻一页
d 向后翻半页
h 显示帮助界面
Q 退出less 命令
u 向前滚动半页
y 向前滚动一行
空格键 滚动一行
回车键 滚动一页
[pagedown］： 向下翻动一页
［pageup］： 向上翻动一页
</code></pre><h1 id="4．使用实例"><a href="#4．使用实例" class="headerlink" title="4．使用实例"></a>4．使用实例</h1><blockquote>
<p> 实例1：查看文件</p>
</blockquote>
<pre><code>[yxgly@ZC_VM_10_100_138_183 ~]$ less 2016.log 
a2016


b2015


c3333333333333
2016.log (END) 
</code></pre><p>　　</p>
<blockquote>
<p> 实例2：ps查看进程信息并通过less分页显示</p>
</blockquote>
<pre><code>[yxgly@ZC_VM_10_100_138_183 ~]$ ps -ef |less
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 Jul30 ?        00:00:00 /sbin/init
root         2     0  0 Jul30 ?        00:00:00 [kthreadd]
root         3     2  0 Jul30 ?        00:00:00 [migration/0]
root         4     2  0 Jul30 ?        00:00:03 [ksoftirqd/0]
root         5     2  0 Jul30 ?        00:00:00 [migration/0]
root         6     2  0 Jul30 ?        00:00:03 [watchdog/0]
root         7     2  0 Jul30 ?        00:38:46 [events/0]
root         8     2  0 Jul30 ?        00:00:00 [cgroup]
root         9     2  0 Jul30 ?        00:00:00 [khelper]
root        10     2  0 Jul30 ?        00:00:00 [netns]
root        11     2  0 Jul30 ?        00:00:00 [async/mgr]
root        12     2  0 Jul30 ?        00:00:00 [pm]
root        13     2  0 Jul30 ?        00:00:08 [sync_supers]
root        14     2  0 Jul30 ?        00:00:08 [bdi-default]
root        15     2  0 Jul30 ?        00:00:00 [kintegrityd/0]
root        16     2  0 Jul30 ?        00:00:16 [kblockd/0]
root        17     2  0 Jul30 ?        00:00:00 [kacpid]
root        18     2  0 Jul30 ?        00:00:00 [kacpi_notify]
root        19     2  0 Jul30 ?        00:00:00 [kacpi_hotplug]
root        20     2  0 Jul30 ?        00:00:00 [ata_aux]
root        21     2  0 Jul30 ?        00:00:00 [ata_sff/0]
root        22     2  0 Jul30 ?        00:00:00 [ksuspend_usbd]
root        23     2  0 Jul30 ?        00:00:00 [khubd]
root        24     2  0 Jul30 ?        00:00:00 [kseriod]
root        25     2  0 Jul30 ?        00:00:00 [md/0]
</code></pre><blockquote>
<p>  实例3：查看命令历史使用记录并通过less分页显示</p>
</blockquote>
<pre><code>[yxgly@ZC_VM_10_100_138_183 ~]$ history | less
54  cd logs/
55  ll
56  rm catalina.out 
57  ll
58  cd ..
59  ll
60  cd work/Catalina/localhost/
61  ll
62  rm -rf *
63  cd ..
64  ll
65  cd bin/
66  ll
67  vi startup.sh 
68  ll
69  cd ..
70  cd conf/
71  ll
72  vi server.xml 
73  cd ..
74  cd yangkai/
</code></pre><blockquote>
<p>  实例4：浏览多个文件</p>
</blockquote>
<pre><code>[yxgly@ZC_VM_10_100_138_183 ~]$ less 2016.log 2015.log 
a2016


b2015


c3333333333333
</code></pre><p>2016.log (file 1 of 2) (END) - Next: 2015.log</p>
<p>:n</p>
<pre><code>2015
2015
~
~
~
~
~
2015.log (file 2 of 2) (END) 
</code></pre><blockquote>
<p>　　<em>说明：<br>　　输入 ：n后，切换到 log2014.log<br>　　输入 ：p 后，切换到log2013.log</em></p>
</blockquote>
<h1 id="5．附加备注"><a href="#5．附加备注" class="headerlink" title="5．附加备注"></a>5．附加备注</h1><blockquote>
<p>  全屏导航</p>
</blockquote>
<pre><code>ctrl + F - 向前移动一屏
ctrl + B - 向后移动一屏
ctrl + D - 向前移动半屏
ctrl + U - 向后移动半屏
</code></pre><blockquote>
<p>　单行导航</p>
</blockquote>
<pre><code>j - 向前移动一行
k - 向后移动一行
3.其它导航
G - 移动到最后一行
g - 移动到第一行
q / ZZ - 退出 less 命令
</code></pre><blockquote>
<p>  其它有用的命令</p>
</blockquote>
<pre><code>v - 使用配置的编辑器编辑当前文件
h - 显示 less 的帮助文档
&amp;pattern - 仅显示匹配模式的行，而不是整个文件
</code></pre><blockquote>
<p>  标记导航</p>
</blockquote>
<pre><code>当使用 less 查看大文件时，可以在任何一个位置作标记，可以通过命令导航到标有特定标记的文本位置：
ma - 使用 a 标记文本的当前位置
‘a - 导航到标记 a 处
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux中的less命令主要用来浏览文件内容，与more命令的用法相似，不同于more命令的是，less命令可往回卷动浏览以看过的部分。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://www.yangkai0725.com/categories/linux/"/>
    
    
      <category term="java" scheme="http://www.yangkai0725.com/tags/java/"/>
    
      <category term="linux" scheme="http://www.yangkai0725.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>数据库面试常问的一些基本概念</title>
    <link href="http://www.yangkai0725.com/20160822/20160822%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html"/>
    <id>http://www.yangkai0725.com/20160822/20160822数据库面试常问的一些基本概念.html</id>
    <published>2016-08-22T04:29:12.000Z</published>
    <updated>2016-08-23T01:29:15.733Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>超键、候选键、主键、外键</li>
<li>什么是事务？什么是锁？</li>
<li>数据库事务的四个特性及含义</li>
<li>什么是视图？</li>
<li>触发器的作用？</li>
<li>维护数据库的完整性和一致性，你喜欢用触发器还是自写业务逻辑？为什么？</li>
<li>索引的作用？和它的优点缺点是什么？</li>
<li>drop,delete与truncate的区别</li>
</ul>
<a id="more"></a>
<h1 id="1-超键、候选键、主键、外键"><a href="#1-超键、候选键、主键、外键" class="headerlink" title="1. 超键、候选键、主键、外键"></a>1. 超键、候选键、主键、外键</h1><p>超键：在关系中能唯一标识元组的属性集称为关系模式的超键。一个属性可以为作为一个超键，多个属性组合在一起也可以作为一个超键。超键包含候选键和主键。</p>
<p>候选键：是最小超键，即没有冗余元素的超键。</p>
<p>主键：数据库表中对储存数据对象予以唯一和完整标识的数据列或属性的组合。一个数据列只能有一个主键，且主键的取值不能缺失，即不能为空值（Null）。</p>
<p>外键：在一个表中存在的另一个表的主键称此表的外键。</p>
<h1 id="2-什么是事务？什么是锁？"><a href="#2-什么是事务？什么是锁？" class="headerlink" title="2.  什么是事务？什么是锁？"></a>2.  什么是事务？什么是锁？</h1><p>事务：就是被绑定在一起作为一个逻辑工作单元的 SQL 语句分组，如果任何一个语句操作失败那么整个操作就被失败，以后操作就会回滚到操作前状态，或者是上有个节点。为了确保要么执行，要么不执行，就可以使用事务。要将有组语句作为事务考虑，就需要通过 ACID 测试，即原子性，一致性，隔离性和持久性。</p>
<p>锁：在所以的 DBMS 中，锁是实现事务的关键，锁可以保证事务的完整性和并发性。与现实生活中锁一样，它可以使某些数据的拥有者，在某段时间内不能使用某些数据或数据结构。当然锁还分级别的。</p>
<h1 id="3-数据库事务的四个特性及含义"><a href="#3-数据库事务的四个特性及含义" class="headerlink" title="3. 数据库事务的四个特性及含义"></a>3. 数据库事务的四个特性及含义</h1><p>原子性：整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p>
<p>一致性：在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏。<br>隔离性：隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行 相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，必须串行化或序列化请 求，使得在同一时间仅有一个请求用于同一数据。</p>
<p>持久性：在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。</p>
<h1 id="4-什么是视图？"><a href="#4-什么是视图？" class="headerlink" title="4. 什么是视图？"></a>4. 什么是视图？</h1><p>视图是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增，改，查，操作，试图通常是有一个表或者多个表的行或列的子集。对视图的修改不影响基本表。它使得我们获取数据更容易，相比多表查询。</p>
<p>如下两种场景一般会使用到视图：</p>
<p>（1）不希望访问者获取整个表的信息，只暴露部分字段给访问者，所以就建一个虚表，就是视图。<br>（2）查询的数据来源于不同的表，而查询者希望以统一的方式查询，这样也可以建立一个视图，把多个表查询结果联合起来，查询者只需要直接从视图中获取数据，不必考虑数据来源于不同表所带来的差异。</p>
<p>注：这个视图是在数据库中创建的 而不是用代码创建的。</p>
<h1 id="5-触发器的作用？"><a href="#5-触发器的作用？" class="headerlink" title="5. 触发器的作用？"></a>5. 触发器的作用？</h1><p>触发器是一中特殊的存储过程，主要是通过事件来触发而被执行的。它可以强化约束，来维护数据的完整性和一致性，可以跟踪数据库内的操作从而不允许未经许可的更新和变化。可以联级运算。如，某表上的触发器上包含对另一个表的数据操作，而该操作又会导致该表触发器被触发。</p>
<h1 id="6-维护数据库的完整性和一致性，你喜欢用触发器还是自写业务逻辑？为什么？"><a href="#6-维护数据库的完整性和一致性，你喜欢用触发器还是自写业务逻辑？为什么？" class="headerlink" title="6. 维护数据库的完整性和一致性，你喜欢用触发器还是自写业务逻辑？为什么？"></a>6. 维护数据库的完整性和一致性，你喜欢用触发器还是自写业务逻辑？为什么？</h1><p>尽可能使用约束，如 check, 主键，外键，非空字段等来约束，这样做效率最高，也最方便。其次是使用触发器，这种方法可以保证，无论什么业务系统访问数据库都可以保证数据的完整新和一致性。最后考虑的是自写业务逻辑，但这样做麻烦，编程复杂，效率低下。</p>
<h1 id="7-索引的作用？和它的优点缺点是什么？"><a href="#7-索引的作用？和它的优点缺点是什么？" class="headerlink" title="7. 索引的作用？和它的优点缺点是什么？"></a>7. 索引的作用？和它的优点缺点是什么？</h1><p>数据库索引，是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据。索引的实现通常使用B树及其变种B+树。</p>
<p>在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引。</p>
<p>为表设置索引要付出代价的：一是增加了数据库的存储空间，二是在插入和修改数据时要花费较多的时间(因为索引也要随之变动)。</p>
<p>创建索引可以大大提高系统的性能（优点）：</p>
<p>第一、通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。<br>第二，可以大大加快数据的检索速度，这也是创建索引的最主要的原因。<br>第三，可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。<br>第四，在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。<br>第五，通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</p>
<p>也许会有人要问：增加索引有如此多的优点，为什么不对表中的每一个列创建一个索引呢？因为，增加索引也有许多不利的方面：</p>
<p>第一，创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。<br>第二，索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。</p>
<p>第三，当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。</p>
<p>索引是建立在数据库表中的某些列的上面。在创建索引的时候，应该考虑在哪些列上可以创建索引，在哪些列上不能创建索引。</p>
<p>一般来说，应该在这些列上创建索引：</p>
<p>（1）在经常需要搜索的列上，可以加快搜索的速度；<br>（2）在作为主键的列上，强制该列的唯一性和组织表中数据的排列结构；<br>（3）在经常用在连接的列上，这些列主要是一些外键，可以加快连接的速度；<br>（4）在经常需要根据范围进行搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的；<br>（5）在经常需要排序的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间；<br>（6）在经常使用在WHERE子句中的列上面创建索引，加快条件的判断速度。<br>同样，对于有些列不应该创建索引：</p>
<p>第一，对于那些在查询中很少使用或者参考的列不应该创建索引。这是因为，既然这些列很少使用到，因此有索引或者无索引，并不能提高查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。</p>
<p>第二，对于那些只有很少数据值的列也不应该增加索引。这是因为，由于这些列的取值很少，例如人事表的性别列，在查询的结果中，结果集的数据行占了表中数据行的很大比例，即需要在表中搜索的数据行的比例很大。增加索引，并不能明显加快检索速度。</p>
<p>第三，对于那些定义为text, image和bit数据类型的列不应该增加索引。这是因为，这些列的数据量要么相当大，要么取值很少。</p>
<p>第四，当修改性能远远大于检索性能时，不应该创建索引。这是因为，修改性能和检索性能是互相矛盾的。当增加索引时，会提高检索性能，但是会降低修改性能。当减少索引时，会提高修改性能，降低检索性能。因此，当修改性能远远大于检索性能时，不应该创建索引。</p>
<h1 id="8-drop-delete与truncate的区别"><a href="#8-drop-delete与truncate的区别" class="headerlink" title="8. drop,delete与truncate的区别"></a>8. drop,delete与truncate的区别</h1><p>drop直接删掉表 。 </p>
<p>truncate删除表中数据，再插入时自增长id又从1开始 。 </p>
<p>delete删除表中数据，可以加where字句。</p>
<p>（1） DELETE语句执行删除的过程是每次从表中删除一行，并且同时将该行的删除操作作为事务记录在日志中保存以便进行进行回滚操作。TRUNCATE TABLE 则一次性地从表中删除所有的数据并不把单独的删除操作记录记入日志保存，删除行是不能恢复的。并且在删除的过程中不会激活与表有关的删除触发器。执行速度快。</p>
<p>（2） 表和索引所占空间。当表被TRUNCATE 后，这个表和索引所占用的空间会恢复到初始大小，而DELETE操作不会减少表或索引所占用的空间。drop语句将表所占用的空间全释放掉。</p>
<p>（3） 一般而言，drop &gt; truncate &gt; delete</p>
<p>（4） 应用范围。TRUNCATE 只能对TABLE；DELETE可以是table和view</p>
<p>（5） TRUNCATE 和DELETE只删除数据，而DROP则删除整个表（结构和数据）。</p>
<p>（6） truncate与不带where的delete ：只删除数据，而不删除表的结构（定义）drop语句将删除表的结构被依赖的约束（constrain),触发器（trigger)索引（index);依赖于该表的存储过程/函数将被保留，但其状态会变为：invalid。</p>
<p>（7） delete语句为DML（data maintain Language),这个操作会被放到 rollback segment中,事务提交后才生效。如果有相应的 tigger,执行的时候将被触发。</p>
<p>（8） truncate、drop是DLL（data define language),操作立即生效，原数据不放到 rollback segment中，不能回滚。</p>
<p>（9） 在没有备份情况下，谨慎使用 drop 与 truncate。要删除部分数据行采用delete且注意结合where来约束影响范围。回滚段要足够大。要删除表用drop;若想保留表而将表中数据删除，如果于事务无关，用truncate即可实现。如果和事务有关，或老师想触发trigger,还是用delete。</p>
<p>（10） Truncate table 表名 速度快,而且效率高,因为: </p>
<p>truncate table 在功能上与不带 WHERE 子句的 DELETE 语句相同：二者均删除表中的全部行。但 TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少。DELETE 语句每次删除一行，并在事务日志中为所删除的每行记录一项。TRUNCATE TABLE 通过释放存储表数据所用的数据页来删除数据，并且只在事务日志中记录页的释放。</p>
<p>（11） TRUNCATE TABLE 删除表中的所有行，但表结构及其列、约束、索引等保持不变。新行标识所用的计数值重置为该列的种子。如果想保留标识计数值，请改用 DELETE。如果要删除表定义及其数据，请使用 DROP TABLE 语句。</p>
<p>（12） 对于由 FOREIGN KEY 约束引用的表，不能使用 TRUNCATE TABLE，而应使用不带 WHERE 子句的 DELETE 语句。由于 TRUNCATE TABLE 不记录在日志中，所以它不能激活触发器。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;超键、候选键、主键、外键&lt;/li&gt;
&lt;li&gt;什么是事务？什么是锁？&lt;/li&gt;
&lt;li&gt;数据库事务的四个特性及含义&lt;/li&gt;
&lt;li&gt;什么是视图？&lt;/li&gt;
&lt;li&gt;触发器的作用？&lt;/li&gt;
&lt;li&gt;维护数据库的完整性和一致性，你喜欢用触发器还是自写业务逻辑？为什么？&lt;/li&gt;
&lt;li&gt;索引的作用？和它的优点缺点是什么？&lt;/li&gt;
&lt;li&gt;drop,delete与truncate的区别&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="interview" scheme="http://www.yangkai0725.com/categories/interview/"/>
    
    
      <category term="database" scheme="http://www.yangkai0725.com/tags/database/"/>
    
      <category term="interview" scheme="http://www.yangkai0725.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>创建svn服务及svn提交忽略</title>
    <link href="http://www.yangkai0725.com/20160821/20160821%E5%88%9B%E5%BB%BAsvn%E6%9C%8D%E5%8A%A1.html"/>
    <id>http://www.yangkai0725.com/20160821/20160821创建svn服务.html</id>
    <published>2016-08-21T08:16:01.000Z</published>
    <updated>2016-08-22T01:35:38.567Z</updated>
    
    <content type="html"><![CDATA[<p>Windows平台上创建SVN服务，方便启动和关闭。<br><a id="more"></a></p>
<h1 id="创建svn服务"><a href="#创建svn服务" class="headerlink" title="创建svn服务"></a>创建svn服务</h1><pre><code>sc create svn binpath= &quot;D:\Program Files (x86)\Subversion\bin\svnserve.exe --service -r E:\joiest\svnRepo&quot; displayname= &quot;Subversion Server&quot; depend= tcpip start= auto
</code></pre><blockquote>
<p>  开启：net start svn<br>  关闭：net stop svn</p>
</blockquote>
<h1 id="Eclipse中svn提交时忽略文件"><a href="#Eclipse中svn提交时忽略文件" class="headerlink" title="Eclipse中svn提交时忽略文件"></a>Eclipse中svn提交时忽略文件</h1><p>Windows –&gt; preferences –&gt; Team –&gt; Ignore Resources –&gt; Add Pattern<br>之后分别添加下面四项，并点击OK</p>
<pre><code>.classpath
.project
target
.settings
.externalToolBuilders
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Windows平台上创建SVN服务，方便启动和关闭。&lt;br&gt;
    
    </summary>
    
      <category term="svn" scheme="http://www.yangkai0725.com/categories/svn/"/>
    
    
      <category term="svn" scheme="http://www.yangkai0725.com/tags/svn/"/>
    
      <category term="eclipse" scheme="http://www.yangkai0725.com/tags/eclipse/"/>
    
  </entry>
  
  <entry>
    <title>数据库日期字符串数字转换</title>
    <link href="http://www.yangkai0725.com/20160821/20160821%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%A5%E6%9C%9F%E8%BD%AC%E6%8D%A2.html"/>
    <id>http://www.yangkai0725.com/20160821/20160821数据库日期转换.html</id>
    <published>2016-08-21T07:20:24.000Z</published>
    <updated>2016-08-22T01:35:38.568Z</updated>
    
    <content type="html"><![CDATA[<p>日期字符串相互转换。</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>类别</th>
<th style="text-align:center">格式</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">期望值</th>
</tr>
</thead>
<tbody>
<tr>
<td>Year</td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">yy</td>
<td style="text-align:left">two digits 两位年</td>
<td style="text-align:left">显示值:07</td>
</tr>
<tr>
<td></td>
<td style="text-align:center">yyy</td>
<td style="text-align:left">three digits 三位年</td>
<td style="text-align:left">显示值:007</td>
</tr>
<tr>
<td></td>
<td style="text-align:center">yyyy</td>
<td style="text-align:left">four digits 四位年</td>
<td style="text-align:left">显示值:2007</td>
</tr>
<tr>
<td>Month</td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">mm</td>
<td style="text-align:left">number     两位月</td>
<td style="text-align:left">显示值:11</td>
</tr>
<tr>
<td></td>
<td style="text-align:center">mon</td>
<td style="text-align:left">abbreviated 字符集表示</td>
<td style="text-align:left">显示值:11月,若是英文版,显示nov</td>
</tr>
<tr>
<td></td>
<td style="text-align:center">month</td>
<td style="text-align:left">spelled out 字符集表示</td>
<td style="text-align:left">显示值:11月,若是英文版,显示november</td>
</tr>
<tr>
<td>Day</td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">dd</td>
<td style="text-align:left">number 当月第几天</td>
<td style="text-align:left">显示值:02</td>
</tr>
<tr>
<td></td>
<td style="text-align:center">ddd</td>
<td style="text-align:left">number 当年第几天</td>
<td style="text-align:left">显示值:02</td>
</tr>
<tr>
<td></td>
<td style="text-align:center">dy</td>
<td style="text-align:left">abbreviated 当周第几天简写</td>
<td style="text-align:left">显示值:星期五,若是英文版,显示fri</td>
</tr>
<tr>
<td></td>
<td style="text-align:center">day</td>
<td style="text-align:left">spelled out 当周第几天全写</td>
<td style="text-align:left">显示值:星期五,若是英文版,显示friday</td>
</tr>
<tr>
<td></td>
<td style="text-align:center">ddspth</td>
<td style="text-align:left">spelled out, ordinal twelfth</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>Hour</td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">hh</td>
<td style="text-align:left">two digits 12小时进制</td>
<td style="text-align:left">显示值:01</td>
</tr>
<tr>
<td></td>
<td style="text-align:center">hh24</td>
<td style="text-align:left">two digits 24小时进制</td>
<td style="text-align:left">显示值:13</td>
</tr>
<tr>
<td>Minute</td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">mi</td>
<td style="text-align:left">two digits 60进制</td>
<td style="text-align:left">显示值:45</td>
</tr>
<tr>
<td>Second</td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">ss</td>
<td style="text-align:left">two digits 60进制</td>
<td style="text-align:left">显示值:25</td>
</tr>
</tbody>
</table>
<h1 id="时间转化为字符串"><a href="#时间转化为字符串" class="headerlink" title="时间转化为字符串"></a>时间转化为字符串</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'yyyy-mm-dd hh24:mi:ss'</span>) <span class="keyword">as</span> nowTime <span class="keyword">from</span> dual;</div></pre></td></tr></table></figure>
<h1 id="字符串转化为时间"><a href="#字符串转化为时间" class="headerlink" title="字符串转化为时间"></a>字符串转化为时间</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">to_date</span>(<span class="string">'2004-05-07 13:23:44'</span>,<span class="string">'yyyy-mm-dd hh24:mi:ss'</span>) <span class="keyword">from</span> dual;</div></pre></td></tr></table></figure>
<h1 id="数字转化为英文"><a href="#数字转化为英文" class="headerlink" title="数字转化为英文"></a>数字转化为英文</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> to_char( <span class="keyword">to_date</span>(<span class="number">456</span>,<span class="string">'J'</span>),<span class="string">'Jsp'</span>) <span class="keyword">from</span> dual;</div></pre></td></tr></table></figure>
<h1 id="当前时间为周几"><a href="#当前时间为周几" class="headerlink" title="当前时间为周几"></a>当前时间为周几</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'day'</span>) <span class="keyword">from</span> dual;</div></pre></td></tr></table></figure>
<h1 id="两日期之间的天数"><a href="#两日期之间的天数" class="headerlink" title="两日期之间的天数"></a>两日期之间的天数</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">floor</span>(<span class="keyword">sysdate</span> - <span class="keyword">to_date</span>(<span class="string">'20020405'</span>,<span class="string">'yyyymmdd'</span>)) <span class="keyword">from</span> dual;</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'hh:mi:ss'</span>) <span class="keyword">TIME</span> <span class="keyword">from</span> all_objects <span class="keyword">where</span> <span class="keyword">rownum</span> &lt; <span class="number">2001</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日期字符串相互转换。&lt;/p&gt;
    
    </summary>
    
      <category term="database" scheme="http://www.yangkai0725.com/categories/database/"/>
    
    
      <category term="database" scheme="http://www.yangkai0725.com/tags/database/"/>
    
      <category term="java" scheme="http://www.yangkai0725.com/tags/java/"/>
    
      <category term="date" scheme="http://www.yangkai0725.com/tags/date/"/>
    
  </entry>
  
  <entry>
    <title>redis常用命令大全</title>
    <link href="http://www.yangkai0725.com/20160820/20160820redisOftenUseCommand.html"/>
    <id>http://www.yangkai0725.com/20160820/20160820redisOftenUseCommand.html</id>
    <published>2016-08-20T14:30:10.000Z</published>
    <updated>2016-08-22T01:35:38.566Z</updated>
    
    <content type="html"><![CDATA[<p>Key、服务器相关的一些常用redis命令。<br>速查：<a href="http://www.cnblogs.com/kissdodog/p/3599047.html" target="_blank" rel="external">http://www.cnblogs.com/kissdodog/p/3599047.html</a></p>
<a id="more"></a>
<h1 id="Key相关命令"><a href="#Key相关命令" class="headerlink" title="Key相关命令"></a>Key相关命令</h1><p>keys * 取出当前所有的key</p>
<p>exists name 查看n是否有name这个key</p>
<p>del name 删除key name</p>
<p>expire confirm 100 设置confirm这个key100秒过期</p>
<p>ttl confirm 获取confirm 这个key的有效时长</p>
<p>select 0 选择到0数据库 redis默认的数据库是0~15一共16个数据库</p>
<p>move confirm 1 将当前数据库中的key移动到其他的数据库中，这里就是把confire这个key从当前数据库中移动到1中</p>
<p>persist confirm 移除confirm这个key的过期时间</p>
<p>randomkey 随机返回数据库里面的一个key</p>
<p>rename key2 key3 重命名key2 为key3</p>
<p>type key2 返回key的数据类型</p>
<h1 id="服务器相关命令"><a href="#服务器相关命令" class="headerlink" title="服务器相关命令"></a>服务器相关命令</h1><p>ping PONG返回响应是否连接成功</p>
<p>echo 在命令行打印一些内容</p>
<p>select 0~15 编号的数据库</p>
<p>quit  /exit 退出客户端</p>
<p>dbsize 返回当前数据库中所有key的数量</p>
<p>info 返回redis的相关信息</p>
<p>config get dir/* 实时传储收到的请求</p>
<p>flushdb 删除当前选择数据库中的所有key</p>
<p>flushall 删除所有数据库中的数据库</p>
<pre><code>redis-cli KEYS &quot;pattern&quot; | xargs redis-cli DEL
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Key、服务器相关的一些常用redis命令。&lt;br&gt;速查：&lt;a href=&quot;http://www.cnblogs.com/kissdodog/p/3599047.html&quot;&gt;http://www.cnblogs.com/kissdodog/p/3599047.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="handbook" scheme="http://www.yangkai0725.com/categories/handbook/"/>
    
    
      <category term="redis" scheme="http://www.yangkai0725.com/tags/redis/"/>
    
      <category term="java" scheme="http://www.yangkai0725.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis常用方法模板</title>
    <link href="http://www.yangkai0725.com/20160818/20160818mybatis%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%A8%A1%E6%9D%BF.html"/>
    <id>http://www.yangkai0725.com/20160818/20160818mybatis常用方法模板.html</id>
    <published>2016-08-18T13:00:41.000Z</published>
    <updated>2016-09-18T07:47:36.937Z</updated>
    
    <content type="html"><![CDATA[<p><em>常用mybatis模板批量删除、list查询、注解查询@Select。</em></p>
<a id="more"></a>
<blockquote>
<p>   UUID主键</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"String"</span> <span class="attr">order</span>=<span class="string">"BEFORE"</span>&gt;</span></div><div class="line">   select sys_guid() from dual</div><div class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>   foreach    </p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public int delete(Object[] ids) throws Exception;</div><div class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span>&gt;</span></div><div class="line">	delete from t_table where id in</div><div class="line">	<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">item</span>=<span class="string">"ids"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></div><div class="line">		#&#123;ids&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></div><div class="line"></div><div class="line">public List<span class="tag">&lt;<span class="name">Blog</span>&gt;</span> dynamicForeachTest(List<span class="tag">&lt;<span class="name">Integer</span>&gt;</span> ids);</div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"dynamicForeachTest"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></div><div class="line">	select * from t_blog where id in</div><div class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></div><div class="line">    	#&#123;item&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>   根据属性值查找</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public List<span class="tag">&lt;<span class="name">T</span>&gt;</span> findByList(Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Object</span>&gt;</span> map);</div><div class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"sample_where_clause"</span>&gt;</span></div><div class="line">	where 1=1</div><div class="line">	<span class="tag">&lt;<span class="name">trim</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id !=null and id !=''"</span>&gt;</span></div><div class="line">			and id = #&#123;id&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username !=null and username !=''"</span>&gt;</span></div><div class="line">			and username = #&#123;username&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">trim</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByList"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span> <span class="attr">parameterType</span>=<span class="string">"Object"</span>&gt;</span></div><div class="line">	select * from user</div><div class="line">	<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"sample_where_clause"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>   @Select注解</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</div><div class="line"><span class="meta">@Select</span>(<span class="string">"select * from work_log where id = #&#123;id&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> WorkLog <span class="title">queryById</span><span class="params">(@Param(<span class="string">"id"</span>)</span>Integer id)</span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>   choose, when, otherwise</p>
</blockquote>
<p>提供了“title”就按“title”查找，提供了“author”就按“author”查找，若两者都没有提供，就返回所有符合条件的BLOG（实际情况可能是由管理员按一定策略选出BLOG列表，而不是返回大量无意义的随机结果）。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span></span></div><div class="line">     <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</div><div class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</div><div class="line">  <span class="tag">&lt;<span class="name">choose</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></div><div class="line">      AND title like #&#123;title&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></div><div class="line">      AND author_name like #&#123;author.name&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></div><div class="line">      AND featured = 1</div><div class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>   where使用</p>
</blockquote>
<p>避免SELECT * FROM BLOG WHERE AND title like ‘someTitle’出现<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span></span></div><div class="line">     <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</div><div class="line">  SELECT * FROM BLOG </div><div class="line">  <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">prefixOverrides</span>=<span class="string">"AND |OR"</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"state != null"</span>&gt;</span></div><div class="line">         state = #&#123;state&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></div><div class="line">        AND title like #&#123;title&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></div><div class="line">        AND author_name like #&#123;author.name&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>update trim</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateAuthorIfNecessary"</span>&gt;</span></div><div class="line">  update Author</div><div class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"set"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null"</span>&gt;</span>username=#&#123;username&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null"</span>&gt;</span>password=#&#123;password&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email != null"</span>&gt;</span>email=#&#123;email&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"bio != null"</span>&gt;</span>bio=#&#123;bio&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></div><div class="line">  where id=#&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>   bind</p>
</blockquote>
<p>bind 元素可以从 OGNL 表达式中创建一个变量并将其绑定到上下文。比如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlogsLike"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">"'%' + _parameter.getTitle() + '%'"</span> /&gt;</span></div><div class="line">  SELECT * FROM BLOG</div><div class="line">  WHERE title LIKE #&#123;pattern&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>   枚举</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"psettlementType != null"</span>&gt;</span></div><div class="line">	deal_settle_type = #&#123;psettlementType, jdbcType=INTEGER, typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler&#125;,</div><div class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"deal_settle_type"</span> <span class="attr">property</span>=<span class="string">"psettlementType"</span> <span class="attr">typeHandler</span>=<span class="string">"org.apache.ibatis.type.EnumOrdinalTypeHandler"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span>/&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>   mybatis.xml配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE configuration</span></div><div class="line">  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</div><div class="line">  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">settings</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"multipleResultSetsEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useColumnLabel"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useGeneratedKeys"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"autoMappingBehavior"</span> <span class="attr">value</span>=<span class="string">"PARTIAL"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultExecutorType"</span> <span class="attr">value</span>=<span class="string">"SIMPLE"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultStatementTimeout"</span> <span class="attr">value</span>=<span class="string">"25"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"safeRowBoundsEnabled"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"localCacheScope"</span> <span class="attr">value</span>=<span class="string">"SESSION"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"jdbcTypeForNull"</span> <span class="attr">value</span>=<span class="string">"OTHER"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadTriggerMethods"</span> <span class="attr">value</span>=<span class="string">"equals,clone,hashCode,toString"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"net.aazj.pojo"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;常用mybatis模板批量删除、list查询、注解查询@Select。&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="database" scheme="http://www.yangkai0725.com/categories/database/"/>
    
    
      <category term="database" scheme="http://www.yangkai0725.com/tags/database/"/>
    
      <category term="java" scheme="http://www.yangkai0725.com/tags/java/"/>
    
      <category term="mybatis" scheme="http://www.yangkai0725.com/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Freemarker常用语法简介</title>
    <link href="http://www.yangkai0725.com/20160818/20160818Freemarker%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E7%AE%80%E4%BB%8B.html"/>
    <id>http://www.yangkai0725.com/20160818/20160818Freemarker常用语法简介.html</id>
    <published>2016-08-18T12:32:48.000Z</published>
    <updated>2016-09-18T07:47:36.934Z</updated>
    
    <content type="html"><![CDATA[<p>布尔值、当前时间。直接在ftl里使用内置对象:Request,Session,Application,RequestParameters,Parameters。</p>
<a id="more"></a>
<blockquote>
<p>  list处理</p>
</blockquote>
<pre><code>&lt;#list testMap?keys as testKey&gt; 
       &lt; option value=&quot;${testKey}&quot; &gt; 
              ${testMap[testKey]} 
     &lt;/option&gt; 
&lt;/#list&gt;
</code></pre><p>1.sequence?first 返回sequence的第一个值。 </p>
<p>2.sequence?last  返回sequence的最后一个值。 </p>
<p>3.sequence?reverse 将sequence的现有顺序反转，即倒序排序 </p>
<p>4.sequence?size    返回sequence的大小 </p>
<p>5.sequence?sort    将sequence中的对象转化为字符串后顺序排序 </p>
<p>6.sequence?sort_by(value) 按sequence中对象的属性value进行排序 </p>
<p>item_index:当前变量的索引值<br>item_has_next:是否存在下一个对象<br>也可以使用&lt;#break&gt;指令跳出迭代</p>
<blockquote>
<p>  String字符串处理</p>
</blockquote>
<p>1.substring（start,end）从一个字符串中截取子串 </p>
<pre><code>${&quot;abcde&quot;?substring(0,2)}   ab
</code></pre><p>start:截取子串开始的索引，start必须大于等于0，小于等于end<br>end: 截取子串的长度，end必须大于等于0，小于等于字符串长度，如果省略该参数，默认为字符串长度</p>
<pre><code>${&quot;abcde&quot;?substring(2)} cde
</code></pre><p>2.cap_first 将字符串中的第一个单词的首字母变为大写。</p>
<pre><code>${&quot;abcde&quot;?cap_first}
</code></pre><p>3.uncap_first将字符串中的第一个单词的首字母变为小写。</p>
<pre><code>${&quot;ABCDE&quot;?uncap_first}
</code></pre><p>4.capitalize将字符串中的所有单词的首字母变为大写</p>
<pre><code>${&quot;ABCDE fd&quot;?capitalize}    Abcde Fd
</code></pre><p>5.date,time，datetime将字符串转换为日期 </p>
<pre><code>[#assign date1=&quot;2015-10-25&quot;?date(&quot;yyyy-MM-dd&quot;)]
[#assign date2=&quot;18:56:40&quot;?time(&quot;HH:mm:ss&quot;)]
[#assign date3=&quot;2009-10-12 9:28:20&quot;?datetime(&quot;yyyy-MM-dd HH:mm:ss&quot;)]
</code></pre><p>6.ends_with 判断某个字符串是否由某个子串结尾，返回布尔值。</p>
<pre><code>${&quot;string&quot;?ends_with(&quot;ing&quot;)?string} 返回结果为true 
</code></pre><p>7.html 用于将字符串中的&lt;、&gt;、&amp;和“替换为对应得&lt;&gt;&amp;quot:&amp;amp<br>8.index_of（substring,start）在字符串中查找某个子串，返回找到子串的第一个字符的索引，如果没有找到子串，则返回-1。<br>Start参数用于指定从字符串的那个索引处开始搜索，start为数字值。<br>如果start大于字符串长度，则start取值等于字符串长度，如果start小于0， 则start取值为0。</p>
<pre><code>${&quot;string&quot;?index_of(&quot;ing&quot;)}
</code></pre><p>9.length返回字符串的长度<br>10.lower_case将字符串转为小写<br>11.upper_case将字符串转为大写<br>12.contains 判断字符中是否包含某个子串。返回布尔值</p>
<pre><code>${&quot;string&quot;?contains(&quot;ing&quot;)?string}
</code></pre><p>13.number将字符串转换为数字 </p>
<pre><code>${&quot;111.21&quot;?number}
</code></pre><p>14.replace用于将字符串中的一部分从左到右替换为另外的字符串</p>
<pre><code>${&quot;striabg&quot;?replace(&quot;ab&quot;,&quot;n&quot;)}
</code></pre><p>15.split使用指定的分隔符将一个字符串拆分为一组字符串</p>
<pre><code>[#list &quot;This|is|split&quot;?split(&quot;|&quot;) as s] ${s},[/#list]
</code></pre><p>16.trim 删除字符串首尾空格 ${“  String “?trim}</p>
<blockquote>
<p>  数字处理</p>
</blockquote>
<p>Freemarker中预订义了三种数字格式：number,currency（货币）和percent(百分比)其中number为默认的数字格式转换</p>
<pre><code>[#assign tempNum=20]  
${tempNum}      
${tempNum?string.number}或${tempNum?string(&quot;number&quot;)}  结果为20  
${tempNum?string.currency}或${tempNum?string(&quot;currency&quot;)}  结果为￥20.00  
${tempNum?string. percent}或${tempNum?string(&quot;percent&quot;)}  结果为2,000% 

${num?string(&apos;0.00&apos;)}
</code></pre><p>如果小数点后不足两位，用 0 代替</p>
<pre><code>${num?string(&apos;#.##&apos;)}
</code></pre><p>如果小数点后多余两位，就只保留两位，否则输出实际值<br>输出为：1239765.46</p>
<pre><code>${num?string(&apos;,###.00&apos;)}
</code></pre><p>输出为：1,239,765.46<br>整数部分每三位用 , 分割，并且保证小数点后保留两位，不足用 0 代替</p>
<pre><code>${num?string(&apos;,###.##&apos;)}
</code></pre><p>输出为：1,239,765.46<br>整数部分每三位用 , 分割，并且小数点后多余两位就只保留两位，不足两位就取实际位数，可以不不包含小数点</p>
<pre><code>${num?string(&apos;000.00&apos;)}
</code></pre><p>输出为：012.70<br>整数部分如果不足三位（000），前面用0补齐，否则取实际的整数位</p>
<pre><code>${num?string(&apos;###.00&apos;)}
</code></pre><p>等价于</p>
<pre><code>${num?string(&apos;#.00&apos;)}
</code></pre><p>输出为：12.70<br>整数取实际的位数</p>
<p>数字格式化插值可采用#{expr;format}形式来格式化数字,其中format可以是:<br>mX:小数部分最小X位<br>MX:小数部分最大X位<br>如下面的例子:</p>
<pre><code>&lt;#assign x=2.582/&gt;
&lt;#assign y=4/&gt;
#{x; M2} &lt;#-- 输出2.58 --&gt;
#{y; M2} &lt;#-- 输出4 --&gt;
#{x; m1} &lt;#-- 输出2.6 --&gt;
#{y; m1} &lt;#-- 输出4.0 --&gt;
#{x; m1M2} &lt;#-- 输出2.58 --&gt;
#{x; m1M2} &lt;#-- 输出4.0 --&gt;
</code></pre><blockquote>
<p>  Boolean值处理</p>
</blockquote>
<pre><code>${foo?string(&quot;yes&quot;, &quot;no&quot;)}
</code></pre><blockquote>
<p>  ${.now?date}</p>
</blockquote>
<p>使用.now为当前时间<br>FreeMarker会将 java.sql.Date java.sql.Time java.sql.Timestamp 类型的变量自动识别为 date time datetime。所以当变量是以上三种类型时，FreeMarker会自动匹配设置的格式，不需要在变量的后面加上?date ?time ?datetime 。<br>FreeMarker无法自动识别 java.util.Date 类型应该显示哪种格式，这时需要明确的指定其要显示的格式，否则FreeMarker将会抛出异常。</p>
<blockquote>
<p>  map</p>
</blockquote>
<p>hash?keys 返回hash里的所有key,返回结果为sequence<br>hash?values 返回hash里的所有value,返回结果为sequence</p>
<pre><code>[#assign user={&quot;name&quot;:&quot;hailang&quot;, &quot;sex&quot;:&quot;man&quot;}]
[#assign userkeys = user?keys]
[#list userkeys as k]
    ${k}=${user[k]},
[/#list]
</code></pre><h1 id="Request-amp-Session-amp-Application"><a href="#Request-amp-Session-amp-Application" class="headerlink" title="Request &amp; Session &amp; Application"></a>Request &amp; Session &amp; Application</h1><blockquote>
<p>   用于获取Request对象中的attribute对象。<br>  例如：${Request[“method”]}是直接在页面输出属性值。<br>  相当于request.getAttribute(“method”);<br>   如果要进行判断    [#if Request[“method”] = “edit”]do something[/#if]</p>
</blockquote>
<p><em><strong>Session对应HttpSession,Application对应ServletContext,用法参考Request。</strong></em></p>
<h1 id="RequestParameters"><a href="#RequestParameters" class="headerlink" title="RequestParameters"></a>RequestParameters</h1><p>用于获取Request对象的parameter,例如${RequestParameters[“method”]}相当于request.getParameter(“method”);</p>
<h1 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h1><p>属性获取，依次从RequestParameters、Request、Session、Application对象中获取对应属性参数，一旦获取则不再往下寻找。例如：Parameters[“method”]</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;布尔值、当前时间。直接在ftl里使用内置对象:Request,Session,Application,RequestParameters,Parameters。&lt;/p&gt;
    
    </summary>
    
      <category term="handbook" scheme="http://www.yangkai0725.com/categories/handbook/"/>
    
    
      <category term="freemarker" scheme="http://www.yangkai0725.com/tags/freemarker/"/>
    
      <category term="java" scheme="http://www.yangkai0725.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 请求返回代码含义</title>
    <link href="http://www.yangkai0725.com/20160818/20160818httpStatusCode.html"/>
    <id>http://www.yangkai0725.com/20160818/20160818httpStatusCode.html</id>
    <published>2016-08-18T12:17:30.000Z</published>
    <updated>2016-08-22T01:35:38.770Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong>HTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。它由 RFC 2616 规范定义的，并得到RFC 2518、RFC 2817、RFC 2295、RFC 2774、RFC 4918等规范扩展。</strong></em></p>
<a id="more"></a>
<p>100  Continue  初始的请求已经接受，客户应当继续发送请求的其余部分。（HTTP 1.1新）<br>101  Switching Protocols  服务器将遵从客户的请求转换到另外一种协议（HTTP 1.1新）<br>200  OK  一切正常，对GET和POST请求的应答文档跟在后面。<br>201  Created  服务器已经创建了文档，Location头给出了它的URL。<br>202  Accepted  已经接受请求，但处理尚未完成。<br>203  Non-Authoritative Information  文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝（HTTP 1.1新）。<br>204  No Content  没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。<br>205  Reset Content  没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容（HTTP 1.1新）。<br>206  Partial Content  客户发送了一个带有Range头的GET请求，服务器完成了它（HTTP 1.1新）。<br>300  Multiple Choices  客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明。<br>301  Moved Permanently  客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL。<br>302  Found  类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。注意，在HTTP1.0中对应的状态信息是“Moved Temporatily”。<br>出现该状态代码时，浏览器能够自动访问新的URL，因此它是一个很有用的状态代码。<br>注意这个状态代码有时候可以和301替换使用。例如，如果浏览器错误地请求<code>http://host/~user</code>（缺少了后面的斜杠），有的服务器返回301，有的则返回302。<br>严格地说，我们只能假定只有当原来的请求是GET时浏览器才会自动重定向。请参见307。<br>303  See Other  类似于301/302，不同之处在于，如果原来的请求是POST，Location头指定的重定向目标文档应该通过GET提取（HTTP 1.1新）。<br>304  Not Modified  客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。<br>305  Use Proxy  客户请求的文档应该通过Location头所指明的代理服务器提取（HTTP 1.1新）。<br>307  Temporary Redirect  和302（Found）相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是POST，即使它实际上只能在POST请求的应答是303时才能重定向。由于这个原因，HTTP 1.1新增了307，以便更加清除地区分几个状态代码：当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307应答，则浏览器只能跟随对GET请求的重定向。（HTTP 1.1新）<br>400  Bad Request  请求出现语法错误。<br>401  Unauthorized  客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字/密码对话框，然后在填写合适的Authorization头后再次发出请求。<br>403  Forbidden  资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致。<br>404  Not Found  无法找到指定位置的资源。这也是一个常用的应答。<br>405  Method Not Allowed  请求方法（GET、POST、HEAD、DELETE、PUT、TRACE等）对指定的资源不适用。（HTTP 1.1新）<br>406  Not Acceptable  指定的资源已经找到，但它的MIME类型和客户在Accpet头中所指定的不兼容（HTTP 1.1新）。<br>407  Proxy Authentication Required  类似于401，表示客户必须先经过代理服务器的授权。（HTTP 1.1新）<br>408  Request Timeout  在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求。（HTTP 1.1新）<br>409  Conflict  通常和PUT请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功。（HTTP 1.1新）<br>410  Gone  所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和404的不同在于，返回407表示文档永久地离开了指定的位置，而404表示由于未知的原因文档不可用。（HTTP 1.1新）<br>411  Length Required  服务器不能处理请求，除非客户发送一个Content-Length头。（HTTP 1.1新）<br>412  Precondition Failed  请求头中指定的一些前提条件失败（HTTP 1.1新）。<br>413  Request Entity Too Large  目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个Retry-After头（HTTP 1.1新）。<br>414  Request URI Too Long  URI太长（HTTP 1.1新）。<br>416  Requested Range Not Satisfiable  服务器不能满足客户在请求中指定的Range头。（HTTP 1.1新）<br>500  Internal Server Error  服务器遇到了意料不到的情况，不能完成客户的请求。<br>501  Not Implemented  服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的PUT请求。<br>502  Bad Gateway  服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答。<br>503  Service Unavailable  服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回503。服务器返回503时可以提供一个Retry-After头。<br>504  Gateway Timeout  由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答。（HTTP 1.1新）<br>505  HTTP Version Not Supported  服务器不支持请求中所指明的HTTP版本。（HTTP 1.1新） </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;&lt;strong&gt;HTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。它由 RFC 2616 规范定义的，并得到RFC 2518、RFC 2817、RFC 2295、RFC 2774、RFC 4918等规范扩展。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="handbook" scheme="http://www.yangkai0725.com/categories/handbook/"/>
    
    
      <category term="java" scheme="http://www.yangkai0725.com/tags/java/"/>
    
      <category term="http" scheme="http://www.yangkai0725.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>揭秘Redis持久化</title>
    <link href="http://www.yangkai0725.com/20160816/20160816%E6%8F%AD%E7%A7%98Redis%E6%8C%81%E4%B9%85%E5%8C%96.html"/>
    <id>http://www.yangkai0725.com/20160816/20160816揭秘Redis持久化.html</id>
    <published>2016-08-16T04:54:34.000Z</published>
    <updated>2016-08-22T01:35:38.783Z</updated>
    
    <content type="html"><![CDATA[<p>什么是持久化，简单来讲就是将数据放到断电后数据不会丢失的设备中。也就是我们通常理解的硬盘上。<br><a id="more"></a></p>
<h1 id="写操作的流程"><a href="#写操作的流程" class="headerlink" title="写操作的流程"></a>写操作的流程</h1><hr>
<p>首先我们来看一下数据库在进行写操作时到底做了哪些事，主要有下面五个过程。</p>
<ol>
<li>客户端向服务端发送写操作（数据在客户端的内存中）</li>
<li>数据库服务端接收到写请求的数据（数据在服务端的内存中）</li>
<li>服务端调用write(2) 这个系统调用，将数据往磁盘上写（数据在系统内存的缓冲区中）</li>
<li>操作系统将缓冲区中的数据转移到磁盘控制器上（数据在磁盘缓存中）</li>
<li>磁盘控制器将数据写到磁盘的物理介质中（数据真正落到磁盘上）</li>
</ol>
<p>写操作大致有上面5个流程，下面我们结合上面的5个流程看一下各种级别的故障。</p>
<ul>
<li>当数据库系统故障时，这时候系统内核还是OK的，那么此时只要我们执行完了第3步，那么数据就是安全的，因为后续操作系统会来完成后面几步，保证数据最终会落到磁盘上。</li>
<li><p>当系统断电，这时候上面5项中提到的所有缓存都会失效，并且数据库和操作系统都会停止工作。所以只有当数据在完成第5步后，机器断电才能保证数据不丢失，在上述四步中的数据都会丢失。<br>通过上面5步的了解，可能我们会希望搞清下面一些问题：</p>
</li>
<li><p>数据库多长时间调用一次write(2)，将数据写到内核缓冲区</p>
</li>
<li>内核多长时间会将系统缓冲区中的数据写到磁盘控制器</li>
<li>磁盘控制器又在什么时候把缓存中的数据写到物理介质上<br>对于第一个问题，通常数据库层面会进行全面控制。而对第二个问题，操作系统有其默认的策略，但是我们也可以通过POSIX API提供的fsync系列命令强制操作系统将数据从内核区写到磁盘控制器上。对于第三个问题，好像数据库已经无法触及，但实际上，大多数情况下磁盘缓存是被设置关闭的。或者是只开启为读缓存，也就是写操作不会进行缓存，直接写到磁盘。建议的做法是仅仅当你的磁盘设备有备用电池时才开启写缓存。</li>
</ul>
<p>所谓数据损坏，就是数据无法恢复，上面我们讲的都是如何保证数据是确实写到磁盘上去，但是写到磁盘上可能并不意味着数据不会损坏。比如我们可能一次写请求会进行两次不同的写操作，当意外发生时，可能会导致一次写操作安全完成，但是另一次还没有进行。如果数据库的数据文件结构组织不合理，可能就会导致数据完全不能恢复的状况出现。</p>
<p>这里通常也有三种策略来组织数据，以防止数据文件损坏到无法恢复的情况：</p>
<ol>
<li>第一种是最粗糙的处理，就是不通过数据的组织形式保证数据的可恢复性。而是通过配置数据同步备份的方式，在数据文件损坏后通过数据备份来进行恢复。实际上MongoDB在不开启journaling日志，通过配置Replica Sets时就是这种情况。</li>
<li>另一种是在上面基础上添加一个操作日志，每次操作时记一下操作的行为，这样我们可以通过操作日志来进行数据恢复。因为操作日志是顺序追加的方式写的，所以不会出现操作日志也无法恢复的情况。这也类似于MongoDB开启了journaling日志的情况。</li>
<li>更保险的做法是数据库不进行老数据的修改，只是以追加方式去完成写操作，这样数据本身就是一份日志，这样就永远不会出现数据无法恢复的情况了。实际上CouchDB就是此做法的优秀范例。</li>
</ol>
<h1 id="RDB快照"><a href="#RDB快照" class="headerlink" title="RDB快照"></a>RDB快照</h1><hr>
<p>下面我们说一下Redis的第一个持久化策略，RDB快照。Redis支持将当前数据的快照存成一个数据文件的持久化机制。而一个持续写入的数据库如何生成快照呢。Redis借助了fork命令的copy on write机制。在生成快照时，将当前进程fork出一个子进程，然后在子进程中循环所有的数据，将数据写成为RDB文件。</p>
<p>我们可以通过Redis的save指令来配置RDB快照生成的时机，比如你可以配置当10分钟以内有100次写入就生成快照，也可以配置当1小时内有1000次写入就生成快照，也可以多个规则一起实施。这些规则的定义就在Redis的配置文件中，你也可以通过Redis的CONFIG SET命令在Redis运行时设置规则，不需要重启Redis。</p>
<p>Redis的RDB文件不会坏掉，因为其写操作是在一个新进程中进行的，当生成一个新的RDB文件时，Redis生成的子进程会先将数据写到一个临时文件中，然后通过原子性rename系统调用将临时文件重命名为RDB文件，这样在任何时候出现故障，Redis的RDB文件都总是可用的。</p>
<p>同时，Redis的RDB文件也是Redis主从同步内部实现中的一环。</p>
<p>但是，我们可以很明显的看到，RDB有他的不足，就是一旦数据库出现问题，那么我们的RDB文件中保存的数据并不是全新的，从上次RDB文件生成到Redis停机这段时间的数据全部丢掉了。在某些业务下，这是可以忍受的，我们也推荐这些业务使用RDB的方式进行持久化，因为开启RDB的代价并不高。但是对于另外一些对数据安全性要求极高的应用，无法容忍数据丢失的应用，RDB就无能为力了，所以Redis引入了另一个重要的持久化机制：AOF 日志。</p>
<h1 id="AOF日志"><a href="#AOF日志" class="headerlink" title="AOF日志"></a>AOF日志</h1><p>aof日志的全称是append only file，从名字上我们就能看出来，它是一个追加写入的日志文件。与一般数据库的binlog不同的是，AOF文件是可识别的纯文本，它的内容就是一个个的Redis标准命令。<br>比如我们进行如下实验，使用Redis2.6版本，在启动命令参数中设置开启aof功能：</p>
<pre><code>./redis-server --appendonly yes
</code></pre><p>然后我们执行如下的命令：</p>
<pre><code>redis 127.0.0.1:6379&gt; set key1 Hello
OK
redis 127.0.0.1:6379&gt; append key1 &quot; World!&quot;
(integer) 12
redis 127.0.0.1:6379&gt; del key1
(integer) 1
redis 127.0.0.1:6379&gt; del non_existing_key
(integer) 0
</code></pre><p>这时我们查看AOF日志文件，就会得到如下内容：</p>
<pre><code>$ cat appendonly.aof
*2
$6
SELECT
$1
0
*3
$3
set
$4
key1
$5
Hello
*3
$6
append
$4
key1
$7
World!
*2
$3
del
$4
key1
</code></pre><p>可以看到，写操作都生成了一条相应的命令作为日志。其中值得注意的是最后一个del命令，它并没有被记录在AOF日志中，这是因为Redis判断出这个命令不会对当前数据集做出修改。所以不需要记录这个无用的写命令。另外AOF日志也不是完全按客户端的请求来生成日志的，比如命令INCRBYFLOAT在记AOF日志时就被记成一条SET记录，因为浮点数操作可能在不同的系统上会不同，所以为了避免同一份日志在不同的系统上生成不同的数据集，所以这里只将操作后的结果通过SET来记录。</p>
<h1 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h1><hr>
<p>你可以会想，每一条写命令都生成一条日志，那么AOF文件是不是会很大？答案是肯定的，AOF文件会越来越大，所以Redis又提供了一个功能，叫做AOF rewrite。其功能就是重新生成一份AOF文件，新的AOF文件中一条记录的操作只会有一次，而不像一份老文件那样，可能记录了对同一个值的多次操作。其生成过程和RDB类似，也是fork一个进程，直接遍历数据，写入新的AOF临时文件。在写入新文件的过程中，所有的写操作日志还是会写到原来老的AOF文件中，同时还会记录在内存缓冲区中。当重完操作完成后，会将所有缓冲区中的日志一次性写入到临时文件中。然后调用原子性的rename命令用新的AOF文件取代老的AOF文件。</p>
<p>从上面的流程我们能够看到，RDB和AOF操作都是顺序IO操作，性能都很高。而同时在通过RDB文件或者AOF日志进行数据库恢复的时候，也是顺序的读取数据加载到内存中。所以也不会造成磁盘的随机读。</p>
<h1 id="AOF可靠性设置"><a href="#AOF可靠性设置" class="headerlink" title="AOF可靠性设置"></a>AOF可靠性设置</h1><hr>
<p>AOF是一个写文件操作，其目的是将操作日志写到磁盘上，所以它也同样会遇到我们上面说的写操作的5个流程。那么写AOF的操作安全性又有多高呢。实际上这是可以设置的，在Redis中对AOF调用write(2)写入后，何时再调用fsync将其写到磁盘上，通过appendfsync 选项来控制，下面appendfsync的三个设置项，安全强度逐渐变强。</p>
<h1 id="appendfsync-no"><a href="#appendfsync-no" class="headerlink" title="appendfsync no"></a>appendfsync no</h1><hr>
<p>当设置appendfsync为no的时候，Redis不会主动调用fsync去将AOF日志内容同步到磁盘，所以这一切就完全依赖于操作系统的调试了。对大多数Linux操作系统，是每30秒进行一次fsync，将缓冲区中的数据写到磁盘上。</p>
<h1 id="appendfsync-everysec"><a href="#appendfsync-everysec" class="headerlink" title="appendfsync everysec"></a>appendfsync everysec</h1><hr>
<p>当设置appendfsync为everysec的时候，Redis会默认每隔一秒进行一次fsync调用，将缓冲区中的数据写到磁盘。但是当这一次的fsync调用时长超过1秒时。Redis会采取延迟fsync的策略，再等一秒钟。也就是在两秒后再进行fsync，这一次的fsync就不管会执行多长时间都会进行。这时候由于在fsync时文件描述符会被阻塞，所以当前的写操作就会阻塞。 所以，结论就是，在绝大多数情况下，Redis会每隔一秒进行一次fsync。在最坏的情况下，两秒钟会进行一次fsync操作。</p>
<p>这一操作在大多数数据库系统中被称为group commit，就是组合多次写操作的数据，一次性将日志写到磁盘。</p>
<h1 id="appednfsync-always"><a href="#appednfsync-always" class="headerlink" title="appednfsync always"></a>appednfsync always</h1><hr>
<p>当设置appendfsync为always时，每一次写操作都会调用一次fsync，这时数据是最安全的，当然，由于每次都会执行fsync，所以其性能也会受到影响。</p>
<h1 id="对于pipelining有什么不同"><a href="#对于pipelining有什么不同" class="headerlink" title="对于pipelining有什么不同"></a>对于pipelining有什么不同</h1><hr>
<p>对于pipelining的操作，其具体过程是客户端一次性发送N个命令，然后等待这N个命令的返回结果被一起返回。通过采用pipilining就意味着放弃了对每一个命令的返回值确认。由于在这种情况下，N个命令是在同一个执行过程中执行的。所以当设置appendfsync为everysec时，可能会有一些偏差，因为这N个命令可能执行时间超过1秒甚至2秒。但是可以保证的是，最长时间不会超过这N个命令的执行时间和。</p>
<h1 id="与postgreSQL和MySQL的比较"><a href="#与postgreSQL和MySQL的比较" class="headerlink" title="与postgreSQL和MySQL的比较"></a>与postgreSQL和MySQL的比较</h1><hr>
<p>这一块就不多说了，由于上面操作系统层面的数据安全已经讲了很多，所以其实不同的数据库在实现上都大同小异。 总之最后的结论就是，在Redis开启AOF的情况下，其单机数据安全性并不比这些成熟的SQL数据库弱。</p>
<p>这些持久化的数据有什么用，当然是用于重启后的数据恢复。 Redis是一个内存数据库，无论是RDB还是AOF，都只是其保证数据恢复的措施。 所以Redis在利用RDB和AOF进行恢复的时候，都会读取RDB或AOF文件，重新加载到内存中。 相对于MySQL等数据库的启动时间来说，会长很多，因为MySQL本来是不需要将数据加载到内存中的。</p>
<p>但是相对来说，MySQL启动后提供服务时，其被访问的热数据也会慢慢加载到内存中，通常我们称之为预热，而在预热完成前，其性能都不会太高。而Redis的好处是一次性将数据加载到内存中，一次性预热。这样只要Redis启动完成，那么其提供服务的速度都是非常快的。</p>
<p>而在利用RDB和利用AOF启动上，其启动时间有一些差别。RDB的启动时间会更短，原因有两个，一是RDB文件中每一条数据只有一条记录，不会像AOF日志那样可能有一条数据的多次操作记录。所以每条数据只需要写一次就行了。另一个原因是RDB文件的存储格式和Redis数据在内存中的编码格式是一致的，不需要再进行数据编码工作。在CPU消耗上要远小于AOF日志的加载。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是持久化，简单来讲就是将数据放到断电后数据不会丢失的设备中。也就是我们通常理解的硬盘上。&lt;br&gt;
    
    </summary>
    
      <category term="handbook" scheme="http://www.yangkai0725.com/categories/handbook/"/>
    
    
      <category term="redis" scheme="http://www.yangkai0725.com/tags/redis/"/>
    
      <category term="database" scheme="http://www.yangkai0725.com/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github搭建</title>
    <link href="http://www.yangkai0725.com/20160810/20160810%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E6%A8%A1%E6%9D%BF.html"/>
    <id>http://www.yangkai0725.com/20160810/20160810搭建Hexo博客模板.html</id>
    <published>2016-08-10T09:37:58.000Z</published>
    <updated>2016-08-22T01:35:38.788Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建参考地址"><a href="#搭建参考地址" class="headerlink" title="搭建参考地址"></a>搭建参考地址</h1><p><a href="http://jianbing.github.io/2016/03/03/set-up-blog/" target="_blank" rel="external">http://jianbing.github.io/2016/03/03/set-up-blog/</a><br><a id="more"></a></p>
<h1 id="Hexo-Landscape主题的字体和JS库优化"><a href="#Hexo-Landscape主题的字体和JS库优化" class="headerlink" title="Hexo Landscape主题的字体和JS库优化"></a>Hexo Landscape主题的字体和JS库优化</h1><p><a href="http://www.jianshu.com/p/ffcdc4fec6ec" target="_blank" rel="external">http://www.jianshu.com/p/ffcdc4fec6ec</a></p>
<h1 id="修改blog-config-yml"><a href="#修改blog-config-yml" class="headerlink" title="修改blog/_config.yml"></a>修改blog/_config.yml</h1><pre><code>deploy:
    type: git
    repository: git@github.com:eagleless/eagleless.github.io.git          
    branch: master
</code></pre><h1 id="生成SSH密钥过程"><a href="#生成SSH密钥过程" class="headerlink" title="生成SSH密钥过程"></a>生成SSH密钥过程</h1><ol>
<li>查看是否已经有了ssh密钥：cd ~/.ssh<br>如果没有密钥则不会有此文件夹，有则备份删除</li>
<li>生存密钥：<br>$ ssh-keygen -t rsa -C “fox520527088@163.com”<br>按3个回车，密码为空。</li>
</ol>
<p>Your identification has been saved in /home/tekkub/.ssh/id_rsa.<br>Your public key has been saved in /home/tekkub/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>………………</p>
<p>最后得到了两个文件：id_rsa和id_rsa.pub</p>
<ol>
<li>添加密钥到ssh：ssh-add 文件名<br>需要之前输入密码。</li>
<li>在github上添加ssh密钥，这要添加的是“id_rsa.pub”里面的公钥。<br>打开<a href="https://github.com/" target="_blank" rel="external">https://github.com/</a> ，登录添加SSHKey。</li>
</ol>
<h1 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h1><pre><code>hexo n &quot;HelloWorld&quot;
hexo g
hexo d
hexo g -d
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;搭建参考地址&quot;&gt;&lt;a href=&quot;#搭建参考地址&quot; class=&quot;headerlink&quot; title=&quot;搭建参考地址&quot;&gt;&lt;/a&gt;搭建参考地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://jianbing.github.io/2016/03/03/set-up-blog/&quot;&gt;http://jianbing.github.io/2016/03/03/set-up-blog/&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="note" scheme="http://www.yangkai0725.com/categories/note/"/>
    
    
      <category term="hexo" scheme="http://www.yangkai0725.com/tags/hexo/"/>
    
      <category term="git" scheme="http://www.yangkai0725.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown语法</title>
    <link href="http://www.yangkai0725.com/20160810/20160810markdown%E8%AF%AD%E6%B3%95%E7%A4%BA%E4%BE%8B.html"/>
    <id>http://www.yangkai0725.com/20160810/20160810markdown语法示例.html</id>
    <published>2016-08-10T08:16:01.000Z</published>
    <updated>2016-08-22T01:35:38.794Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown语法说明中文版"><a href="#Markdown语法说明中文版" class="headerlink" title="Markdown语法说明中文版"></a>Markdown语法说明中文版</h1><p><a href="http://www.appinn.com/markdown/" target="_blank" rel="external">http://www.appinn.com/markdown/</a></p>
<a id="more"></a>
<h1 id="Java代码格式"><a href="#Java代码格式" class="headerlink" title="Java代码格式"></a>Java代码格式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"HelloWorld"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Javascript代码格式"><a href="#Javascript代码格式" class="headerlink" title="Javascript代码格式"></a>Javascript代码格式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsFunction</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert(<span class="string">"javascript function"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Markdown表示h1-h6使用语法"><a href="#Markdown表示h1-h6使用语法" class="headerlink" title="Markdown表示h1-h6使用语法"></a>Markdown表示h1-h6使用语法</h1><p>类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶</p>
<pre><code># 这是 H1
## 这是 H2
###### 这是 H6
</code></pre><h1 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h1><p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。</p>
<p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p>
<p>要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可。</p>
<h1 id="百度一下-你就知道"><a href="#百度一下-你就知道" class="headerlink" title="百度一下,你就知道"></a><a href="www.baidu.com">百度一下,你就知道</a></h1><pre><code>[百度一下,你就知道](www.baidu.com&quot;百度标题&quot;)
</code></pre><h1 id="Markdow图片"><a href="#Markdow图片" class="headerlink" title="Markdow图片"></a><a href="http://image.baidu.com/search/detail?ct=503316480&amp;z=0&amp;ipn=d&amp;word=%E5%9B%BE%E7%89%87&amp;hs=0&amp;pn=7&amp;spn=0&amp;di=147138333760&amp;pi=&amp;rn=1&amp;tn=baiduimagedetail&amp;ie=utf-8&amp;oe=utf-8&amp;cl=2&amp;lm=-1&amp;cs=1257261666%2C1562029974&amp;os=2547077022%2C2864557078&amp;simid=4212753602%2C624021646&amp;adpicid=0&amp;ln=30&amp;fr=ala&amp;fm=&amp;sme=&amp;cg=&amp;bdtype=0&amp;oriquery=&amp;objurl=http%3A%2F%2Fpic3.nipic.com%2F20090709%2F2893198_075124038_2.jpg&amp;fromurl=ippr_z2C%24qAzdH3FAzdH3Fooo_z%26e3Bgtrtv_z%26e3Bv54AzdH3Ffi5oAzdH3FnAzdH3F0nAzdH3F8klvkdw8vvvbw8bu_z%26e3Bip4s&amp;gsm=0" target="_blank" rel="external">Markdow图片</a></h1><pre><code>[Markdow图片](http://image.baidu.com/search/detail?ct=503316480&amp;z=0&amp;ipn=d&amp;word=%E5%9B%BE%E7%89%87&amp;hs=0&amp;pn=7&amp;spn=0&amp;di=147138333760&amp;pi=&amp;rn=1&amp;tn=baiduimagedetail&amp;ie=utf-8&amp;oe=utf-8&amp;cl=2&amp;lm=-1&amp;cs=1257261666%2C1562029974&amp;os=2547077022%2C2864557078&amp;simid=4212753602%2C624021646&amp;adpicid=0&amp;ln=30&amp;fr=ala&amp;fm=&amp;sme=&amp;cg=&amp;bdtype=0&amp;oriquery=&amp;objurl=http%3A%2F%2Fpic3.nipic.com%2F20090709%2F2893198_075124038_2.jpg&amp;fromurl=ippr_z2C%24qAzdH3FAzdH3Fooo_z%26e3Bgtrtv_z%26e3Bv54AzdH3Ffi5oAzdH3FnAzdH3F0nAzdH3F8klvkdw8vvvbw8bu_z%26e3Bip4s&amp;gsm=0)
</code></pre><h1 id="Markdown-Blod加粗显示"><a href="#Markdown-Blod加粗显示" class="headerlink" title="Markdown Blod加粗显示"></a><strong>Markdown Blod加粗显示</strong></h1><pre><code>**Markdown Blod加粗显示**
</code></pre><h1 id="Markdown-Italic斜体"><a href="#Markdown-Italic斜体" class="headerlink" title="Markdown Italic斜体"></a><em>Markdown Italic斜体</em></h1><pre><code>_Markdown Italic斜体_
</code></pre><h1 id="有序列表和无序列表"><a href="#有序列表和无序列表" class="headerlink" title="有序列表和无序列表"></a>有序列表和无序列表</h1><p>Markdown 支持有序列表和无序列表。无序列表使用星号、加号或是减号作为列表标记;有序列表则使用数字接着一个英文句点。</p>
<pre><code>*    Red
*   Green
*   Blue

1.  Bird
2.  McHale
3.  Parish
</code></pre><h1 id="Blockquote段落"><a href="#Blockquote段落" class="headerlink" title="Blockquote段落"></a>Blockquote段落</h1><p>Markdown Blockquote段落结构Web界面可以使用Flask框架来搭建，GUI界面可以使用TK，PyQT，wxPython等GUI库来编写，从学习成本来说，命令行界面是最容易上手，这一篇我们来聊一聊命令行界面的实现。</p>
<blockquote>
<p>This is the first level of quoting.</p>
<blockquote>
<p>This is nested blockquote.</p>
</blockquote>
<p>Back to the first level.</p>
</blockquote>
<h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。</p>
<pre><code>* * *

***

*****

- - -

---------------------------------------
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Markdown语法说明中文版&quot;&gt;&lt;a href=&quot;#Markdown语法说明中文版&quot; class=&quot;headerlink&quot; title=&quot;Markdown语法说明中文版&quot;&gt;&lt;/a&gt;Markdown语法说明中文版&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.appinn.com/markdown/&quot;&gt;http://www.appinn.com/markdown/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="handbook" scheme="http://www.yangkai0725.com/categories/handbook/"/>
    
    
      <category term="markdown" scheme="http://www.yangkai0725.com/tags/markdown/"/>
    
  </entry>
  
</feed>
