<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kai.Yang&#39; Blog</title>
  <subtitle>生命不止、奋斗不息</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yangkai0725.com/"/>
  <updated>2016-10-13T02:09:10.791Z</updated>
  <id>http://www.yangkai0725.com/</id>
  
  <author>
    <name>kaiyang</name>
    <email>fox520527088@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringMvc静态资源处理</title>
    <link href="http://www.yangkai0725.com/20161013/20161013SpringMvc%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86.html"/>
    <id>http://www.yangkai0725.com/20161013/20161013SpringMvc静态资源处理.html</id>
    <published>2016-10-13T02:01:52.000Z</published>
    <updated>2016-10-13T02:09:10.791Z</updated>
    
    <content type="html"><![CDATA[<p>处理静态资源，我想这可能是框架搭建完成之后Web开发的”头等大事“了。<br><a id="more"></a><br>还记得Spring MVC中的DispatcherServlet吗？它是Spring MVC中的前置控制器，若配置的拦截路径为“/”，那么所有的请求都将被它拦截。对静态资源的访问也属于一个请求，那么也会被它拦截，然后进入它的匹配流 程，我们知道它是根据HandlerMapping的配置来匹配的。而对于静态资源来说，默认的Spring MVC是没有注册匹配规则的，此时若你去请求一个静态资源，则会报404错误。</p>
<blockquote>
<p>  如何处理静态资源的请求呢？</p>
</blockquote>
<p>我们可以配置一个处理静态资源的HandlerMapping<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"resourceHttpRequestHandler"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.resource.ResourceHttpRequestHandler"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span> <span class="attr">value</span>=<span class="string">"classpath:/META-INF/resources/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>     </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/resources/**"</span>&gt;</span>resourceHttpRequestHandler<span class="tag">&lt;/<span class="name">prop</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>另外，还可以使用mvc命名空间的resources标签来配置</p>
<pre><code>&lt;mvc:resources mapping=&quot;/resources/**&quot; location=&quot;/resources/&quot; /&gt;
</code></pre><blockquote>
<p>  直接用容器的DefaultServlet</p>
</blockquote>
<p>比如我们将资源文件都放在resouces目录下，那么只需要在web.xml中配置：</p>
<pre><code> &lt;servlet-mapping&gt;  
    &lt;servlet-name&gt;default&lt;/servlet-name&gt;  
    &lt;url-pattern&gt;/resource/*&lt;/url-pattern&gt;  
&lt;/servlet-mapping&gt;  
</code></pre><p>并将它放在所有Servlet的最前面（为了让它最先匹配），这样的话性能上应该比较好</p>
<p>所以，综上所述，性能最好的应该是直接利用容器的DefaultServlet，让它最先拦截静态资源请求，这样就避免了后续的转发等操作，提高了 性能，但是无法访问classpath下的资源文件。而通过mvc:resources标签可以简单配置匹配规则和资源文件路径，应该说是最简单快捷的一 种方式，当然这大概也是mvc命名空间设计的初衷。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;处理静态资源，我想这可能是框架搭建完成之后Web开发的”头等大事“了。&lt;br&gt;
    
    </summary>
    
    
      <category term="spring" scheme="http://www.yangkai0725.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>对象的生命周期</title>
    <link href="http://www.yangkai0725.com/20161005/20161005%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html"/>
    <id>http://www.yangkai0725.com/20161005/20161005对象的生命周期.html</id>
    <published>2016-10-05T08:13:29.000Z</published>
    <updated>2016-10-12T10:02:08.186Z</updated>
    
    <content type="html"><![CDATA[<p>对象的生命周期分为七个阶段。<br><a id="more"></a></p>
<blockquote>
<p>  对象的生命周期</p>
</blockquote>
<p>大致分为七个阶段<br>1、创建阶段Creation<br>2、应用阶段Using<br>3、不可视阶段Invisible<br>4、不可到达阶段Unreachable<br>5、可收集阶段Collected<br>6、终结阶段Finalized<br>7、释放阶段Free</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对象的生命周期分为七个阶段。&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://www.yangkai0725.com/tags/java/"/>
    
      <category term="gc" scheme="http://www.yangkai0725.com/tags/gc/"/>
    
  </entry>
  
  <entry>
    <title>Java中堆内存和栈内存详解</title>
    <link href="http://www.yangkai0725.com/20161005/20161005Java%E4%B8%AD%E5%A0%86%E5%86%85%E5%AD%98%E5%92%8C%E6%A0%88%E5%86%85%E5%AD%98%E8%AF%A6%E8%A7%A3.html"/>
    <id>http://www.yangkai0725.com/20161005/20161005Java中堆内存和栈内存详解.html</id>
    <published>2016-10-05T08:10:18.000Z</published>
    <updated>2016-10-12T10:02:08.185Z</updated>
    
    <content type="html"><![CDATA[<p>Java把内存分成两种，一种叫做栈内存，一种叫做堆内存。<br><a id="more"></a></p>
<p>在函数中定义的<em>一些基本类型的变量和对象的引用变量都是在函数的栈内存中分配</em>。当在一段代码块中定义一个变量时，java就在栈中为这个变量分配内存空间，当超过变量的作用域后，java会自动释放掉为该变量分配的内存空间，该内存空间可以立刻被另作他用。</p>
<p><em>堆内存用于存放由new创建的对象和数组</em>。在堆中分配的内存，由java虚拟机自动垃圾回收器来管理。在堆中产生了一个数组或者对象后，还可以在栈中定义一个特殊的变量，这个变量的取值等于数组或者对象在堆内存中的首地址，在栈中的这个特殊的变量就变成了数组或者对象的引用变量，以后就可以在程序中使用栈内存中的引用变量来访问堆中的数组或者对象，引用变量相当于为数组或者对象起的一个别名，或者代号。</p>
<p>引用变量是普通变量，定义时在栈中分配内存，引用变量在程序运行到作用域外释放。而数组＆对象本身在堆中分配，即使程序运行到使用new产生数组和对象的语句所在地代码块之外，数组和对象本身占用的堆内存也不会被释放，<em>数组和对象在没有引用变量指向它的时候，才变成垃圾，不能再被使用，但是仍然占着内存，在随后的一个不确定的时间被垃圾回收器释放掉</em>。<em>这个也是java比较占内存的主要原因</em>，实际上，栈中的变量指向堆内存中的变量，这就是 Java 中的指针!</p>
<p><strong>java中内存分配策略及堆和栈的比较</strong></p>
<blockquote>
<p>  内存分配策略 </p>
</blockquote>
<p>按照编译原理的观点,程序运行时的内存分配有三种策略,分别是<code>静态的,栈式的,和堆式的</code>。<br>　　<code>静态存储分配</code>是指在编译时就能确定每个数据目标在运行时刻的存储空间需求,因而在编译时就可以给他们分配固定的内存空间.这种分配策略要求程序代码中不允许有可变数据结构(比如可变数组)的存在,也不允许有嵌套或者递归的结构出现,因为它们都会导致编译程序无法计算准确的存储空间需求.<br>　　<code>栈式存储分配</code>也可称为动态存储分配,是由一个类似于堆栈的运行栈来实现的.和静态存储分配相反,在栈式存储方案中,程序对数据区的需求在编译时是完全未知的,只有到运行的时候才能够知道,但是规定在运行中进入一个程序模块时,必须知道该程序模块所需的数据区大小才能够为其分配内存.和我们在数据结构所熟知的栈一样,栈式存储分配按照先进后出的原则进行分配。<br>　　<code>静态存储分配</code>要求在编译时能知道所有变量的存储要求,栈式存储分配要求在过程的入口处必须知道所有的存储要求,而堆式存储分配则专门负责在编译时或运行时模块入口处都无法确定存储要求的数据结构的内存分配,比如可变长度串和对象实例.堆由大片的可利用块或空闲块组成,堆中的内存可以按照任意顺序分配和释放. </p>
<blockquote>
<p>  堆和栈的比较</p>
</blockquote>
<p>从堆和栈的功能和作用来通俗的比较,<em>堆主要用来存放对象的，栈主要是用来执行程序的</em>.而这种不同又主要是由于堆和栈的特点决定的。</p>
<blockquote>
<p>  JVM中的堆和栈</p>
</blockquote>
<p>JVM是基于堆栈的虚拟机。JVM为每个新创建的线程都分配一个堆栈。也就是说,对于一个Java程序来说，它的运行就是通过对堆栈的操作来完成的。堆栈以帧为单位保存线程的状态。JVM对堆栈只进行两种操作:以帧为单位的压栈和出栈操作。 </p>
<p>　　我们知道,某个线程正在执行的方法称为此线程的当前方法。我们可能不知道,当前方法使用的帧称为<code>当前帧</code>。当线程激活一个Java方法,JVM就会在线程的Java堆栈里新压入一个帧。这个帧自然成为了当前帧。在此方法执行期间,这个帧将用来保存参数,局部变量,中间计算过程和其他数据。这个帧在这里和编译原理中的活动纪录的概念是差不多的。</p>
<p>　　从Java的这种分配机制来看,堆栈又可以这样理解:堆栈(Stack)是操作系统在建立某个进程时或者线程(在支持多线程的操作系统中是线程)为这个线程建立的存储区域，该区域具有<code>先进后出</code>的特性。 </p>
<p>　　每一个Java应用都唯一对应一个JVM实例，每一个实例唯一对应一个堆。应用程序在运行中所创建的所有类实例或数组都放在这个堆中,并由应用所有的线程共享。跟C/C++不同，Java中分配堆内存是自动初始化的。Java中所有对象的存储空间都是在堆中分配的，但是这个对象的引用却是在堆栈中分配,也就是说在建立一个对象时<code>从两个地方都分配内存</code>，在堆中分配的内存实际建立这个对象，而在堆栈中分配的内存只是一个指向这个堆对象的指针(引用)而已。</p>
<blockquote>
<p>  Java 中的堆和栈</p>
</blockquote>
<p>Java把内存划分成两种：一种是栈内存，一种是堆内存。 </p>
<p>　　在函数中定义的一些<code>基本类型的变量和对象的引用变量</code>都在函数的栈内存中分配。 </p>
<p>　　当在一段代码块定义一个变量时，Java就在栈中为这个变量分配内存空间，当超过变量的作用域后，Java会自动释放掉为该变量所分配的内存空间，该内存空间可以立即被另作他用。 </p>
<p>　　堆内存用来存放由new创建的<code>对象和数组</code>。 </p>
<p>　　在堆中分配的内存，由Java虚拟机的自动垃圾回收器来管理。 </p>
<p>　　在堆中产生了一个数组或对象后，还可以在栈中定义一个特殊的变量，让栈中这个变量的取值等于数组或对象在堆内存中的<code>首地址</code>，栈中的这个变量就成了数组或对象的引用变量。 </p>
<p>　　引用变量就相当于是为数组或对象起的一个名称，以后就可以在程序中使用栈中的引用变量来访问堆中的数组或对象。 </p>
<p>　　具体的说： </p>
<p>　　栈与堆都是Java用来在Ram中存放数据的地方。与C++不同，Java自动管理栈和堆，程序员不能直接地设置栈或堆。 </p>
<p>　　Java的堆是一个<code>运行时数据区</code>,类的(对象从中分配空间。这些对象通过new、newarray、anewarray和multianewarray等指令建立，它们不需要程序代码来显式的释放。堆是由垃圾回收来负责的，堆的优势是可以动态地分配内存大小，生存期也不必事先告诉编译器，因为它是在运行时动态分配内存的，Java的垃圾收集器会自动收走这些不再使用的数据。但缺点是，由于要在运行时动态分配内存，存取速度较慢。 </p>
<p>　　栈的优势是，存取速度比堆要快，仅次于寄存器，栈数据可以共享。但缺点是，存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。栈中主要存放一些基本类型的变量(,int, short, long, byte, float, double, boolean, char)和对象句柄。 </p>
<p>　　栈有一个很重要的特殊性，就是存在栈中的数据可以共享。假设我们同时定义： </p>
<p>　　int a = 3; </p>
<p>　　int b = 3; </p>
<p>　　编译器先处理int a = 3;首先它会在栈中创建一个变量为a的引用，然后查找栈中是否有3这个值，如果没找到，就将3存放进来，然后将a指向3。接着处理int b = 3;在创建完b的引用变量后，因为在栈中已经有3这个值，便将b直接指向3。这样，就出现了a与b同时均指向3的情况。这时，如果再令a=4;那么编译器会重新搜索栈中是否有4值，如果没有，则将4存放进来，并令a指向4;如果已经有了，则直接将a指向这个地址。因此a值的改变不会影响到b的值。要注意这种数据的共享与两个对象的引用同时指向一个对象的这种共享是不同的，因为这种情况a的修改并不会影响到b, 它是由编译器完成的，它有利于节省空间。<em>而一个对象引用变量修改了这个对象的内部状态，会影响到另一个对象引用变量</em>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java把内存分成两种，一种叫做栈内存，一种叫做堆内存。&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://www.yangkai0725.com/tags/java/"/>
    
      <category term="gc" scheme="http://www.yangkai0725.com/tags/gc/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse常用设置及问题处理</title>
    <link href="http://www.yangkai0725.com/20161004/20161004Eclipse%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE%E5%8F%8A%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86.html"/>
    <id>http://www.yangkai0725.com/20161004/20161004Eclipse常用设置及问题处理.html</id>
    <published>2016-10-04T07:42:14.000Z</published>
    <updated>2016-10-12T10:02:08.183Z</updated>
    
    <content type="html"><![CDATA[<p>eclipse_ini介绍;本地tld设置;设置new菜单;最佳保护色;eclipse闪退;RemoteSystemsTempFiles项目;main方法需运行两次;邮件发送失败;<br><a id="more"></a></p>
<blockquote>
<p>  eclipse_ini</p>
</blockquote>
<p>首先了解下JVM中几个相关的概念：</p>
<p>Xms：最小堆大小<br>Xmx：最大堆大小<br>Xmn：年轻代堆大小<br>Xss：每个线程的堆大小<br>PermSize：初始持久代大小<br>MaxPermSize：最大持久代大小</p>
<p>一般Xms、Xmx设置相同，PermSize、MaxPermSize设置相同，这样可以避免伸缩堆大小带来的性能损耗。</p>
<blockquote>
<p>  本地tld设置</p>
</blockquote>
<ol>
<li>先找到 XML 的 dtd 文件</li>
<li>后 window—&gt;preference—&gt;XML—&gt;XML catalog—&gt;User Specified Entries—&gt;add-&gt; 其中 key Type 选择 URI ， Key 选择 XML 文件中 docType 中引用的那个 key 地址， Location 选择 dtd 文件在本地硬盘上的完整路径。<br>注意：完成以上操作后，关闭 XML 文件，重新打开就可以了。</li>
</ol>
<blockquote>
<p>  设置new菜单</p>
</blockquote>
<p>Windows–&gt;Customize Perspective<br>在打开的窗口里Shortcuts选中需要显示的选项</p>
<blockquote>
<p>  最佳保护色</p>
</blockquote>
<p>色调：84<br>饱和度：91<br>亮度：205</p>
<blockquote>
<p>  eclipse闪退</p>
</blockquote>
<p>删除文件 [workspace]<code>/.metadata/.plugins/org.eclipse.e4.workbench/workbench.xmi</code></p>
<blockquote>
<p>  RemoteSystemsTempFiles项目</p>
</blockquote>
<p>删除Eclipse工作空间中自动生成的RemoteSystemsTempFiles项目<br>step1、在Eclipse中依次打开Windows–&gt;Preferences–&gt;General–&gt;Startup and Shutdown将RSE UI前的对号去掉，关闭Eclipse；<br>step2、将Eclipse工作空间中的“RemoteSystemsTempFiles”项目删除掉，再启动Eclipse程序，这个项目就不会再自动生成了；</p>
<blockquote>
<p>  main方法需运行两次</p>
</blockquote>
<p>右键项目properties-&gt;builders<br>去掉JavaScript Validator前面的勾</p>
<blockquote>
<p>  邮件发送失败</p>
</blockquote>
<p>删除<code>E:\myEclipse8.5\Common\plugins\com.genuitec.eclipse.j2eedt.core_8.5.0.me201003231033\data\libraryset\EE_5</code><br>删除<code>mail.jar</code>和<code>activation.jar</code>(我的<code>javaee.jar</code>里，这两个东西是文件夹，总之删掉就OK，不过要注意备份一下)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;eclipse_ini介绍;本地tld设置;设置new菜单;最佳保护色;eclipse闪退;RemoteSystemsTempFiles项目;main方法需运行两次;邮件发送失败;&lt;br&gt;
    
    </summary>
    
    
      <category term="eclipse" scheme="http://www.yangkai0725.com/tags/eclipse/"/>
    
  </entry>
  
  <entry>
    <title>MyBase破解</title>
    <link href="http://www.yangkai0725.com/20161004/20161004MyBase%E7%A0%B4%E8%A7%A3.html"/>
    <id>http://www.yangkai0725.com/20161004/20161004MyBase破解.html</id>
    <published>2016-10-04T04:44:44.000Z</published>
    <updated>2016-10-12T10:02:08.184Z</updated>
    
    <content type="html"><![CDATA[<p>myBase Desktop 6.0 破解方法 (延长试用时间)<br><a id="more"></a></p>
<ol>
<li>打开软件根目录下的nyfedit.ini文件，找到App.UserLic.FirstUseOn=1475555574<br>这个参数记载着第一次打开此软件的时间，很明显，这个参数遵循Unix时间戳。<br>只需要修改这个Unix时间戳为你现在的时间，试用期就会变回30天。</li>
<li>最简单获得Unix时间戳的方法，访问如下链接就有：<br><a href="http://tool.chinaz.com/Tools/unixtime.aspx" target="_blank" rel="external">http://tool.chinaz.com/Tools/unixtime.aspx</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;myBase Desktop 6.0 破解方法 (延长试用时间)&lt;br&gt;
    
    </summary>
    
    
      <category term="tool" scheme="http://www.yangkai0725.com/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>Https通讯过程</title>
    <link href="http://www.yangkai0725.com/20161003/20161003Https%E9%80%9A%E8%AE%AF%E8%BF%87%E7%A8%8B.html"/>
    <id>http://www.yangkai0725.com/20161003/20161003Https通讯过程.html</id>
    <published>2016-10-03T05:11:51.000Z</published>
    <updated>2016-10-12T10:02:08.183Z</updated>
    
    <content type="html"><![CDATA[<p>HTTPS在传输数据之前需要客户端（浏览器）与服务端（网站）之间进行一次握手，在握手过程中将确立双方加密传输数据的密码信息。</p>
<a id="more"></a>
<p>TLS/SSL协议不仅仅是一套加密传输的协议，更是一件经过艺术家精心设计的艺术品，TLS/SSL中使用了非对称加密，对称加密以及HASH算法。握手过程的简单描述如下：</p>
<p>1.浏览器将自己支持的一套加密规则发送给网站。</p>
<p>2.网站从中选出一组加密算法与HASH算法，并将自己的身份信息以证书的形式发回给浏览器。证书里面包含了网站地址，加密公钥，以及证书的颁发机构等信息。</p>
<p>3.获得网站证书之后浏览器要做以下工作：</p>
<p>a) 验证证书的合法性（颁发证书的机构是否合法，证书中包含的网站地址是否与正在访问的地址一致等），如果证书受信任，则浏览器栏里面会显示一个小锁头，否则会给出证书不受信的提示。</p>
<p>b) 如果证书受信任，或者是用户接受了不受信的证书，浏览器会生成一串随机数的密码，并用证书中提供的公钥加密。</p>
<p>c) 使用约定好的HASH计算握手消息，并使用生成的随机数对消息进行加密，最后将之前生成的所有信息发送给网站。</p>
<p>4.网站接收浏览器发来的数据之后要做以下的操作：</p>
<p>a) 使用自己的私钥将信息解密取出密码，使用密码解密浏览器发来的握手消息，并验证HASH是否与浏览器发来的一致。</p>
<p>b) 使用密码加密一段握手消息，发送给浏览器。</p>
<p>5.浏览器解密并计算握手消息的HASH，如果与服务端发来的HASH一致，此时握手过程结束，之后所有的通信数据将由之前浏览器生成的随机密码并利用对称加密算法进行加密。</p>
<p>这里浏览器与网站互相发送加密的握手消息并验证，目的是为了保证双方都获得了一致的密码，并且可以正常的加密解密数据，为后续真正数据的传输做一次测试。另外，HTTPS一般使用的加密与HASH算法如下：</p>
<p>非对称加密算法：RSA，DSA/DSS</p>
<p>对称加密算法：AES，RC4，3DES</p>
<p>HASH算法：MD5，SHA1，SHA256</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTTPS在传输数据之前需要客户端（浏览器）与服务端（网站）之间进行一次握手，在握手过程中将确立双方加密传输数据的密码信息。&lt;/p&gt;
    
    </summary>
    
    
      <category term="https" scheme="http://www.yangkai0725.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>CSS属性大全</title>
    <link href="http://www.yangkai0725.com/20160928/20160928CSS%E5%B1%9E%E6%80%A7%E5%A4%A7%E5%85%A8.html"/>
    <id>http://www.yangkai0725.com/20160928/20160928CSS属性大全.html</id>
    <published>2016-09-28T05:10:02.000Z</published>
    <updated>2016-10-12T10:02:08.182Z</updated>
    
    <content type="html"><![CDATA[<p>常用CSS属性大全<br><a id="more"></a><br>字体属性：(font)<br>大小 font-size: x-large;(特大) xx-small;(极小) 一般中文用不到，只要用数值就可以，单位：PX、PD<br>样式 font-style: oblique;(偏斜体) italic;(斜体) normal;(正常)<br>行高 line-height: normal;(正常) 单位：PX、PD、EM<br>粗细 font-weight: bold;(粗体) lighter;(细体) normal;(正常)<br>变体 font-variant: small-caps;(小型大写字母) normal;(正常)<br>大小写 text-transform: capitalize;(首字母大写) uppercase;(大写) lowercase;(小写) none;(无)<br>修饰 text-decoration: underline;(下划线) overline;(上划线) line-through;(删除线) blink;(闪烁)<br>常用字体： (font-family)<br>“Courier New”, Courier, monospace, “Times New Roman”, Times, serif, Arial, Helvetica, sans-serif, Verdana<br>背景属性： (background)<br>色彩background-color: #FFFFFF;<br>图片background-image: url();<br>重复background-repeat: no-repeat;<br>滚动background-attachment: fixed;(固定) scroll;(滚动)<br>位置background-position: left(水平) top(垂直);<br>简写方法 background:#000 url(..) repeat fixed left top;<br>区块属性： (Block)<br>字间距letter-spacing: normal; 数值<br>对刘text-align: justify;(两端对齐) left;(左对齐) right;(右对齐) center;(居中)<br>缩进text-indent: 数值px;<br>垂直对齐vertical-align: baseline;(基线) sub;(下标) super;(下标) top; text-top; middle; bottom; text-bottom;<br>词间距word-spacing: normal; 数值<br>空格white-space: pre;(保留) nowrap;(不换行)<br>显示display:block;(块) inline;(内嵌) list-item;(列表项) run-in;(追加部分) compact;(紧凑) marker;(标记) table; inline-table; table-raw-group; table-header-group; table-footer-group; table-raw; table-column-group; table-column; table-cell; table-caption;(表格标题)<br>方框属性： (Box)<br>width:; height:; float:; clear:both; margin:; padding:;     顺序：上右下左<br>边框属性： (Border)<br>border-style: dotted;(点线) dashed;(虚线) solid; double;(双线) groove;(槽线) ridge;(脊状) inset;(凹陷) outset;<br>border-width:; 边框宽度<br>border-color:#;<br>简写方法border：width style color;<br>列表属性： (List-style)<br>类型list-style-type:    disc;(圆点) circle;(圆圈) square;(方块) decimal;(数字) lower-roman;(小罗码数字) upper-roman; lower-alpha; upper-alpha;<br>位置list-style-position: outside;(外) inside;<br>图像list-style-image: url(..);<br>定位属性： (Position)<br>Position: absolute; relative; static;<br>visibility: inherit; visible; hidden;<br>overflow:<br>visible (默认)：超出部分始终显示。<br>hidden：超出部分不显示。<br>scroll：始终显示水平和垂直滚动条。<br>auto：根据需要显示相应的滚动条<br>clip: rect(12px,auto,12px,auto) (裁切) </p>
<p>css属性代码大全<br>一 CSS文字属性：<br>color : #999999; /<em>文字颜色</em>/<br>font-family : 宋体,sans-serif; /<em>文字字体</em>/<br>font-size : 9pt; /<em>文字大小</em>/<br>font-style:itelic; /<em>文字斜体</em>/<br>font-variant:small-caps; /<em>小字体</em>/<br>letter-spacing : 1pt; /<em>字间距离</em>/<br>line-height : 200%; /<em>设置行高</em>/<br>font-weight:bold; /<em>文字粗体</em>/<br>vertical-align:sub; /<em>下标字</em>/<br>vertical-align:super; /<em>上标字</em>/<br>text-decoration:line-through; /<em>加删除线</em>/<br>text-decoration: overline; /<em>加顶线</em>/<br>text-decoration:underline; /<em>加下划线</em>/<br>text-decoration:none; /<em>删除链接下划线</em>/<br>text-transform : capitalize; /<em>首字大写</em>/<br>text-transform : uppercase; /<em>英文大写</em>/<br>text-transform : lowercase; /<em>英文小写</em>/<br>text-align:right; /<em>文字右对齐</em>/<br>text-align:left; /<em>文字左对齐</em>/<br>text-align:center; /<em>文字居中对齐</em>/<br>text-align:justify; /<em>文字分散对齐</em>/<br>vertical-align属性<br>vertical-align:top; /<em>垂直向上对齐</em>/<br>vertical-align:bottom; /<em>垂直向下对齐</em>/<br>vertical-align:middle; /<em>垂直居中对齐</em>/<br>vertical-align:text-top; /<em>文字垂直向上对齐</em>/<br>vertical-align:text-bottom; /<em>文字垂直向下对齐</em>/<br>二、CSS边框空白<br>padding-top:10px; /<em>上边框留空白</em>/<br>padding-right:10px; /<em>右边框留空白</em>/<br>padding-bottom:10px; /<em>下边框留空白</em>/<br>padding-left:10px; /<em>左边框留空白<br>三、CSS符号属性：<br>list-style-type:none; /</em>不编号<em>/<br>list-style-type:decimal; /</em>阿拉伯数字<em>/<br>list-style-type:lower-roman; /</em>小写罗马数字<em>/<br>list-style-type:upper-roman; /</em>大写罗马数字<em>/<br>list-style-type:lower-alpha; /</em>小写英文字母<em>/<br>list-style-type:upper-alpha; /</em>大写英文字母<em>/<br>list-style-type:disc; /</em>实心圆形符号<em>/<br>list-style-type:circle; /</em>空心圆形符号<em>/<br>list-style-type:square; /</em>实心方形符号<em>/<br>list-style-image:url(/dot.gif); /</em>图片式符号<em>/<br>list-style-position: outside; /</em>凸排<em>/<br>list-style-position:inside; /</em>缩进<em>/<br>四、CSS背景样式：<br>background-color:#F5E2EC; /</em>背景颜色<em>/<br>background:transparent; /</em>透视背景<em>/<br>background-image : url(/image/bg.gif); /</em>背景图片<em>/<br>background-attachment : fixed; /</em>浮水印固定背景<em>/<br>background-repeat : repeat; /</em>重复排列-网页默认<em>/<br>background-repeat : no-repeat; /</em>不重复排列<em>/<br>background-repeat : repeat-x; /</em>在x轴重复排列<em>/<br>background-repeat : repeat-y; /</em>在y轴重复排列<em>/<br>指定背景位置<br>background-position : 90% 90%; /</em>背景图片x与y轴的位置<em>/<br>background-position : top; /</em>向上对齐<em>/<br>background-position : buttom; /</em>向下对齐<em>/<br>background-position : left; /</em>向左对齐<em>/<br>background-position : right; /</em>向右对齐<em>/<br>background-position : center; /</em>居中对齐<em>/<br>五、CSS连接属性：<br>a /</em>所有超链接<em>/<br>a:link /</em>超链接文字格式<em>/<br>a:visited /</em>浏览过的链接文字格式<em>/<br>a:active /</em>按下链接的格式<em>/<br>a:hover /</em>鼠标转到链接<em>/<br>鼠标光标样式：<br>链接手指 CURSOR: hand<br>十字体 cursor:crosshair<br>箭头朝下 cursor:s-resize<br>十字箭头 cursor:move<br>箭头朝右 cursor:move<br>加一问号 cursor:help<br>箭头朝左 cursor:w-resize<br>箭头朝上 cursor:n-resize<br>箭头朝右上 cursor:ne-resize<br>箭头朝左上 cursor:nw-resize<br>文字I型 cursor:text<br>箭头斜右下 cursor:se-resize<br>箭头斜左下 cursor:sw-resize<br>漏斗 cursor:wait<br>光标图案(IE6)   p {cursor:url(“光标文件名.cur”),text;}<br>六、CSS框线一览表：<br>border-top : 1px solid #6699cc; /</em>上框线<em>/<br>border-bottom : 1px solid #6699cc; /</em>下框线<em>/<br>border-left : 1px solid #6699cc; /</em>左框线<em>/<br>border-right : 1px solid #6699cc; /</em>右框线<em>/<br>以上是建议书写方式,但也可以使用常规的方式 如下:<br>border-top-color : #369 /</em>设置上框线top颜色<em>/<br>border-top-width :1px /</em>设置上框线top宽度<em>/<br>border-top-style : solid/</em>设置上框线top样式<em>/<br>其他框线样式<br>solid /</em>实线框<em>/<br>dotted /</em>虚线框<em>/<br>double /</em>双线框<em>/<br>groove /</em>立体内凸框<em>/<br>ridge /</em>立体浮雕框<em>/<br>inset /</em>凹框<em>/<br>outset /</em>凸框<em>/<br>七、CSS表单运用：<br>文字方块<br>按钮<br>复选框<br>选择钮<br>多行文字方块<br>下拉式菜单 选项1选项2<br>八、CSS边界样式：<br>margin-top:10px; /</em>上边界<em>/<br>ＱＱ291911320<br>margin-right:10px; /</em>右边界值<em>/<br>margin-bottom:10px; /</em>下边界值<em>/<br>margin-left:10px; /</em>左边界值*/ </p>
<p>CSS 属性： 字体样式(Font Style)<br>序号 中文说明 标记语法<br>1 字体样式 {font:font-style font-variant font-weight font-size font-family}<br>2 字体类型 {font-family:”字体1”,”字体2”,”字体3”,…}<br>3 字体大小 {font-size:数值|inherit| medium| large| larger| x-large| xx-large| small| smaller| x-small| xx-small}<br>4 字体风格 {font-style:inherit|italic|normal|oblique}<br>5 字体粗细   {font-weight:100-900|bold|bolder|lighter|normal;}<br>6 字体颜色   {color:数值;}<br>7 阴影颜色 {text-shadow:16位色值}<br>8 字体行高   {line-height:数值|inherit|normal;}<br>9 字 间 距   {letter-spacing:数值|inherit|normal}<br>10 单词间距 {word-spacing:数值|inherit|normal}<br>11 字体变形 {font-variant:inherit|normal|small-cps }<br>12 英文转换 {text-transform:inherit|none|capitalize|uppercase|lowercase}<br>13 字体变形 {font-size-adjust:inherit|none}<br>14 字体 {font-stretch:condensed|expanded|extra-condensed|extra-expanded|inherit|narrower|normal| semi-condensed|semi-expanded|ultra-condensed|ultra-expanded|wider}<br>文本样式(Text Style)<br>序号 中文说明 标记语法<br>1 行 间 距 {line-height:数值|inherit|normal;}<br>2 文本修饰 {text-decoration:inherit|none|underline|overline|line-through|blink}<br>3 段首空格   {text-indent:数值|inherit}<br>4 水平对齐 {text-align:left|right|center|justify}<br>5 垂直对齐 {vertical-align:inherit|top|bottom|text-top|text-bottom|baseline|middle|sub|super}<br>6 书写方式 {writing-mode:lr-tb|tb-rl}<br>背景样式<br>序号 中文说明 标记语法<br>1 背景颜色 {background-color:数值}<br>2 背景图片 {background-image: url(URL)|none}<br>3 背景重复 {background-repeat:inherit|no-repeat|repeat|repeat-x|repeat-y}<br>4 背景固定 {background-attachment:fixed|scroll}<br>5 背景定位 {background-position:数值|top|bottom|left|right|center}<br>6 背影样式 {background:背景颜色|背景图象|背景重复|背景附件|背景位置}<br>框架样式(Box Style)<br>序号 中文说明 标记语法<br>1 边界留白 {margin:margin-top margin-right margin-bottom margin-left}<br>2 补　　白 {padding:padding-top padding-right padding-bottom padding-left}<br>3 边框宽度 {border-width:border-top-width border-right-width border-bottom-width border-left-width}　　<br>宽度值： thin|medium|thick|数值<br>4 边框颜色 {border-color:数值 数值 数值 数值}　　数值：分别代表top、right、bottom、left颜色值<br>5 边框风格 {border-style:none|hidden|inherit|dashed|solid|double|inset|outset|ridge|groove}<br>6 边　　框 {border:border-width border-style color}<br>   上 边 框 {border-top:border-top-width border-style color}<br>   右 边 框 {border-right:border-right-width border-style color}<br>   下 边 框 {border-bottom:border-bottom-width border-style color}<br>   左 边 框 {border-left:border-left-width border-style color}<br>7 宽　　度 {width:长度|百分比| auto}<br>8 高　　度 {height:数值|auto}<br>9 漂　　浮 {float:left|right|none}<br>10 清　　除 {clear:none|left|right|both}<br>分类列表<br>序号 中文说明 标记语法<br>1 控制显示 {display:none|block|inline|list-item}<br>2 控制空白 {white-space:normal|pre|nowarp}<br>3 符号列表 {list-style-type:disc|circle|square|decimal|lower-roman|upper-roman|lower-alpha|upper-alpha|none}<br>4 图形列表 {list-style-image:URL}<br>5 位置列表 {list-style-position:inside|outside}<br>6 目录列表 {list-style:目录样式类型|目录样式位置|url}<br>7 鼠标形状 {cursor:hand|crosshair|text|wait|move|help|e-resize|nw-resize|w-resize|s-resize|se-resize|sw-resize} </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用CSS属性大全&lt;br&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://www.yangkai0725.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>GitPush问题</title>
    <link href="http://www.yangkai0725.com/20160918/20160918GitPush%E9%97%AE%E9%A2%98.html"/>
    <id>http://www.yangkai0725.com/20160918/20160918GitPush问题.html</id>
    <published>2016-09-18T10:12:44.000Z</published>
    <updated>2016-09-18T10:32:10.147Z</updated>
    
    <content type="html"><![CDATA[<p>git branch –set-upstream-to=origin/master master</p>
<a id="more"></a>
<p>git push时报错：<br>the current branch master has no upstream branch</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git branch –set-upstream-to=origin/master master&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://www.yangkai0725.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat简介</title>
    <link href="http://www.yangkai0725.com/20160829/20160829Tomcat%E7%AE%80%E4%BB%8B.html"/>
    <id>http://www.yangkai0725.com/20160829/20160829Tomcat简介.html</id>
    <published>2016-08-29T07:59:47.000Z</published>
    <updated>2016-10-12T10:02:08.181Z</updated>
    
    <content type="html"><![CDATA[<p>tomcat参数、跨域访问、tomcat-user、tomcat服务开机后台启动、tomcat_permgen_space错误<br><a id="more"></a></p>
<blockquote>
<p>  设置tomcat参数</p>
</blockquote>
<p>-Xmx1024M -Xms512M -XX:MaxPermSize=256m</p>
<blockquote>
<p>  tomcat跨域访问</p>
</blockquote>
<p><a href="http://blog.csdn.net/liumm0000/article/details/8443550" target="_blank" rel="external">http://blog.csdn.net/liumm0000/article/details/8443550</a><br>若允许Tomcat所有域访问，将clientaccesspolicy.xml和crossdomain.xml加入%TOMCAT_HOME%\webapps\ROOT 目录下即可<br>clientaccesspolicy.xml示例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8" ?&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">access-policy</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">cross-domain-access</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">policy</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">allow-from</span> <span class="attr">http-request-headers</span>=<span class="string">"*"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">domain</span> <span class="attr">uri</span>=<span class="string">"*"</span>/&gt;</span>  </div><div class="line">      <span class="tag">&lt;/<span class="name">allow-from</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">grant-to</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">resource</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">include-subpaths</span>=<span class="string">"true"</span>/&gt;</span>  </div><div class="line">      <span class="tag">&lt;/<span class="name">grant-to</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">policy</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;/<span class="name">cross-domain-access</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">access-policy</span>&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>  设置tomcat开机后台启动</p>
</blockquote>
<p><a href="http://jingyan.baidu.com/article/a65957f4b12b8724e77f9b5a.html" target="_blank" rel="external">http://jingyan.baidu.com/article/a65957f4b12b8724e77f9b5a.html</a></p>
<blockquote>
<p>  tomcat_permgen_space错误</p>
</blockquote>
<p>rem permgen space<br>rem —– Execute The Requested Command —————————————<br>set JAVA_OPTS=%JAVA_OPTS% -server -XX:PermSize=128m -XX:MaxPermSize=512m</p>
<blockquote>
<p>  tomcat-user</p>
</blockquote>
<p>tomcat7<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">tomcat-users</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"tomcat"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"role1"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">user</span> <span class="attr">password</span>=<span class="string">"tomcat"</span> <span class="attr">roles</span>=<span class="string">"tomcat"</span> <span class="attr">username</span>=<span class="string">"tomcat"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">user</span> <span class="attr">password</span>=<span class="string">"tomcat"</span> <span class="attr">roles</span>=<span class="string">"tomcat,role1"</span> <span class="attr">username</span>=<span class="string">"both"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">user</span> <span class="attr">password</span>=<span class="string">"tomcat"</span> <span class="attr">roles</span>=<span class="string">"role1"</span> <span class="attr">username</span>=<span class="string">"role1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tomcat-users</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>tomcat8<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">tomcat-users</span> <span class="attr">version</span>=<span class="string">"1.0"</span> <span class="attr">xmlns</span>=<span class="string">"http://tomcat.apache.org/xml"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://tomcat.apache.org/xml tomcat-users.xsd"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager"</span>/&gt;</span>　</div><div class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-gui"</span>/&gt;</span>　</div><div class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"admin"</span>/&gt;</span>　</div><div class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"admin-gui"</span>/&gt;</span>　</div><div class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"tomcat"</span> <span class="attr">password</span>=<span class="string">"tomcat"</span> <span class="attr">roles</span>=<span class="string">"admin-gui,admin,manager-gui,manager"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tomcat-users</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tomcat参数、跨域访问、tomcat-user、tomcat服务开机后台启动、tomcat_permgen_space错误&lt;br&gt;
    
    </summary>
    
    
      <category term="tomcat" scheme="http://www.yangkai0725.com/tags/tomcat/"/>
    
      <category term="server" scheme="http://www.yangkai0725.com/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>CXFWebservice暴露方式</title>
    <link href="http://www.yangkai0725.com/20160828/20160828CXFWebservice%E6%9A%B4%E9%9C%B2%E6%96%B9%E5%BC%8F.html"/>
    <id>http://www.yangkai0725.com/20160828/20160828CXFWebservice暴露方式.html</id>
    <published>2016-08-28T14:39:18.000Z</published>
    <updated>2016-10-12T10:02:08.179Z</updated>
    
    <content type="html"><![CDATA[<p>使用注解和XML方式暴露REST风格webservice，使用JAX-WS暴露SOAP风格webservice。<br>使用wsdl2java根据wsdl生成java源码。<br><a id="more"></a></p>
<blockquote>
<p>  REST风格 注解方式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//接口使用注解</span></div><div class="line"><span class="meta">@WebService</span></div><div class="line"><span class="meta">@Path</span>(<span class="string">"/users"</span>)</div><div class="line"><span class="comment">//方法声明如下</span></div><div class="line"><span class="meta">@GET</span>    </div><div class="line"><span class="meta">@Path</span>(<span class="string">"&#123;lastname&#125;"</span>)    </div><div class="line"><span class="function">List&lt;Person&gt; <span class="title">findByLastName</span><span class="params">(@PathParam(<span class="string">"lastname"</span>)</span> String lastName)</span>;     </div><div class="line"><span class="meta">@GET</span>    </div><div class="line"><span class="function">List&lt;Person&gt; <span class="title">getPeople</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>  REST风格 XML配置方式</p>
</blockquote>
<p>使用了JAX-RS，无需在接口中声明任何注解<br><code>src/main/webapp/WEB-INF/cxf-servlet.xml</code>中添加</p>
<pre><code>&lt;jaxrs:serviceBeans&gt;
    &lt;ref bean=&quot;userManager&quot;/&gt;
&lt;/jaxrs:serviceBeans&gt;
</code></pre><p><code>http://localhost:8080/services/api/users.json</code><br>也可以这样访问<code>http://localhost:8080/services/api/users</code><br>但必须给User添加@XmlRootElement注解</p>
<blockquote>
<p>  暴露SOAP WebService</p>
</blockquote>
<p>SOAP:Simple Object Access Protocol简单对象访问协议<br>接口UserService使用@WebService注解</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebService</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span></span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现类UserServiceImpl使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(<span class="string">"userManager"</span>)</div><div class="line"><span class="meta">@WebService</span>(serviceName = <span class="string">"UserService"</span>,  endpointInterface = <span class="string">"com.joiest.service.UserService"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最好提供无参构造器，以满足JAX-WS<br><code>src/main/webapp/WEB-INF/cxf-servlet.xml</code> 中添加</p>
<pre><code>&lt;jaxws:endpoint id=&quot;userService&quot; implementor=&quot;#userManager&quot; address=&quot;/UserService&quot;/&gt;
</code></pre><p>运行mvn jetty:run<br><a href="http://localhost:8080/services/UserService?wsdl" target="_blank" rel="external">http://localhost:8080/services/UserService?wsdl</a><br>即可查看userService的wsdl描述</p>
<blockquote>
<p>  wsdl2java生成java源码</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">wsdl2java <span class="_">-s</span> E:\myToolsApi\studyTools\tools\webservice\cxf\gen_src\src -uri http://localhost:8088/cxfws/services/Hellows?wsdl</div><div class="line"></div><div class="line">wsimport –s . client http://localhost:8088/cxfws/services/Hellows?wsdl</div><div class="line"></div><div class="line">wsimport <span class="_">-s</span> . http://127.0.0.1:8088/cxfws/services/Hellows?wsdl</div><div class="line"></div><div class="line">wsdl2java <span class="_">-s</span> . -uri http://localhost:8088/cxfws/services/Hellows?wsdl</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用注解和XML方式暴露REST风格webservice，使用JAX-WS暴露SOAP风格webservice。&lt;br&gt;使用wsdl2java根据wsdl生成java源码。&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://www.yangkai0725.com/tags/java/"/>
    
      <category term="webservice" scheme="http://www.yangkai0725.com/tags/webservice/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ简介</title>
    <link href="http://www.yangkai0725.com/20160828/20160828RabbitMQ%E7%AE%80%E4%BB%8B.html"/>
    <id>http://www.yangkai0725.com/20160828/20160828RabbitMQ简介.html</id>
    <published>2016-08-28T11:10:31.000Z</published>
    <updated>2016-09-18T07:47:36.945Z</updated>
    
    <content type="html"><![CDATA[<p>MQ是消费-生产者模型的一个典型的代表，一端往消息队列中不断写入消息，而另一端则可以读取或者订阅队列中的消息。MQ和JMS类似，但不同的是JMS是JAVA消息中间件服务的一个标准和API定义，而MQ则是遵循了AMQP协议的具体实现和产品。<br><a id="more"></a></p>
<p>一个exchange能用n条routing-key规则去指向一个queue。<br>如果一个Message符合n条规则去往同一个queue，这个Message只会被投放到这个queue一次。</p>
<blockquote>
<p>  概念说明</p>
</blockquote>
<p>Broker:简单来说就是消息队列服务器实体。<br>Exchange:消息交换机，它指定消息按什么规则，路由到哪个队列。<br>Queue:消息队列载体，每个消息都会被投入到一个或多个队列。<br>Binding:绑定，它的作用就是把exchange和queue按照路由规则绑定起来。<br>Routing Key:路由关键字，exchange根据这个关键字进行消息投递。<br>vhost:虚拟主机，一个broker里可以开设多个vhost，用作不同用户的权限分离。<br>producer:消息生产者，就是投递消息的程序。<br>consumer:消息消费者，就是接受消息的程序。<br>channel:消息通道，在客户端的每个连接里，可建立多个channel，每个channel代表一个会话任务。</p>
<blockquote>
<p>  消息队列的使用过程</p>
</blockquote>
<ul>
<li>客户端连接到消息队列服务器，打开一个channel。</li>
<li>客户端声明一个exchange，并设置相关属性。</li>
<li>客户端声明一个queue，并设置相关属性。</li>
<li>客户端使用<code>routing key</code>，在exchange和queue之间建立好绑定关系。</li>
<li>客户端投递消息到exchange。</li>
</ul>
<blockquote>
<p>  消息队列持久化</p>
</blockquote>
<p>RabbitMQ支持消息的持久化，也就是数据写在磁盘上，为了数据安全考虑，我想大多数用户都会选择持久化。消息队列持久化包括3个部分：</p>
<ul>
<li>exchange持久化，在声明时指定durable =&gt; 1</li>
<li>queue持久化，在声明时指定durable =&gt; 1</li>
<li>消息持久化，在投递时指定delivery_mode =&gt; 2（1是非持久化）<br>如果exchange和queue都是持久化的，那么它们之间的binding也是持久化的。如果exchange和queue两者之间有一个持久化，一个非持久化，就不允许建立绑定。</li>
</ul>
<blockquote>
<p>  exchange的类型</p>
</blockquote>
<p>在实际的情况下，消息发送者不会直接将Message发入queue，而是发入exchange，<code>exchange</code>能通过指定的规则将message放入指定的queue中（<code>public/subscribe</code>模型）。exchange有direct，topic，headers和fanout等几种类型。</p>
<ul>
<li>Direct交换机:完全根据key进行投递，例如，绑定时设置了<code>routing key</code>为”abc”，那么客户端提交的消息，只有设置了key为”abc”的才会投递到队列。</li>
<li>Topic交换机:对key进行模式匹配后进行投递，功能强大，几乎能实现其他exchange的routing规则，符号<code>#</code>匹配一个或多个词，符号<code>*</code>匹配任意一个词。routing-key不能是任意，它必须是一个一些词的数组，用”.”隔开，每个词可以是任意的，但通常是代表某些含义的。这个词的数组不能超过255个字节。例如<code>abc.#</code>匹配<code>abc.def.ghi</code>，<code>abc.*</code>只匹配<code>abc.def</code>。</li>
<li>Fanout交换机:不需要key的，它采取广播模式，一个消息进来时，将消息派发到所有的绑定到该exchange的queque中。</li>
</ul>
<blockquote>
<p>  JAVA API</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//connecting to a broker 服务器实体</span></div><div class="line">ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</div><div class="line">factory.setUsername(userName);</div><div class="line">factory.setPassword(password);</div><div class="line">factory.setVirtualHost(virtualHost);</div><div class="line">factory.setHost(hostName);</div><div class="line">factory.setPort(portNumber);</div><div class="line"><span class="comment">//或者factory.setUri("amqp://userName:password@hostName:portNumber/virtualHost");</span></div><div class="line">Connection conn = factory.newConnection();</div><div class="line"><span class="comment">//或者 address array  --com.rabbitmq.client</span></div><div class="line">Address[] addrArr = <span class="keyword">new</span> Address[]&#123; <span class="keyword">new</span> Address(hostname1, portnumber1)</div><div class="line">                                 , <span class="keyword">new</span> Address(hostname2, portnumber2)&#125;;</div><div class="line">Connection conn = factory.newConnection(addrArr);</div><div class="line"><span class="comment">//open a channel</span></div><div class="line">Channel channel = conn.createChannel();</div><div class="line"><span class="comment">//disconnect</span></div><div class="line">channel.colse();</div><div class="line">conn.close();</div><div class="line">consumer thread pool --java.util.concurrent </div><div class="line">ExecutorService es = Executors.newFixedThreadPool(<span class="number">20</span>);</div><div class="line">Connection conn = factory.newConnection(es);</div><div class="line"><span class="comment">//Using exchanges and queues</span></div><div class="line">channel.exchangeDeclare(exchangeName, <span class="string">"direct"</span>, <span class="keyword">true</span>);</div><div class="line">String queueName = channel.queueDeclare().getQueue();</div><div class="line">channel.queueBind(queueName, exchangeName, routingKey);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MQ是消费-生产者模型的一个典型的代表，一端往消息队列中不断写入消息，而另一端则可以读取或者订阅队列中的消息。MQ和JMS类似，但不同的是JMS是JAVA消息中间件服务的一个标准和API定义，而MQ则是遵循了AMQP协议的具体实现和产品。&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://www.yangkai0725.com/tags/java/"/>
    
      <category term="mq" scheme="http://www.yangkai0725.com/tags/mq/"/>
    
      <category term="jms" scheme="http://www.yangkai0725.com/tags/jms/"/>
    
  </entry>
  
  <entry>
    <title>Maven之appfuse模板</title>
    <link href="http://www.yangkai0725.com/20160828/20160828Maven%E4%B9%8Bappfuse%E6%A8%A1%E6%9D%BF.html"/>
    <id>http://www.yangkai0725.com/20160828/20160828Maven之appfuse模板.html</id>
    <published>2016-08-28T10:09:55.000Z</published>
    <updated>2016-10-18T02:29:23.945Z</updated>
    
    <content type="html"><![CDATA[<p>Appfuse是由Matt Raible开发的一个指导性的入门级J2EE框架，它对如何集成流行的Spring、Hibernate、iBatis、struts、Xdoclet、junit 等基础框架给出了示范。提供了对Taperstry和JSF的支持。<br><a id="more"></a></p>
<blockquote>
<p>  常用命令</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th style="text-align:left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>mvn appfuse:gen-model</td>
<td style="text-align:left">根据数据库的表生成java类</td>
</tr>
<tr>
<td>mvn appfuse:gen</td>
<td style="text-align:left">根据 POJOs.生成并安装Tests, DAO, Managers, Controllers and Views</td>
</tr>
<tr>
<td>mvn appfuse:full-source</td>
<td style="text-align:left">把运行所需要的org.appfuse中的依赖类转换成你的包名称</td>
</tr>
<tr>
<td>mvn eclipse:eclipse</td>
<td style="text-align:left">生成eclipse的项目的配置文件，用户可以直接把项目导入到eclipse中</td>
</tr>
<tr>
<td>mvn jetty:run-war</td>
<td style="text-align:left">打包并且发布你的应用程序到Jetty, 查看在 <a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a></td>
</tr>
<tr>
<td>mvn appfuse:install</td>
<td style="text-align:left">把生成的源代码及配置文件写入到src中</td>
</tr>
<tr>
<td>mvn integration-test</td>
<td style="text-align:left">启动TOMCAT(或别的服务器)进行测试</td>
</tr>
<tr>
<td>mvn appfuse:remove</td>
<td style="text-align:left">删除appfuse:gen.生成的代码mvn</td>
</tr>
<tr>
<td>appfuse:clean</td>
<td style="text-align:left">清除target下的所有内容</td>
</tr>
</tbody>
</table>
<blockquote>
<p>  生成实体类</p>
</blockquote>
<p>mvn appfuse:gen-model</p>
<blockquote>
<p>  生成dao、service等</p>
</blockquote>
<pre><code>mvn appfuse:gen -Dentity=com.joiest.model.MqConfig
mvn appfuse:gen -Dentity=YbtTransaction
</code></pre><blockquote>
<p>  使用appfuse创建maven项目</p>
</blockquote>
<p>使用maven创建项目</p>
<pre><code>mvn archetype:create -DgroupId=com.joiest -DartifactId=webtest -DarchetypeArtifactId=maven-archetype-webapp
</code></pre><p><em>说明：DartifactId:项目名称   DgroupId：包结构</em></p>
<p>生成项目文件生成.classpath,.project,.setting文件</p>
<pre><code>mvn eclipse:eclipse
</code></pre><p>更改appFuse的代码生成方式，修改pom中<br>修改生成代码方式，找到 </p>
<pre><code>&lt;genericCore&gt;${amp.genericCore}&lt;/genericCore&gt; 
&lt;fullSource&gt;${amp.fullSource}&lt;/fullSource&gt; 
</code></pre><p>修改成：</p>
<pre><code> &lt;genericCore&gt;false&lt;/genericCore&gt; 
&lt;fullSource&gt;true&lt;/fullSource&gt; 
</code></pre><p>注意，这里必须吧pom.xml中的genericCore属性设为false 否则只会生成Action<br>数据库配置信息(mysql在最底下)</p>
<p>执行项目创建命令后，进入项目主目录后，更改AppFuse到全源代码模式</p>
<pre><code>mvn appfuse:full-source
</code></pre><p>生成Model类</p>
<pre><code>mvn appfuse:gen-mode


mvn appfuse:gen -Dentity=com.joiest.model.YbtAccount 
</code></pre><p>把生成的配置文件写入到src目录下的配置文件中</p>
<pre><code>mvn appfuse:install
</code></pre><p>下载项目的依赖jar包到本地，并进行集成测试</p>
<pre><code>mvn
</code></pre><p>打包并运行项目</p>
<pre><code>mvn jetty:run-war
</code></pre><p>通过浏览器访问admin/admin</p>
<pre><code>http://localhost:8080
</code></pre><p>修改pom.xml</p>
<pre><code>&lt;artifactId&gt;maven-eclipse-plugin&lt;/artifactId&gt;
&lt;version&gt;2.4&lt;/version&gt;
</code></pre><p>配置repositories,M2_REPO</p>
<p>运行服务器查看生成的crud实例</p>
<pre><code>mvn jetty:run
</code></pre><blockquote>
<p>  下面是创建不同种类项目的Archetype Command：</p>
</blockquote>
<p><strong><em>JSF Basic</em></strong></p>
<pre><code>mvn archetype:create -DarchetypeGroupId=org.appfuse.archetypes -DarchetypeArtifactId=appfuse-basic-jsf -DremoteRepositories=http://static.appfuse.org/releases-DarchetypeVersion=2.0 -DgroupId=com.mycompany.app -DartifactId=myproject 
</code></pre><p><strong><em>Spring MVC Basic</em></strong></p>
<pre><code>mvn archetype:create -DarchetypeGroupId=org.appfuse.archetypes -DarchetypeArtifactId=appfuse-basic-spring -DremoteRepositories=http://static.appfuse.org/releases-DarchetypeVersion=2.0 -DgroupId=com.mycompany.app -DartifactId=myproject 
</code></pre><p><strong><em>Struts 2 Basic</em></strong> </p>
<pre><code>mvn archetype:create -DarchetypeGroupId=org.appfuse.archetypes -DarchetypeArtifactId=appfuse-basic-struts -DremoteRepositories=http://static.appfuse.org/releases-DarchetypeVersion=2.0 -DgroupId=com.mycompany.app -DartifactId=myproject 
</code></pre><p><strong><em>Tapestry Basic</em></strong> </p>
<pre><code>mvn archetype:create -DarchetypeGroupId=org.appfuse.archetypes -DarchetypeArtifactId=appfuse-basic-tapestry -DremoteRepositories=http://static.appfuse.org/releases-DarchetypeVersion=2.0 -DgroupId=com.mycompany.app -DartifactId=myproject 
</code></pre><p><strong><em>JSF Modula</em></strong></p>
<pre><code>mvn archetype:create -DarchetypeGroupId=org.appfuse.archetypes -DarchetypeArtifactId=appfuse-modular-jsf -DremoteRepositories=http://static.appfuse.org/releases-DarchetypeVersion=2.0 -DgroupId=com.mycompany.app -DartifactId=myproject 
</code></pre><p><strong><em>Spring MVC Modular</em></strong></p>
<pre><code>mvn archetype:create -DarchetypeGroupId=org.appfuse.archetypes -DarchetypeArtifactId=appfuse-modular-spring -DremoteRepositories=http://static.appfuse.org/releases-DarchetypeVersion=2.0 -DgroupId=com.mycompany.app -DartifactId=myproject 
</code></pre><p><strong><em>Struts 2 Modular</em></strong></p>
<pre><code>mvn archetype:create -DarchetypeGroupId=org.appfuse.archetypes -DarchetypeArtifactId=appfuse-modular-struts -DremoteRepositories=http://static.appfuse.org/releases-DarchetypeVersion=2.0 -DgroupId=com.mycompany.app -DartifactId=myproject 
</code></pre><p><strong><em>Tapestry Modular</em></strong> </p>
<pre><code>mvn archetype:create -DarchetypeGroupId=org.appfuse.archetypes -DarchetypeArtifactId=appfuse-modular-tapestry -DremoteRepositories=http://static.appfuse.org/releases-DarchetypeVersion=2.0 -DgroupId=com.mycompany.app -DartifactId=myproject 
</code></pre><p><strong><em>Core(backend only)</em></strong></p>
<pre><code>mvn archetype:create -DarchetypeGroupId=org.appfuse.archetypes -DarchetypeArtifactId=appfuse-core -DremoteRepositories=http://static.appfuse.org/releases-DarchetypeVersion=2.0 -DgroupId=com.mycompany.app -DartifactId=myproject
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Appfuse是由Matt Raible开发的一个指导性的入门级J2EE框架，它对如何集成流行的Spring、Hibernate、iBatis、struts、Xdoclet、junit 等基础框架给出了示范。提供了对Taperstry和JSF的支持。&lt;br&gt;
    
    </summary>
    
      <category term="maven" scheme="http://www.yangkai0725.com/categories/maven/"/>
    
    
      <category term="maven" scheme="http://www.yangkai0725.com/tags/maven/"/>
    
      <category term="appfuse" scheme="http://www.yangkai0725.com/tags/appfuse/"/>
    
  </entry>
  
  <entry>
    <title>Maven之pom简介</title>
    <link href="http://www.yangkai0725.com/20160827/20160827Maven%E4%B9%8Bpom%E7%AE%80%E4%BB%8B.html"/>
    <id>http://www.yangkai0725.com/20160827/20160827Maven之pom简介.html</id>
    <published>2016-08-27T10:52:54.000Z</published>
    <updated>2016-10-12T10:02:08.177Z</updated>
    
    <content type="html"><![CDATA[<p>pom.xml简介。</p>
<a id="more"></a>
<blockquote>
<p>  pom.xml 文件基本节点介绍</p>
</blockquote>
<p><code>&lt;project&gt;</code>：文件的根节点<br><code>&lt;modelversion&gt;</code> ： pom.xml 使用的对象模型版本<br><code>&lt;groupId&gt;</code> ：创建项目的组织或团体的唯一 Id<br><code>&lt;artifactId&gt;</code> ：项目的唯一 Id, 可视为项目名<br><code>&lt;packaging&gt;</code> ：打包物的扩展名，一般有 JAR,WAR,EAR 等<br><code>&lt;version&gt;</code> ：产品的版本号<br><code>&lt;name&gt;</code> ：项目的显示名，常用于 Maven 生成的文档。<br><code>&lt;url&gt;</code> ：组织的站点，常用于 Maven 生成的文档。<br><code>&lt;description&gt;</code> ：项目的描述，常用于 Maven 生成的文档。<br><code>&lt;finalName&gt;</code>:项目打包的名称。</p>
<blockquote>
<p>  Maven自定义源码目录</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>src/java<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如此源码目录就变成了src/java，而不是默认的src/main/java</p>
<blockquote>
<p>  超级POM</p>
</blockquote>
<p>对于maven3，超级POM位于<br><code>$MAVEN_HOME/lib/maven-model-builder-x.x.x.jar</code><br>中的<code>org\apache\maven\model\pom-4.0.0.xml</code><br>超级POM中定义了诸多关于项目目录</p>
<p>项目的主输出目录directory：<code>${project.basedir}/target</code></p>
<p>主代码输入目录outputDirectory:<code>${project.build.directory}/classes</code></p>
<p>最终构建的名称格式finalName：<code>${project.artifactId}-${project.version}</code></p>
<p>测试代码输出目录testOutputDirectory：<code>${project.build.directory}/test-classes</code></p>
<p>主源码目录sourceDirectory：<code>${project.basedir}/src/main/java</code></p>
<p>脚本源码目录scriptSourceDirectory：<code>src/main/scripts</code></p>
<p>测试源码目录testSourceDirectory：<code>${project.basedir}/src/test/java</code></p>
<p>主资源目录<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>测试资源目录</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">testResources</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/test/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>  跳过测试</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pom.xml简介。&lt;/p&gt;
    
    </summary>
    
      <category term="maven" scheme="http://www.yangkai0725.com/categories/maven/"/>
    
    
      <category term="java" scheme="http://www.yangkai0725.com/tags/java/"/>
    
      <category term="maven" scheme="http://www.yangkai0725.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Maven简介及常用命令</title>
    <link href="http://www.yangkai0725.com/20160827/20160827Maven%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
    <id>http://www.yangkai0725.com/20160827/20160827Maven简介及常用命令.html</id>
    <published>2016-08-27T10:11:14.000Z</published>
    <updated>2016-10-12T10:02:08.178Z</updated>
    
    <content type="html"><![CDATA[<p>Maven的核心思想：约定大于配置。<br>找那个jar的pom配置：<a href="http://mvnrepository.com/" target="_blank" rel="external">http://mvnrepository.com/</a><br>找jar包：www.findjar.com<br><a id="more"></a></p>
<blockquote>
<p>  maven打包package</p>
</blockquote>
<pre><code>mvn clean package -DskipTests
</code></pre><p>为了生成可执行的jar需要依赖maven-shade-plugin<br>如果pom中没有指定，则默认打jar包</p>
<blockquote>
<p>  安装任务install</p>
</blockquote>
<pre><code>mvn clean install
</code></pre><blockquote>
<p>  编译compile</p>
</blockquote>
<pre><code>mvn clean compile
</code></pre><blockquote>
<p>  测试test</p>
</blockquote>
<pre><code>mvn clean test
</code></pre><p>执行顺序：compile–&gt;test–&gt;package–&gt;install</p>
<blockquote>
<p>  maven安装jar包到仓库</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn install:install-file -DgroupId=com.yk -DartifactId=zxing-core -Dversion=2.0 -Dpackaging=jar -Dfile=E:\my\jars\zxing\zxing-core-2.0.jar</div></pre></td></tr></table></figure>
<p>如果要上传源码把packaging=jar,jar改成java-source</p>
<blockquote>
<p>  maven命令创建web项目</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn archetype:create -DgroupId=com.joiest -DartifactId=webtest -DarchetypeArtifactId=maven-archetype-webapp</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Maven的核心思想：约定大于配置。&lt;br&gt;找那个jar的pom配置：&lt;a href=&quot;http://mvnrepository.com/&quot;&gt;http://mvnrepository.com/&lt;/a&gt;&lt;br&gt;找jar包：www.findjar.com&lt;br&gt;
    
    </summary>
    
      <category term="maven" scheme="http://www.yangkai0725.com/categories/maven/"/>
    
    
      <category term="java" scheme="http://www.yangkai0725.com/tags/java/"/>
    
      <category term="maven" scheme="http://www.yangkai0725.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Javascript键盘事件</title>
    <link href="http://www.yangkai0725.com/20160827/20160827Javascript%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6.html"/>
    <id>http://www.yangkai0725.com/20160827/20160827Javascript键盘事件.html</id>
    <published>2016-08-27T10:00:06.000Z</published>
    <updated>2016-10-18T03:06:40.705Z</updated>
    
    <content type="html"><![CDATA[<p>Javascript键盘事件。</p>
<a id="more"></a>
<blockquote>
<p>  keyup键盘弹起事件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"input[name='password']"</span>,loginForm).keyup(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> ev = <span class="built_in">document</span>.all ? <span class="built_in">window</span>.event : e;  </div><div class="line">    <span class="keyword">if</span>(ev.keyCode==<span class="number">13</span>) &#123;</div><div class="line">    <span class="comment">// 如（ev.ctrlKey &amp;&amp; ev.keyCode==13）为ctrl+Center 触发</span></div><div class="line">        $(<span class="string">"#ulogin"</span>).click();</div><div class="line">    &#125;  </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Javascript键盘事件。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.yangkai0725.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://www.yangkai0725.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo简介</title>
    <link href="http://www.yangkai0725.com/20160827/20160827Dubbo%E7%AE%80%E4%BB%8B.html"/>
    <id>http://www.yangkai0725.com/20160827/20160827Dubbo简介.html</id>
    <published>2016-08-27T04:01:06.000Z</published>
    <updated>2016-09-18T07:47:36.938Z</updated>
    
    <content type="html"><![CDATA[<p>DUBBO是一个分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，是阿里巴巴SOA服务化治理方案的核心框架，每天为2,000+个服务提供3,000,000,000+次访问量支持，并被广泛应用于阿里巴巴集团的各成员站点。</p>
<a id="more"></a>
<h1 id="Dubbo-Feature-Road-Map"><a href="#Dubbo-Feature-Road-Map" class="headerlink" title="Dubbo Feature Road Map"></a>Dubbo Feature Road Map</h1><p><img src="/images/dubbo/1.png" alt=""></p>
<h1 id="Dubbo-Extension-Road-Map"><a href="#Dubbo-Extension-Road-Map" class="headerlink" title="Dubbo Extension Road Map"></a>Dubbo Extension Road Map</h1><p><img src="/images/dubbo/2.png" alt=""></p>
<h1 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h1><p><img src="/images/dubbo/3.png" alt=""></p>
<h1 id="Dubbo代码框架"><a href="#Dubbo代码框架" class="headerlink" title="Dubbo代码框架"></a>Dubbo代码框架</h1><p><img src="/images/dubbo/5.bmp" alt=""></p>
<h1 id="启动顺序"><a href="#启动顺序" class="headerlink" title="启动顺序"></a>启动顺序</h1><p>1、zookeeper注册中心<br>2、监控中心simple-monitor<br>3、提供者provider<br>4、消费者consumer<br>5、可选的admin控制台</p>
<h1 id="暴露服务与消费服务"><a href="#暴露服务与消费服务" class="headerlink" title="暴露服务与消费服务"></a>暴露服务与消费服务</h1><p><img src="/images/dubbo/4.bmp" alt=""></p>
<p>service–&gt;ServiceConfig–&gt;ProxyFactory(getInvoker)–&gt;Invoker–&gt;protocol(dubbo,hessian,rmi)–&gt;exporter</p>
<p>service—&gt;&gt;invoker—&gt;&gt;exporter</p>
<p>..–&gt;ReferenceConfig.init–&gt;protocol.refer(dubbo,hessian,rmi)–&gt;invoker–&gt;ProxyFactory(getProxy)–&gt;ref</p>
<h1 id="线程派发模式"><a href="#线程派发模式" class="headerlink" title="线程派发模式"></a>线程派发模式</h1><p><img src="/images/dubbo/6.bmp" alt=""></p>
<h1 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h1><p><img src="/images/dubbo/7.bmp" alt=""></p>
<h1 id="模块扩展"><a href="#模块扩展" class="headerlink" title="模块扩展"></a>模块扩展</h1><p>RPC协议扩展，封装远程调用协议<br>rpc.Protocol/Exporter/Invoker<br>调用拦截扩展<br>rpc.Filter/rpc.filter.XXXFilter<br>引用监听扩展<br>rpc.InvokerListener/rpc.listener.XXXInvokerListener<br>暴露监听扩展<br>rpc.ExporterListener/registry.directory.ResistryExporterListener<br>集群扩展<br>rpc.cluster.Cluster/rpc.cluster.support.XXXCluster<br>路由扩展<br>rpc.cluster.Router/RouterFactory/rpc.cluster.router.XXXRouterFactory<br>负载均衡扩展<br>rpc.cluster.LoadBalance/rpc.cluster.loadbalance.XXXLoadBalance<br>合并结果扩展<br>rpc.cluster.Merge/rpc.cluster.merge.XXXMerge<br>注册中心扩展<br>registry.Registry/RegistryFactory/registry.support.dubbo.DubboRegistryFactory<br>监控中心扩展<br>monitor.Monitor/MonitorFactory/monitor.support.dubbo.DubboMonitorFactory<br>扩展点加载扩展<br>common.extension.ExtensionFactory/common.extension.factory.SpiExtensionFactory/config.spring.extension.SpringExtensionFactory<br>动态代理扩展<br>rpc.proxy.ProxyFactory/JdkProxyFactory/JavassistProxyFactory<br>编译器扩展<br>common.compiler.Compiler/common.compiler.support.JdkCompiler/JavassistCompiler<br>消息派发扩展<br>remoting.Dispater<br>线程池扩展<br>common.thredpool.ThreadPool/FixedThreadPool/CachedThreadPool<br>序列化扩展<br>common.serializer.Serialization/ObjectInput/ObjectOutput<br>网络传输扩展<br>remoting.Transporter/Server/Client Netty/Mina/GrizzlyTransporter<br>信息交换扩展<br>remoting.exchange.Exchanger/ExchangeServer/ExchangeClient<br>组网扩展<br>remoting.p2p.NetWorker/remoting.p2p.supporter.MulticastNetworker/FileNetworker<br>Telnet命令扩展<br>remoting.telnet.TelnetHandler/remoting.telnet.XXXTelnetHandler/rpc.dubbo.telnet.XXXTelnetHandler<br>状态检查扩展<br>common.status.StatusChecker<br>容器扩展<br>container.Container/container.spring.SpringContainer/JettyContainer/Log4jContainer<br>页面扩展<br>container.page.PageHandler/container.page.pages.Home/Status/Log/SystemPageHandler<br>缓存扩展<br>cache.CacheFactory/cache.support.xxx.Lru/ThreadLocal/JCacheFactory<br>验证扩展<br>validation.Validation/validation.support.jvalidation.JValidation<br>日志适配扩展<br>common.logger.LoggerAdapter/common.logger.xxx.Slf4j/Jcl/Log4j/JdkLoggerAdapter</p>
<h1 id="源码结构"><a href="#源码结构" class="headerlink" title="源码结构"></a>源码结构</h1><p>dubbo.cache<br>缓存相关，filter、support<br>dubbo.common<br>util类及通用模型，io、json、log、threadpool、serializer等<br>dubbo.config<br>配置模块，是Dubbo对外的API，用户通过Config使用Dubbo，隐藏Dubbo所有细节，annotation、spring、support等<br>dubbo.container<br>容器模块，是一个Standlone的容器，以简单的Main加载Spring启动，因为服务通常不需要Tomcat/JBoss等Web容器的特性，没必要用Web容器去加载服务<br>dubbo.monitor<br>监控模块，统计服务调用次数，调用时间的，调用链跟踪的服务<br>dubbo.registry<br>注册中心模块，基于注册中心下发地址的集群方式，以及对各种注册中心的抽象<br>dubbo.remoting<br>远程通讯模块，相当于Dubbo协议的实现，如果RPC用RMI协议则不需要使用此包<br>dubbo.rpc<br>远程调用模块，抽象各种协议，以及动态代理，只包含一对一的调用，不关心集群的管理<br>dubbo.validation</p>
<h1 id="dubbo-XXX配置"><a href="#dubbo-XXX配置" class="headerlink" title="dubbo-XXX配置"></a>dubbo-XXX配置</h1><p><dubbo:service><br>服务配置，用于暴露一个服务，定义服务的元信息，一个服务可以用多个协议暴露，一个服务也可以注册到多个注册中心。</dubbo:service></p>
<p><dubbo:reference><br>引用配置，用于创建一个远程服务代理，一个引用可以指向多个注册中心。</dubbo:reference></p>
<p><dubbo:protocol><br>协议配置，用于配置提供服务的协议信息，协议由提供方指定，消费方被动接受。</dubbo:protocol></p>
<p><dubbo:application><br>应用配置，用于配置当前应用信息，不管该应用是提供者还是消费者。</dubbo:application></p>
<p><dubbo:module><br>模块配置，用于配置当前模块信息，可选。</dubbo:module></p>
<p><dubbo:registry><br>注册中心配置，用于配置连接注册中心相关信息。</dubbo:registry></p>
<p><dubbo:monitor><br>监控中心配置，用于配置连接监控中心相关信息，可选。</dubbo:monitor></p>
<p><dubbo:provider><br>提供方的缺省值，当ProtocolConfig和ServiceConfig某属性没有配置时，采用此缺省值，可选。</dubbo:provider></p>
<p><dubbo:consumer><br>消费方缺省配置，当ReferenceConfig某属性没有配置时，采用此缺省值，可选。</dubbo:consumer></p>
<p><dubbo:method><br>方法配置，用于ServiceConfig和ReferenceConfig指定方法级的配置信息。</dubbo:method></p>
<p><dubbo:argument><br>用于指定方法参数配置。</dubbo:argument></p>
<p><img src="/images/dubbo/8.bmp" alt=""></p>
<h1 id="dubbo-protocol"><a href="#dubbo-protocol" class="headerlink" title="dubbo:protocol"></a>dubbo:protocol</h1><pre><code>&lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;9090&quot;    
    client=&quot;netty&quot;  serialization=&quot;hessian2&quot; charset=&quot;UTF-8&quot;    
    threadpool=&quot;fixed&quot; threads=&quot;100&quot; queues=&quot;0&quot; iothreads=&quot;9&quot; buffer=&quot;8192&quot;    
    accepts=&quot;1000&quot; payload=&quot;8388608&quot; /&gt;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DUBBO是一个分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，是阿里巴巴SOA服务化治理方案的核心框架，每天为2,000+个服务提供3,000,000,000+次访问量支持，并被广泛应用于阿里巴巴集团的各成员站点。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.yangkai0725.com/categories/java/"/>
    
    
      <category term="java" scheme="http://www.yangkai0725.com/tags/java/"/>
    
      <category term="dubbo" scheme="http://www.yangkai0725.com/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>ORACLE常用数值函数、转换函数、字符串函数</title>
    <link href="http://www.yangkai0725.com/20160823/20160823Oracle%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0.html"/>
    <id>http://www.yangkai0725.com/20160823/20160823Oracle常用函数.html</id>
    <published>2016-08-23T11:56:30.000Z</published>
    <updated>2016-08-23T12:42:31.641Z</updated>
    
    <content type="html"><![CDATA[<p>N表示数字型，C表示字符型，D表示日期型，[]表示内中参数可被忽略，fmt表示格式。</p>
<a id="more"></a>
<p><strong><em>单值函数在查询中返回单个值，可被应用到select，where子句，start with以及connect by 子句和having子句.</em></strong></p>
<blockquote>
<blockquote>
<p> <strong><em>数值型函数(Number Functions)</em></strong> </p>
</blockquote>
</blockquote>
<p><em>数值型函数输入数字型参数并返回数值型的值。多数该类函数的返回值支持38位小数点，诸如：COS, COSH, EXP, LN, LOG, SIN, SINH, SQRT, TAN, and TANH 支持36位小数点。ACOS, ASIN, ATAN, and ATAN2支持30位小数点。</em> </p>
<ol>
<li><p>MOD(n1,n2) 返回n1除n2的余数，如果n2=0则返回n1的值。<br>例如：SELECT MOD(24,5) FROM DUAL; </p>
</li>
<li><p>ROUND(n1[,n2]) 返回四舍五入小数点右边n2位后n1的值，n2缺省值为0，如果n2为负数就舍入到小数点左边相应的位上(虽然oracle documents上提到n2的值必须为整数，事实上执行时此处的判断并不严谨，即使n2为非整数，它也会自动将n2取整后做处理，但是我文档中其它提到必须为整的地方需要特别注意，如果不为整执行时会报错的)。<br>例如：SELECT ROUND(23.56),ROUND(23.56,1),ROUND(23.56,-1) FROM DUAL; </p>
</li>
<li><p>TRUNC(n1[,n2] 返回截尾到n2位小数的n1的值，n2缺省设置为0，当n2为缺省设置时会将n1截尾为整数，如果n2为负值，就截尾在小数点左边相应的位上。<br>例如：SELECT TRUNC(23.56),TRUNC(23.56,1),TRUNC(23.56,-1) FROM DUAL; </p>
</li>
</ol>
<blockquote>
<blockquote>
<p> <strong><em>字符型函数返回字符值(Character Functions Returning Character Values)</em></strong> </p>
</blockquote>
</blockquote>
<p><em>该类函数返回与输入类型相同的类型。</em><br><em>返回的CHAR类型值长度不超过2000字节；</em><br><em>返回的VCHAR2类型值长度不超过4000字节；</em><br><em>如果上述应返回的字符长度超出，oracle并不会报错而是直接截断至最大可支持长度返回</em><br><em>返回的CLOB类型值长度不超过4G；</em><br><em>对于CLOB类型的函数，如果返回值长度超出，oracle不会返回任何错误而是直接抛出错误</em></p>
<ol>
<li><p>LOWER(c) 将指定字符串内字符变为小写，支持CHAR,VARCHAR2,NCHAR,NVARCHAR2,CLOB,NCLOB类型<br>例如：SELECT LOWER(‘WhaT is tHis’) FROM DUAL; </p>
</li>
<li><p>UPPER(c) 将指定字符串内字符变为大写，支持CHAR,VARCHAR2,NCHAR,NVARCHAR2,CLOB,NCLOB类型<br>例如：SELECT UPPER(‘WhaT is tHis’) FROM DUAL; </p>
</li>
<li><p>LPAD(c1,n[,c2])<br>返回指定长度=n的字符串，需要注意的有几点：<br>如果n<c1.length则从右到左截取指定长度返回； 如果n="">c1.length and c2 is null，以空格从左向右补充字符长度至n并返回；<br>如果n&gt;c1.length and c2 is not null，以指定字符c2从左向右补充c1长度至n并返回；<br>例如：SELECT LPAD(‘WhaT is tHis’,5),LPAD(‘WhaT is tHis’,25),LPAD(‘WhaT is tHis’,25,’-‘) FROM DUAL;<br>最后大家再猜一猜，如果n&lt;0，结果会怎么样 </c1.length则从右到左截取指定长度返回；></p>
</li>
<li><p>RPAD(c1,n[,c2])<br>返回指定长度=n的字符串，基本与上同，不过补充字符是从右向左方向正好与上相反；<br>例如：SELECT RPAD(‘WhaT is tHis’,5),RPAD(‘WhaT is tHis’,25),RPAD(‘WhaT is tHis’,25,’-‘) FROM DUAL; </p>
</li>
<li><p>TRIM([[LEADING||TRAILING||BOTH] c2 FROM] c1) 哈哈，被俺无敌的形容方式搞晕头了吧，这个地方还是看图更明了一些。<br>看起来很复杂，理解起来很简单：<br>如果没有指定任何参数则oracle去除c1头尾空格<br>例如：SELECT TRIM(‘ WhaT is tHis ‘) FROM DUAL;<br>如果指定了c2参数，则oracle去掉c1头尾c2(这个建议细致测试，有多种不同情形的哟)<br>例如：SELECT TRIM(‘W’ FROM ‘WhaT is tHis w W’) FROM DUAL;<br>如果指定了leading参数则会去掉c1头部c2<br>例如：SELECT TRIM(leading ‘W’ FROM ‘WhaT is tHis w W’) FROM DUAL;<br>如果指定了trailing参数则会去掉c1尾部c2<br>例如：SELECT TRIM(trailing ‘W’ FROM ‘WhaT is tHis w W’) FROM DUAL;<br>如果指定了both参数则会去掉c1头尾c2(跟不指定有区别吗？没区别！)<br>例如：SELECT TRIM(both ‘W’ FROM ‘WhaT is tHis w W’) FROM DUAL;<br>注意：c2长度=1 </p>
</li>
<li>LTRIM(c1[,c2]) 千万表以为与上面那个长的像，功能也与上面的类似，本函数是从字符串c1左侧截取掉与指定字符串c2相同的字符并返回。如果c2为空则默认截取空格。<br>例如：SELECT LTRIM(‘WWhhhhhaT is tHis w W’,’Wh’) FROM DUAL; </li>
<li>RTRIM(c1,c2)与上同，不过方向相反<br>例如：SELECT RTRIM(‘WWhhhhhaT is tHis w W’,’W w’) FROM DUAL; </li>
<li>REPLACE(c1,c2[,c3]) 将c1字符串中的c2替换为c3，如果c3为空，则从c1中删除所有c2。<br>例如：SELECT REPLACE(‘WWhhhhhaT is tHis w W’,’W’,’-‘) FROM DUAL; </li>
<li><p>SOUNDEX(c) 神奇的函数啊，该函数返回字符串参数的语音表示形式，对于比较一些读音相同，但是拼写不同的单词非常有用。计算语音的算法如下：<br>保留字符串首字母，但删除a、e、h、i、o、w、y。<br>将下表中的数字赋给相对应的字母</p>
<p> 1：b、f、p、v<br> 2：c、g、k、q、s、x、z<br> 3：d、t<br> 4：l<br> 5：m、n<br> 6：R </p>
</li>
</ol>
<p>如果字符串中存在拥有相同数字的2个以上（包含2个）的字母在一起（例如b和f），或者只有h或w，则删除其他的，只保留1个；<br>只返回前4个字节，不够用0填充<br>例如：SELECT SOUNDEX(‘dog’),soundex(‘boy’) FROM DUAL; </p>
<ol>
<li>SUBSTR(c1,n1[,n2]) 截取指定长度的字符串。稍不注意就可能充满了陷阱的函数。<br>n1=开始长度；<br>n2=截取的字符串长度，如果为空，默认截取到字符串结尾；<br>如果n1=0 then n1=1<br>如果n1&gt;0，则oracle从左向右确认起始位置截取<br>例如：SELECT SUBSTR(‘What is this’,5,3) FROM DUAL;<br>如果n1<0，则oracle从右向左数确认起始位置 例如：select="" substr('what="" is="" this',-5,3)="" from="" dual;="" 如果n1="">c1.length则返回空<br>例如：SELECT SUBSTR(‘What is this’,50,3) FROM DUAL;<br>然后再请你猜猜，如果n2&lt;1，会如何返回值呢 </0，则oracle从右向左数确认起始位置></li>
<li>TRANSLATE(c1,c2,c3) 就功能而言，此函数与replace有些相似。但需要注意的一点是，translate是绝对匹配替换，这点与replace函数具有非常大区别。什么是绝对匹配替换呢？简单的说，是将字符串c1中按一定的格式c2替换为c3。如果文字形容仍然无法理解，我们通过几具实例来说明：<br>例如：<br>SELECT TRANSLATE(‘What is this’,’’,’-‘) FROM DUAL;<br>SELECT TRANSLATE(‘What is this’,’-‘,’’) FROM DUAL;<br>结果都是空。来试试这个：<br>SELECT TRANSLATE(‘What is this’,’ ‘,’ ‘) FROM DUAL;<br>再来看这个：<br>SELECT TRANSLATE(‘What is this’,’ait’,’-*’) FROM DUAL;<br>是否明白了点呢？Replace函数理解比较简单，它是将字符串中指定字符替换成其它字符，它的字符必须是连续的。而translate中，则是指定字符串c1中出现的c2，将c2中各个字符替换成c3中位置顺序与其相同的c3中的字符。明白了？Replace是替换，而translate则像是过滤 </li>
</ol>
<blockquote>
<blockquote>
<p> <strong><em>字符型函数返回数字值(Character Functions Returning Number Values)</em></strong><br>本类函数支持所有的数据类型 </p>
</blockquote>
</blockquote>
<ol>
<li><p>INSTR(c1,c2[,n1[,n2]]) 返回c2在c1中位置<br>c1:原字符串<br>c2:要寻找的字符串<br>n1:查询起始位置，正值表示从左到右，负值表示从右到左 (大小表示位置,比如3表示左面第3处开始,-3表示右面第3处开始)。黑黑，如果为0的话，则返回的也是0<br>n2:第几个匹配项。大于0<br>例如：SELECT INSTR(‘abcdefg’,’e’,-3) FROM DUAL; </p>
</li>
<li><p>LENGTH(c) 返回指定字符串的长度。如果<br>例如：SELECT LENGTH(‘A123中’) FROM DUAL;<br>猜猜SELECT LENGTH(‘’) FROM DUAL;的返回值是什么 </p>
</li>
</ol>
<blockquote>
<blockquote>
<p> <strong><em>日期函数(Datetime Functions)</em></strong><br>本类函数中，除months_between返回数值外，其它都将返回日期。 </p>
</blockquote>
</blockquote>
<ol>
<li><p>ADD_MONTHS() 返回指定日期月份+n之后的值，n可以为任何整数。<br>例如：SELECT ADD_MONTHS(sysdate,12),ADD_MONTHS(sysdate,-12) FROM DUAL; </p>
</li>
<li><p>CURRENT_DATE 返回当前session所在时区的默认时间<br>例如：<br> SQL&gt; alter session set nls_date_format = ‘mm-dd-yyyy’ ;<br> SQL&gt; select current_date from dual; </p>
</li>
<li><p>SYSDATE 功能与上相同，返回当前session所在时区的默认时间。但是需要注意的一点是，如果同时使用sysdate与current_date获得的时间不一定相同，某些情况下current_date会比sysdate快一秒。经过与xyf_tck(兄台的大作ORACLE的工作机制写的很好，深入浅出)的短暂交流，我们认为current_date是将current_timestamp中毫秒四舍五入后的返回，虽然没有找到文档支持，但是想来应该八九不离十。同时，仅是某些情况下会有一秒的误差，一般情况下并不会对你的操作造成影响，所以了解即可。<br>例如：SELECT SYSDATE,CURRENT_DATE FROM DUAL; </p>
</li>
<li><p>LAST_DAY(d) 返回指定时间所在月的最后一天<br>例如：SELECT last_day(SYSDATE) FROM DUAL; </p>
</li>
<li><p>NEXT_DAY(d,n) 返回指定日期后第一个n的日期，n为一周中的某一天。但是，需要注意的是n如果为字符的话，它的星期形式需要与当前session默认时区中的星期形式相同。<br>例如：三思用的中文nt，nls_language值为SIMPLIFIED CHINESE<br>SELECT NEXT_DAY(SYSDATE,5) FROM DUAL;<br>SELECT NEXT_DAY(SYSDATE,’星期四’) FROM DUAL;<br>两种方式都可以取到正确的返回，但是：<br>SELECT NEXT_DAY(SYSDATE,’Thursday’) FROM DUAL;<br>则会执行出错，提供你说周中的日无效，就是这个原因了。 </p>
</li>
<li><p>MONTHS_BETWEEN(d1,d2) 返回d1与d2间的月份差，视d1,d2的值大小，结果可正可负，当然也有可能为0<br>例如：<br>SELECT months_between(SYSDATE, sysdate),<br>months_between(SYSDATE, add_months(sysdate, -1)),<br>months_between(SYSDATE, add_months(sysdate, 1))<br>FROM DUAL; </p>
</li>
<li><p>ROUND(d[,fmt]) 前面讲数值型函数的时候介绍过ROUND，此处与上功能基本相似，不过此处操作的是日期。如果不指定fmt参数，则默认返回距离指定日期最近的日期。<br>例如：SELECT ROUND(SYSDATE,’HH24’) FROM DUAL; </p>
</li>
<li><p>TRUNC(d[,fmt]) 与前面介绍的数值型TRUNC原理相同，不过此处也是操作的日期型。<br>例如：SELECT TRUNC(SYSDATE,’HH24’) FROM DUAL; </p>
</li>
</ol>
<blockquote>
<blockquote>
<p><strong><em>转换函数(Conversion Functions) </em></strong></p>
</blockquote>
</blockquote>
<p>转换函数将指定字符从一种类型转换为另一种，通常这类函数遵循如下惯例：函数名称后面跟着待转换类型以及输出类型。 </p>
<ol>
<li>TO_CHAR() 本函数又可以分三小类，分别是<br>转换字符-&gt;字符TO_CHAR(c)：将nchar,nvarchar2,clob,nclob类型转换为char类型；<br>例如：SELECT TO_CHAR(‘AABBCC’) FROM DUAL;<br>转换时间-&gt;字符TO_CHAR(d[,fmt])：将指定的时间(data,timestamp,timestamp with time zone)按照指定格式转换为varchar2类型；<br>例如：SELECT TO_CHAR(sysdate,’yyyy-mm-dd hh24:mi:ss’) FROM DUAL;<br>转换数值-&gt;字符TO_CHAR(n[,fmt]):将指定数值n按照指定格式fmt转换为varchar2类型并返回;例如：SELECT TO_CHAR(-100, ‘L99G999D99MI’) FROM DUAL; </li>
<li>TO_DATE(c[,fmt[,nls]]) 将char,nchar,varchar2,nvarchar2转换为日期类型，如果fmt参数不为空，则按照fmt中指定格式进行转换。注意这里的fmt参数。如果ftm为’J’则表示按照公元制(Julian day)转换，c则必须为大于0并小于5373484的正整数。<br>例如：<br>SELECT TO_DATE(2454336, ‘J’) FROM DUAL;<br>SELECT TO_DATE(‘2007-8-23 23:25:00’, ‘yyyy-mm-dd hh24:mi:ss’) FROM DUAL;<br>为什么公元制的话，c的值必须不大于5373484呢？因为Oracle的DATE类型的取值范围是公元前4712年1月1日至公元9999年12月31日。看看下面这个语句：<br>SELECT TO_CHAR(TO_DATE(‘9999-12-31’,’yyyy-mm-dd’),’j’) FROM DUAL; </li>
<li>TO_NUMBER(c[,fmt[,nls]]) 将char,nchar,varchar2,nvarchar2型字串按照fmt中指定格式转换为数值类型并返回。<br>例如：SELECT TO_NUMBER(‘-100.00’, ‘9G999D99’) FROM DUAL; </li>
</ol>
<blockquote>
<blockquote>
<p> <strong><em>其它辅助函数(Miscellaneous Single-Row Functions)</em></strong></p>
</blockquote>
</blockquote>
<ol>
<li>DECODE(exp,s1,r1,s2,r2..s,r[,def])</li>
</ol>
<p>可以把它理解成一个增强型的if else，只不过它并不通过多行语句，而是在一个函数内实现if else的功能。<br>exp做为初始参数。s做为对比值，相同则返回r，如果s有多个，则持续遍历所有s，直到某个条件为真为止，否则返回默认值def(如果指定了的话)，如果没有默认值，并且前面的对比也都没有为真，则返回空。<br>毫无疑问，decode是个非常重要的函数，在实现行转列等功能时都会用到，需要牢记和熟练使用。<br>例如：select decode(‘a2’,’a1’,’true1’,’a2’,’true2’,’default’) from dual; </p>
<ol>
<li><p>GREATEST(n1,n2,…n) 返回序列中的最大值<br>例如：SELECT GREATEST(15,5,75,8) “Greatest” FROM DUAL; </p>
</li>
<li><p>LEAST(n1,n2….n) 返回序列中的最小值<br>例如：SELECT LEAST(15,5,75,8) LEAST FROM DUAL; </p>
</li>
<li><p>NULLIF(c1,c2)<br>Nullif也是个很有意思的函数。逻辑等价于：CASE WHEN c1 = c2 THEN NULL ELSE c1 END<br>例如：SELECT NULLIF(‘a’,’b’),NULLIF(‘a’,’a’) FROM DUAL; </p>
</li>
<li><p>NVL(c1,c2) 逻辑等价于IF c1 is null THEN c2 ELSE c1 END。c1,c2可以是任何类型。如果两者类型不同，则oracle会自动将c2转换为c1的类型。<br>例如：SELECT NVL(null, ‘12’) FROM DUAL; </p>
</li>
<li><p>NVL2(c1,c2,c3) 大家可能都用到nvl，但你用过nvl2吗？如果c1非空则返回c2,如果c1为空则返回c3<br>例如：select nvl2(‘a’, ‘b’, ‘c’) isNull,nvl2(null, ‘b’, ‘c’) isNotNull from dual; </p>
</li>
<li><p>SYS_CONNECT_BY_PATH(col,c) 该函数只能应用于树状查询。返回通过c1连接的从根到节点的路径。该函数必须与connect by 子句共同使用。<br>例如：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> tmp3(rootcol varchar2(<span class="number">10</span>),nodecol varchar2(<span class="number">10</span>)); </div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp3 <span class="keyword">values</span> (<span class="string">''</span>,<span class="string">'a001'</span>); </div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp3 <span class="keyword">values</span> (<span class="string">''</span>,<span class="string">'b001'</span>); </div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp3 <span class="keyword">values</span> (<span class="string">'a001'</span>,<span class="string">'a002'</span>); </div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp3 <span class="keyword">values</span> (<span class="string">'a002'</span>,<span class="string">'a004'</span>); </div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp3 <span class="keyword">values</span> (<span class="string">'a001'</span>,<span class="string">'a003'</span>); </div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp3 <span class="keyword">values</span> (<span class="string">'a003'</span>,<span class="string">'a005'</span>); </div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp3 <span class="keyword">values</span> (<span class="string">'a005'</span>,<span class="string">'a008'</span>); </div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp3 <span class="keyword">values</span> (<span class="string">'b001'</span>,<span class="string">'b003'</span>); </div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tmp3 <span class="keyword">values</span> (<span class="string">'b003'</span>,<span class="string">'b005'</span>); </div><div class="line"><span class="keyword">select</span> <span class="keyword">lpad</span>(<span class="string">' '</span>, <span class="keyword">level</span>*<span class="number">10</span>,<span class="string">'='</span>) ||<span class="string">'&gt;'</span>|| sys_connect_by_path(nodecol,<span class="string">'/'</span>) </div><div class="line"><span class="keyword">from</span> tmp3 </div><div class="line"><span class="keyword">start</span> <span class="keyword">with</span> rootcol = <span class="string">'a001'</span> </div><div class="line"><span class="keyword">connect</span> <span class="keyword">by</span> <span class="keyword">prior</span> nodecol =rootcol;</div></pre></td></tr></table></figure>
</li>
<li><p>SYS_CONTEXT(c1,c2[,n]) 将指定命名空间c1的指定参数c2的值按照指定长度n截取后返回。<br>Oracle9i提供内置了一个命名空间USERENV，描述了当前session的各项信息，其拥有下列参数：<br>CURRENT_SCHEMA:当前模式名<br>CURRENT_USER:当前用户<br>IP_ADDRESS:当前客户端IP地址<br>OS_USER:当前客户端操作系统用户<br>等等数十项，更详细的参数列还请大家直接参考Oracle Online Documents </p>
</li>
</ol>
<p>例如：SELECT SYS_CONTEXT(‘USERENV’, ‘SESSION_USER’) FROM DUAL;<br>注：N表示数字型，C表示字符型，D表示日期型，[]表示内中参数可被忽略，fmt表示格式。 </p>
<p>单值函数在查询中返回单个值，可被应用到select，where子句，start with以及connect by 子句和having子句。</p>
<blockquote>
<blockquote>
<p> <strong><em>数值型函数(Number Functions)</em></strong> </p>
</blockquote>
</blockquote>
<p>数值型函数输入数字型参数并返回数值型的值。多数该类函数的返回值支持38位小数点，诸如：COS, COSH, EXP, LN, LOG, SIN, SINH, SQRT, TAN, and TANH 支持36位小数点。ACOS, ASIN, ATAN, and ATAN2支持30位小数点。 </p>
<ol>
<li><p>ABS(n) 返回数字的绝对值<br>例如：SELECT ABS(-1000000.01) FROM DUAL; </p>
</li>
<li><p>COS(n) 返回n的余弦值<br>例如：SELECT COS(-2) FROM DUAL; </p>
</li>
<li><p>ACOS(n) 反余弦函数，n between -1 and 1，返回值between 0 and pi。<br>例如：SELECT ACOS(0.9) FROM DUAL; </p>
</li>
<li><p>BITAND(n1,n2) 位与运算，这个太有意思了，虽然没想到可能用到哪里，详细说明一下：<br>假设3,9做位与运算，3的二进制形式为：0011，9的二进制形式为：1001，则结果是0001，转换成10进制数为1。<br>例如：SELECT BITAND(3,9) FROM DUAL; </p>
</li>
<li><p>CEIL(n) 返回大于或等于n的最小的整数值<br>例如：SELECT ceil(18.2) FROM DUAL;<br>考你一下，猜猜ceil(-18.2)的值会是什么呢 </p>
</li>
<li><p>FLOOR(n) 返回小于等于n的最大整数值<br>例如：SELECT FLOOR(2.2) FROM DUAL;<br>再猜猜floor(-2.2)的值会是什么呢 </p>
</li>
<li><p>BIN_TO_NUM(n1,n2,….n) 二进制转向十进制<br>例如：SELECT BIN_TO_NUM(1),BIN_TO_NUM(1,0),BIN_TO_NUM(1,1) FROM DUAL; </p>
</li>
<li><p>SIN(n) 返回n的正玄值,n为弧度。<br>例如：SELECT SIN(10) FROM DUAL; </p>
</li>
<li><p>SINH(n) 返回n的双曲正玄值,n为弧度。<br>例如：SELECT SINH(10) FROM DUAL; </p>
</li>
<li><p>ASIN(n) 反正玄函数，n between -1 and 1，返回值between pi/2 and -pi/2。<br>例如：SELECT ASIN(0.8) FROM DUAL; </p>
</li>
<li><p>TAN(n) 返回n的正切值,n为弧度<br>例如：SELECT TAN(0.8) FROM DUAL; </p>
</li>
<li><p>TANH(n) 返回n的双曲正切值,n为弧度<br>例如：SELECT TANH(0.8) FROM DUAL; </p>
</li>
<li><p>ATAN(n) 反正切函数，n表示弧度，返回值between pi/2 and -pi/2。<br>例如：SELECT ATAN(-444444.9999999) FROM DUAL; </p>
</li>
<li><p>EXP(n) 返回e的n次幂，e = 2.71828183 …<br>例如：SELECT EXP(3) FROM DUAL; </p>
</li>
<li><p>LN(n) 返回n的自然对数，n&gt;0<br>例如：SELECT LN(0.9) FROM DUAL; </p>
</li>
<li><p>LOG(n1,n2) 返回以n1为底n2的对数，n1 &gt;0 and not 1 ，n2&gt;0<br>例如：SELECT LOG(1.1,2.2) FROM DUAL; </p>
</li>
<li><p>POWER(n1,n2) 返回n1的n2次方。n1,n2可以为任意数值，不过如果m是负数，则n必须为整数<br>例如：SELECT POWER(2.2,2.2) FROM DUAL; </p>
</li>
<li><p>SIGN(n) 如果n<0返回-1,如果n>0返回1，如果n=0返回0.<br>例如：SELECT SIGN(14),SIGN(-14),SIGN(0) FROM DUAL; </0返回-1,如果n></p>
</li>
<li><p>SQRT(n) 返回n的平方根,n为弧度。n&gt;=0<br>例如：SELECT SQRT(0.1) FROM DUAL; </p>
</li>
</ol>
<blockquote>
<blockquote>
<p> <strong><em>字符型函数返回字符值(Character Functions Returning Character Values)</em></strong></p>
</blockquote>
</blockquote>
<p>该类函数返回与输入类型相同的类型。<br>返回的CHAR类型值长度不超过2000字节；<br>返回的VCHAR2类型值长度不超过4000字节；<br>如果上述应返回的字符长度超出，oracle并不会报错而是直接截断至最大可支持长度返回。<br>返回的CLOB类型值长度不超过4G；<br>对于CLOB类型的函数，如果返回值长度超出，oracle不会返回任何错误而是直接抛出错误。 </p>
<ol>
<li><p>CHR(N[ USING NCHAR_CS]) 返回指定数值在当前字符集中对应的字符<br>例如：SELECT CHR(95) FROM DUAL; </p>
</li>
<li><p>CONCAT(c1,c2) 连接字符串，等同于||<br>例如：SELECT concat(‘aa’,’bb’) FROM DUAL; </p>
</li>
<li><p>INITCAP(c) 将字符串中单词的第一个字母转换为大写，其它则转换为小写<br>例如：SELECT INITCAP(‘whaT is this’) FROM DUAL; </p>
</li>
<li><p>NLS_INITCAP(c) 返回指定字符串，并将字符串中第一个字母变大写，其它字母变小写<br>例如：SELECT NLS_INITCAP(‘中华miNZHu’) FROM DUAL;<br>它还具有一个参数：Nlsparam用来指定排序规则，可以忽略，默认状态该参数为当前session的排序规则。 </p>
</li>
</ol>
<blockquote>
<blockquote>
<p> <strong><em>字符型函数返回数字值(Character Functions Returning Number Values) </em></strong></p>
</blockquote>
</blockquote>
<p>本类函数支持所有的数据类型 </p>
<ol>
<li>ASCII(c) 与chr函数的用途刚刚相反，本函数返回指定字符在当前字符集下对应的数值。<br>例如：SELECT ASCII(‘_’) FROM DUAL; </li>
</ol>
<blockquote>
<blockquote>
<p> <strong><em>日期函数(Datetime Functions) </em></strong></p>
</blockquote>
</blockquote>
<p>本类函数中，除months_between返回数值外，其它都将返回日期。 </p>
<ol>
<li><p>CURRENT_TIMESTAMP([n]) 返回当前session所在时区的日期和时间。n表示毫秒级的精度，不大于6<br>例如：SELECT CURRENT_TIMESTAMP(3) FROM DUAL; </p>
</li>
<li><p>LOCALTIMESTAMP([n]) 与上同，返回当前session所在时区的日期和时间。n表示毫秒级的精度，不大于6<br>例如：SELECT LOCALTIMESTAMP(3) FROM DUAL; </p>
</li>
<li><p>SYSTIMESTAMP([n]) 与上同，返回当前数据库所在时区的日期和时间，n表示毫秒级的精度，&gt;0 and &lt;6<br>例如：SELECT SYSTIMESTAMP(4) FROM DUAL; </p>
</li>
<li><p>DBTIMEZONE 返回数据库的当前时区<br>例如：SELECT DBTIMEZONE FROM DUAL; </p>
</li>
<li><p>SESSIONTIMEZONE 返回当前session所在时区<br>例如：SELECT SESSIONTIMEZONE FROM DUAL; </p>
</li>
<li><p>EXTRACT(key from date) key=(year,month,day,hour,minute,second) 从指定时间提到指定日期列<br>例如：SELECT EXTRACT(year from sysdate) FROM DUAL; </p>
</li>
<li><p>TO_TIMESTAMP(c1[,fmt]) 将指定字符按指定格式转换为timestamp格式。<br>例如：SELECT TO_TIMESTAMP(‘2007-8-22’, ‘YYYY-MM-DD HH:MI:SS’) FROM DUAL; </p>
</li>
</ol>
<blockquote>
<blockquote>
<p> <strong><em>转换函数(Conversion Functions)</em></strong> </p>
</blockquote>
</blockquote>
<p>转换函数将指定字符从一种类型转换为另一种，通常这类函数遵循如下惯例：函数名称后面跟着待转换类型以及输出类型。 </p>
<ol>
<li><p>BIN_TO_NUM(n1,n2…n) 将一组位向量转换为等价的十进制形式。<br>例如：SELECT BIN_TO_NUM(1,1,0) FROM DUAL; </p>
</li>
<li><p>CAST(c as newtype) 将指定字串转换为指定类型，基本只对字符类型有效，比如char,number,date,rowid等。此类转换有一个专门的表列明了哪种类型可以转换为哪种类型，此处就不作酹述。<br>例如：SELECT CAST(‘1101’ AS NUMBER(5)) FROM DUAL; </p>
</li>
<li><p>CHARTOROWID(c) 将字符串转换为rowid类型<br>例如：SELECT CHARTOROWID(‘A003D1ABBEFAABSAA0’) FROM DUAL; </p>
</li>
<li><p>ROWIDTOCHAR(rowid) 转换rowid值为varchar2类型。返回串长度为18个字节。<br>例如：SELECT ROWIDTOCHAR(rowid) FROM DUAL; </p>
</li>
<li><p>TO_MULTI_BYTE(c) 将指定字符转换为全角并返回char类型字串<br>例如：SELECT TO_MULTI_BYTE(‘ABC abc　中华’) FROM DUAL; </p>
</li>
<li><p>TO_SINGLE_BYTE(c) 将指定字符转换为半角并返回char类型字串<br>例如：SELECT TO_SINGLE_BYTE(‘ＡＢＣ　ａｂｃ中华’) FROM DUAL; </p>
</li>
</ol>
<blockquote>
<blockquote>
<p> <strong><em>其它辅助函数(Miscellaneous Single-Row Functions)</em></strong> </p>
</blockquote>
</blockquote>
<ol>
<li><p>COALESCE(n1,n2,….n) 返回序列中的第一个非空值<br>例如：SELECT COALESCE(null,5,6,null,9) FROM DUAL; </p>
</li>
<li><p>DUMP(exp[,fmt[,start[,length]]])<br>dump是个功能非常强悍的函数，对于深入了解oracle存储的人而言相当有用。所以对于我们这些仅仅只是应用的人而言就不知道能将其应用于何处了。此处仅介绍用法，不对其功能做深入分析。如上所示，dump拥有不少参数。其本质是以指定格式，返回指定长度的exp的内部表示形式的varchar2值。fmt含4种格式：8||10||16||17，分别表示8进制，10进制，16进制和单字符，默认为10进制。start参数表示开始位置，length表示以,分隔的字串数。<br>例如：SELECT DUMP(‘abcdefg’,17,2,4) FROM DUAL; </p>
</li>
<li><p>EMPTY_BLOB,EMPTY_CLOB 这两个函数都是返回空lob类型，通常被用于insert和update等语句以初始化lob列，或者将其置为空。EMPTY表示LOB已经被初始化，只不过还没有用来存储数据。 </p>
</li>
<li><p>NLS_CHARSET_NAME(n) 返回指定数值对应的字符集名称。<br>例如：SELECT NLS_CHARSET_NAME(1) FROM DUAL; </p>
</li>
<li><p>NLS_CHARSET_ID(c) 返回指定字符对应的字符集id。<br>例如：SELECT NLS_CHARSET_ID(‘US7ASCII’) FROM DUAL; </p>
</li>
<li><p>NLS_CHARSET_DECL_LEN(n1,n2) 返回一个NCHAR值的声明宽度(以字符为单位).n1是该值以字节为单位的长度，n2是该值的字符集ID<br>例如：SELECT NLS_CHARSET_DECL_LEN(100, nls_charset_id(‘US7ASCII’)) FROM DUAL; </p>
</li>
<li><p>SYS_EXTRACT_UTC(timestamp) 返回标准通用时间即格林威治时间。<br>例如：SELECT SYS_EXTRACT_UTC(current_timestamp) FROM DUAL; </p>
</li>
<li><p>SYS_TYPEID(object_type) 返回对象类型对应的id。<br>例如：这个这个，没有建立过自定义对象，咋做示例？ </p>
</li>
<li><p>UID 返回一个唯一标识当前数据库用户的整数。<br>例如：SELECT UID FROM DUAL; </p>
</li>
<li><p>USER 返回当前session用户<br>例如：SELECT USER FROM DUAL; </p>
</li>
<li><p>USERENV(c) 该函数用来返回当前session的信息，据oracle文档的说明，userenv是为了保持向下兼容的遗留函数。oracle公司推荐你使用sys_context函数调用USERENV命名空间来获取相关信息，所以大家了解下就行了。<br>例如：SELECT USERENV(‘LANGUAGE’) FROM DUAL; </p>
</li>
<li><p>VSIZE(c) 返回c的字节数。<br>例如：SELECT VSIZE(‘abc中华’) FROM DUAL;</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;N表示数字型，C表示字符型，D表示日期型，[]表示内中参数可被忽略，fmt表示格式。&lt;/p&gt;
    
    </summary>
    
      <category term="handbook" scheme="http://www.yangkai0725.com/categories/handbook/"/>
    
    
      <category term="database" scheme="http://www.yangkai0725.com/tags/database/"/>
    
      <category term="oracle" scheme="http://www.yangkai0725.com/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>Linux之less命令</title>
    <link href="http://www.yangkai0725.com/20160822/20160822linux-less-command.html"/>
    <id>http://www.yangkai0725.com/20160822/20160822linux-less-command.html</id>
    <published>2016-08-22T15:16:03.000Z</published>
    <updated>2016-08-23T11:49:03.676Z</updated>
    
    <content type="html"><![CDATA[<p>Linux中的less命令主要用来浏览文件内容，与more命令的用法相似，不同于more命令的是，less命令可往回卷动浏览以看过的部分。</p>
<a id="more"></a>
<p>参考：<a href="http://www.xitongzhijia.net/xtjc/20141209/32242.html" target="_blank" rel="external">http://www.xitongzhijia.net/xtjc/20141209/32242.html</a><br>less 的用法比起 more 更加的有弹性。在 more 的时候，我们并没有办法向前面翻， 只能往后面看，但若使用了 less 时，就可以使用 ［pageup］ ［pagedown］ 等按键的功能来往前往后翻看文件，更容易用来查看一个文件的内容！除此之外，在 less 里头可以拥有更多的搜索功能，不止可以向下搜，也可以向上搜。</p>
<h1 id="1．命令格式"><a href="#1．命令格式" class="headerlink" title="1．命令格式"></a>1．命令格式</h1><p>　　less［参数］ 文件</p>
<h1 id="2．命令功能"><a href="#2．命令功能" class="headerlink" title="2．命令功能"></a>2．命令功能</h1><p>less与more类似,但使用less可以随意浏览文件，而more仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。</p>
<h1 id="3．命令参数"><a href="#3．命令参数" class="headerlink" title="3．命令参数"></a>3．命令参数</h1><pre><code>-b 《缓冲区大小》 设置缓冲区的大小
-e 当文件显示结束后，自动离开
-f 强迫打开特殊文件，例如外围设备代号、目录和二进制文件
-g 只标志最后搜索的关键词
-i 忽略搜索时的大小写
-m 显示类似more命令的百分比
-N 显示每行的行号
-o 《文件名》 将less 输出的内容在指定文件中保存起来
-Q 不使用警告音
-s 显示连续空行为一行
-S 行过长时间将超出部分舍弃
-x 《数字》 将“tab”键显示为规定的数字空格
/字符串：向下搜索“字符串”的功能
？字符串：向上搜索“字符串”的功能
n：重复前一个搜索（与 / 或 ？ 有关）
N：反向重复前一个搜索（与 / 或 ？ 有关）
b 向后翻一页
d 向后翻半页
h 显示帮助界面
Q 退出less 命令
u 向前滚动半页
y 向前滚动一行
空格键 滚动一行
回车键 滚动一页
[pagedown］： 向下翻动一页
［pageup］： 向上翻动一页
</code></pre><h1 id="4．使用实例"><a href="#4．使用实例" class="headerlink" title="4．使用实例"></a>4．使用实例</h1><blockquote>
<p> 实例1：查看文件</p>
</blockquote>
<pre><code>[yxgly@ZC_VM_10_100_138_183 ~]$ less 2016.log 
a2016


b2015


c3333333333333
2016.log (END) 
</code></pre><p>　　</p>
<blockquote>
<p> 实例2：ps查看进程信息并通过less分页显示</p>
</blockquote>
<pre><code>[yxgly@ZC_VM_10_100_138_183 ~]$ ps -ef |less
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 Jul30 ?        00:00:00 /sbin/init
root         2     0  0 Jul30 ?        00:00:00 [kthreadd]
root         3     2  0 Jul30 ?        00:00:00 [migration/0]
root         4     2  0 Jul30 ?        00:00:03 [ksoftirqd/0]
root         5     2  0 Jul30 ?        00:00:00 [migration/0]
root         6     2  0 Jul30 ?        00:00:03 [watchdog/0]
root         7     2  0 Jul30 ?        00:38:46 [events/0]
root         8     2  0 Jul30 ?        00:00:00 [cgroup]
root         9     2  0 Jul30 ?        00:00:00 [khelper]
root        10     2  0 Jul30 ?        00:00:00 [netns]
root        11     2  0 Jul30 ?        00:00:00 [async/mgr]
root        12     2  0 Jul30 ?        00:00:00 [pm]
root        13     2  0 Jul30 ?        00:00:08 [sync_supers]
root        14     2  0 Jul30 ?        00:00:08 [bdi-default]
root        15     2  0 Jul30 ?        00:00:00 [kintegrityd/0]
root        16     2  0 Jul30 ?        00:00:16 [kblockd/0]
root        17     2  0 Jul30 ?        00:00:00 [kacpid]
root        18     2  0 Jul30 ?        00:00:00 [kacpi_notify]
root        19     2  0 Jul30 ?        00:00:00 [kacpi_hotplug]
root        20     2  0 Jul30 ?        00:00:00 [ata_aux]
root        21     2  0 Jul30 ?        00:00:00 [ata_sff/0]
root        22     2  0 Jul30 ?        00:00:00 [ksuspend_usbd]
root        23     2  0 Jul30 ?        00:00:00 [khubd]
root        24     2  0 Jul30 ?        00:00:00 [kseriod]
root        25     2  0 Jul30 ?        00:00:00 [md/0]
</code></pre><blockquote>
<p>  实例3：查看命令历史使用记录并通过less分页显示</p>
</blockquote>
<pre><code>[yxgly@ZC_VM_10_100_138_183 ~]$ history | less
54  cd logs/
55  ll
56  rm catalina.out 
57  ll
58  cd ..
59  ll
60  cd work/Catalina/localhost/
61  ll
62  rm -rf *
63  cd ..
64  ll
65  cd bin/
66  ll
67  vi startup.sh 
68  ll
69  cd ..
70  cd conf/
71  ll
72  vi server.xml 
73  cd ..
74  cd yangkai/
</code></pre><blockquote>
<p>  实例4：浏览多个文件</p>
</blockquote>
<pre><code>[yxgly@ZC_VM_10_100_138_183 ~]$ less 2016.log 2015.log 
a2016


b2015


c3333333333333
</code></pre><p>2016.log (file 1 of 2) (END) - Next: 2015.log</p>
<p>:n</p>
<pre><code>2015
2015
~
~
~
~
~
2015.log (file 2 of 2) (END) 
</code></pre><blockquote>
<p>　　<em>说明：<br>　　输入 ：n后，切换到 log2014.log<br>　　输入 ：p 后，切换到log2013.log</em></p>
</blockquote>
<h1 id="5．附加备注"><a href="#5．附加备注" class="headerlink" title="5．附加备注"></a>5．附加备注</h1><blockquote>
<p>  全屏导航</p>
</blockquote>
<pre><code>ctrl + F - 向前移动一屏
ctrl + B - 向后移动一屏
ctrl + D - 向前移动半屏
ctrl + U - 向后移动半屏
</code></pre><blockquote>
<p>　单行导航</p>
</blockquote>
<pre><code>j - 向前移动一行
k - 向后移动一行
3.其它导航
G - 移动到最后一行
g - 移动到第一行
q / ZZ - 退出 less 命令
</code></pre><blockquote>
<p>  其它有用的命令</p>
</blockquote>
<pre><code>v - 使用配置的编辑器编辑当前文件
h - 显示 less 的帮助文档
&amp;pattern - 仅显示匹配模式的行，而不是整个文件
</code></pre><blockquote>
<p>  标记导航</p>
</blockquote>
<pre><code>当使用 less 查看大文件时，可以在任何一个位置作标记，可以通过命令导航到标有特定标记的文本位置：
ma - 使用 a 标记文本的当前位置
‘a - 导航到标记 a 处
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux中的less命令主要用来浏览文件内容，与more命令的用法相似，不同于more命令的是，less命令可往回卷动浏览以看过的部分。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://www.yangkai0725.com/categories/linux/"/>
    
    
      <category term="java" scheme="http://www.yangkai0725.com/tags/java/"/>
    
      <category term="linux" scheme="http://www.yangkai0725.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>数据库面试常问的一些基本概念</title>
    <link href="http://www.yangkai0725.com/20160822/20160822%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E8%AF%95%E5%B8%B8%E9%97%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html"/>
    <id>http://www.yangkai0725.com/20160822/20160822数据库面试常问的一些基本概念.html</id>
    <published>2016-08-22T04:29:12.000Z</published>
    <updated>2016-08-23T01:29:15.733Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>超键、候选键、主键、外键</li>
<li>什么是事务？什么是锁？</li>
<li>数据库事务的四个特性及含义</li>
<li>什么是视图？</li>
<li>触发器的作用？</li>
<li>维护数据库的完整性和一致性，你喜欢用触发器还是自写业务逻辑？为什么？</li>
<li>索引的作用？和它的优点缺点是什么？</li>
<li>drop,delete与truncate的区别</li>
</ul>
<a id="more"></a>
<h1 id="1-超键、候选键、主键、外键"><a href="#1-超键、候选键、主键、外键" class="headerlink" title="1. 超键、候选键、主键、外键"></a>1. 超键、候选键、主键、外键</h1><p>超键：在关系中能唯一标识元组的属性集称为关系模式的超键。一个属性可以为作为一个超键，多个属性组合在一起也可以作为一个超键。超键包含候选键和主键。</p>
<p>候选键：是最小超键，即没有冗余元素的超键。</p>
<p>主键：数据库表中对储存数据对象予以唯一和完整标识的数据列或属性的组合。一个数据列只能有一个主键，且主键的取值不能缺失，即不能为空值（Null）。</p>
<p>外键：在一个表中存在的另一个表的主键称此表的外键。</p>
<h1 id="2-什么是事务？什么是锁？"><a href="#2-什么是事务？什么是锁？" class="headerlink" title="2.  什么是事务？什么是锁？"></a>2.  什么是事务？什么是锁？</h1><p>事务：就是被绑定在一起作为一个逻辑工作单元的 SQL 语句分组，如果任何一个语句操作失败那么整个操作就被失败，以后操作就会回滚到操作前状态，或者是上有个节点。为了确保要么执行，要么不执行，就可以使用事务。要将有组语句作为事务考虑，就需要通过 ACID 测试，即原子性，一致性，隔离性和持久性。</p>
<p>锁：在所以的 DBMS 中，锁是实现事务的关键，锁可以保证事务的完整性和并发性。与现实生活中锁一样，它可以使某些数据的拥有者，在某段时间内不能使用某些数据或数据结构。当然锁还分级别的。</p>
<h1 id="3-数据库事务的四个特性及含义"><a href="#3-数据库事务的四个特性及含义" class="headerlink" title="3. 数据库事务的四个特性及含义"></a>3. 数据库事务的四个特性及含义</h1><p>原子性：整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p>
<p>一致性：在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏。<br>隔离性：隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行 相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，必须串行化或序列化请 求，使得在同一时间仅有一个请求用于同一数据。</p>
<p>持久性：在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。</p>
<h1 id="4-什么是视图？"><a href="#4-什么是视图？" class="headerlink" title="4. 什么是视图？"></a>4. 什么是视图？</h1><p>视图是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增，改，查，操作，试图通常是有一个表或者多个表的行或列的子集。对视图的修改不影响基本表。它使得我们获取数据更容易，相比多表查询。</p>
<p>如下两种场景一般会使用到视图：</p>
<p>（1）不希望访问者获取整个表的信息，只暴露部分字段给访问者，所以就建一个虚表，就是视图。<br>（2）查询的数据来源于不同的表，而查询者希望以统一的方式查询，这样也可以建立一个视图，把多个表查询结果联合起来，查询者只需要直接从视图中获取数据，不必考虑数据来源于不同表所带来的差异。</p>
<p>注：这个视图是在数据库中创建的 而不是用代码创建的。</p>
<h1 id="5-触发器的作用？"><a href="#5-触发器的作用？" class="headerlink" title="5. 触发器的作用？"></a>5. 触发器的作用？</h1><p>触发器是一中特殊的存储过程，主要是通过事件来触发而被执行的。它可以强化约束，来维护数据的完整性和一致性，可以跟踪数据库内的操作从而不允许未经许可的更新和变化。可以联级运算。如，某表上的触发器上包含对另一个表的数据操作，而该操作又会导致该表触发器被触发。</p>
<h1 id="6-维护数据库的完整性和一致性，你喜欢用触发器还是自写业务逻辑？为什么？"><a href="#6-维护数据库的完整性和一致性，你喜欢用触发器还是自写业务逻辑？为什么？" class="headerlink" title="6. 维护数据库的完整性和一致性，你喜欢用触发器还是自写业务逻辑？为什么？"></a>6. 维护数据库的完整性和一致性，你喜欢用触发器还是自写业务逻辑？为什么？</h1><p>尽可能使用约束，如 check, 主键，外键，非空字段等来约束，这样做效率最高，也最方便。其次是使用触发器，这种方法可以保证，无论什么业务系统访问数据库都可以保证数据的完整新和一致性。最后考虑的是自写业务逻辑，但这样做麻烦，编程复杂，效率低下。</p>
<h1 id="7-索引的作用？和它的优点缺点是什么？"><a href="#7-索引的作用？和它的优点缺点是什么？" class="headerlink" title="7. 索引的作用？和它的优点缺点是什么？"></a>7. 索引的作用？和它的优点缺点是什么？</h1><p>数据库索引，是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据。索引的实现通常使用B树及其变种B+树。</p>
<p>在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引。</p>
<p>为表设置索引要付出代价的：一是增加了数据库的存储空间，二是在插入和修改数据时要花费较多的时间(因为索引也要随之变动)。</p>
<p>创建索引可以大大提高系统的性能（优点）：</p>
<p>第一、通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。<br>第二，可以大大加快数据的检索速度，这也是创建索引的最主要的原因。<br>第三，可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。<br>第四，在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。<br>第五，通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</p>
<p>也许会有人要问：增加索引有如此多的优点，为什么不对表中的每一个列创建一个索引呢？因为，增加索引也有许多不利的方面：</p>
<p>第一，创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。<br>第二，索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。</p>
<p>第三，当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。</p>
<p>索引是建立在数据库表中的某些列的上面。在创建索引的时候，应该考虑在哪些列上可以创建索引，在哪些列上不能创建索引。</p>
<p>一般来说，应该在这些列上创建索引：</p>
<p>（1）在经常需要搜索的列上，可以加快搜索的速度；<br>（2）在作为主键的列上，强制该列的唯一性和组织表中数据的排列结构；<br>（3）在经常用在连接的列上，这些列主要是一些外键，可以加快连接的速度；<br>（4）在经常需要根据范围进行搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的；<br>（5）在经常需要排序的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间；<br>（6）在经常使用在WHERE子句中的列上面创建索引，加快条件的判断速度。<br>同样，对于有些列不应该创建索引：</p>
<p>第一，对于那些在查询中很少使用或者参考的列不应该创建索引。这是因为，既然这些列很少使用到，因此有索引或者无索引，并不能提高查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。</p>
<p>第二，对于那些只有很少数据值的列也不应该增加索引。这是因为，由于这些列的取值很少，例如人事表的性别列，在查询的结果中，结果集的数据行占了表中数据行的很大比例，即需要在表中搜索的数据行的比例很大。增加索引，并不能明显加快检索速度。</p>
<p>第三，对于那些定义为text, image和bit数据类型的列不应该增加索引。这是因为，这些列的数据量要么相当大，要么取值很少。</p>
<p>第四，当修改性能远远大于检索性能时，不应该创建索引。这是因为，修改性能和检索性能是互相矛盾的。当增加索引时，会提高检索性能，但是会降低修改性能。当减少索引时，会提高修改性能，降低检索性能。因此，当修改性能远远大于检索性能时，不应该创建索引。</p>
<h1 id="8-drop-delete与truncate的区别"><a href="#8-drop-delete与truncate的区别" class="headerlink" title="8. drop,delete与truncate的区别"></a>8. drop,delete与truncate的区别</h1><p>drop直接删掉表 。 </p>
<p>truncate删除表中数据，再插入时自增长id又从1开始 。 </p>
<p>delete删除表中数据，可以加where字句。</p>
<p>（1） DELETE语句执行删除的过程是每次从表中删除一行，并且同时将该行的删除操作作为事务记录在日志中保存以便进行进行回滚操作。TRUNCATE TABLE 则一次性地从表中删除所有的数据并不把单独的删除操作记录记入日志保存，删除行是不能恢复的。并且在删除的过程中不会激活与表有关的删除触发器。执行速度快。</p>
<p>（2） 表和索引所占空间。当表被TRUNCATE 后，这个表和索引所占用的空间会恢复到初始大小，而DELETE操作不会减少表或索引所占用的空间。drop语句将表所占用的空间全释放掉。</p>
<p>（3） 一般而言，drop &gt; truncate &gt; delete</p>
<p>（4） 应用范围。TRUNCATE 只能对TABLE；DELETE可以是table和view</p>
<p>（5） TRUNCATE 和DELETE只删除数据，而DROP则删除整个表（结构和数据）。</p>
<p>（6） truncate与不带where的delete ：只删除数据，而不删除表的结构（定义）drop语句将删除表的结构被依赖的约束（constrain),触发器（trigger)索引（index);依赖于该表的存储过程/函数将被保留，但其状态会变为：invalid。</p>
<p>（7） delete语句为DML（data maintain Language),这个操作会被放到 rollback segment中,事务提交后才生效。如果有相应的 tigger,执行的时候将被触发。</p>
<p>（8） truncate、drop是DLL（data define language),操作立即生效，原数据不放到 rollback segment中，不能回滚。</p>
<p>（9） 在没有备份情况下，谨慎使用 drop 与 truncate。要删除部分数据行采用delete且注意结合where来约束影响范围。回滚段要足够大。要删除表用drop;若想保留表而将表中数据删除，如果于事务无关，用truncate即可实现。如果和事务有关，或老师想触发trigger,还是用delete。</p>
<p>（10） Truncate table 表名 速度快,而且效率高,因为: </p>
<p>truncate table 在功能上与不带 WHERE 子句的 DELETE 语句相同：二者均删除表中的全部行。但 TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少。DELETE 语句每次删除一行，并在事务日志中为所删除的每行记录一项。TRUNCATE TABLE 通过释放存储表数据所用的数据页来删除数据，并且只在事务日志中记录页的释放。</p>
<p>（11） TRUNCATE TABLE 删除表中的所有行，但表结构及其列、约束、索引等保持不变。新行标识所用的计数值重置为该列的种子。如果想保留标识计数值，请改用 DELETE。如果要删除表定义及其数据，请使用 DROP TABLE 语句。</p>
<p>（12） 对于由 FOREIGN KEY 约束引用的表，不能使用 TRUNCATE TABLE，而应使用不带 WHERE 子句的 DELETE 语句。由于 TRUNCATE TABLE 不记录在日志中，所以它不能激活触发器。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;超键、候选键、主键、外键&lt;/li&gt;
&lt;li&gt;什么是事务？什么是锁？&lt;/li&gt;
&lt;li&gt;数据库事务的四个特性及含义&lt;/li&gt;
&lt;li&gt;什么是视图？&lt;/li&gt;
&lt;li&gt;触发器的作用？&lt;/li&gt;
&lt;li&gt;维护数据库的完整性和一致性，你喜欢用触发器还是自写业务逻辑？为什么？&lt;/li&gt;
&lt;li&gt;索引的作用？和它的优点缺点是什么？&lt;/li&gt;
&lt;li&gt;drop,delete与truncate的区别&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="interview" scheme="http://www.yangkai0725.com/categories/interview/"/>
    
    
      <category term="database" scheme="http://www.yangkai0725.com/tags/database/"/>
    
      <category term="interview" scheme="http://www.yangkai0725.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>svn常用功能及插件使用</title>
    <link href="http://www.yangkai0725.com/20160821/20160821svn%E7%AE%80%E4%BB%8B.html"/>
    <id>http://www.yangkai0725.com/20160821/20160821svn简介.html</id>
    <published>2016-08-21T08:16:01.000Z</published>
    <updated>2016-10-12T10:02:08.175Z</updated>
    
    <content type="html"><![CDATA[<p>Windows平台上创建SVN服务，方便启动和关闭；Eclipse中svn提交时忽略文件；<br><a id="more"></a></p>
<h1 id="创建svn服务"><a href="#创建svn服务" class="headerlink" title="创建svn服务"></a>创建svn服务</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sc create svn binpath= <span class="string">"D:\Program Files (x86)\Subversion\bin\svnserve.exe --service -r E:\joiest\svnRepo"</span> displayname= <span class="string">"Subversion Server"</span> depend= tcpip start= auto</div></pre></td></tr></table></figure>
<blockquote>
<p>  开启：net start svn<br>  关闭：net stop svn</p>
</blockquote>
<h1 id="Eclipse中svn提交时忽略文件"><a href="#Eclipse中svn提交时忽略文件" class="headerlink" title="Eclipse中svn提交时忽略文件"></a>Eclipse中svn提交时忽略文件</h1><p>Windows –&gt; preferences –&gt; Team –&gt; Ignore Resources –&gt; Add Pattern<br>之后分别添加下面四项，并点击OK</p>
<pre><code>.classpath
.project
target
.settings
.externalToolBuilders
</code></pre><blockquote>
<p>  subeclipse切换账户</p>
</blockquote>
<p>C:\Users\Administrator\AppData\Roaming\Subversion\auth</p>
<p>删除其中所有文件</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Windows平台上创建SVN服务，方便启动和关闭；Eclipse中svn提交时忽略文件；&lt;br&gt;
    
    </summary>
    
      <category term="svn" scheme="http://www.yangkai0725.com/categories/svn/"/>
    
    
      <category term="svn" scheme="http://www.yangkai0725.com/tags/svn/"/>
    
      <category term="eclipse" scheme="http://www.yangkai0725.com/tags/eclipse/"/>
    
  </entry>
  
</feed>
