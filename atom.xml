<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>无名氏无情兮</title>
  <subtitle>生命不止、奋斗不息</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://eagleless.github.io/"/>
  <updated>2016-11-02T03:44:21.995Z</updated>
  <id>https://eagleless.github.io/</id>
  
  <author>
    <name>kaiyang</name>
    <email>fox520527088@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring注解Resource与Autowired的区别</title>
    <link href="https://eagleless.github.io/20161102/20161102Spring%E6%B3%A8%E8%A7%A3Resource%E4%B8%8EAutowired%E7%9A%84%E5%8C%BA%E5%88%AB.html"/>
    <id>https://eagleless.github.io/20161102/20161102Spring注解Resource与Autowired的区别.html</id>
    <published>2016-11-02T03:31:46.000Z</published>
    <updated>2016-11-02T03:44:21.995Z</updated>
    
    <content type="html"><![CDATA[<p>@autowired和@resource的区别</p>
<a id="more"></a>
<p>@Resource的作用相当于@Autowired，只不过@Autowired按byType自动注入，而@Resource默认按 byName自动注入罢了。</p>
<p>@Resource有两个属性是比较重要的，分是name和type，Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。</p>
<p>所以如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不指定name也不指定type属性，这时将通过反射机制使用byName自动注入策略。</p>
<blockquote>
<p>  @Resource装配顺序</p>
</blockquote>
<p>这个注解属于J2EE的。</p>
<ol>
<li>如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常;</li>
<li>如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常;</li>
<li>如果指定了type，则从上下文中找到类型匹配的唯一bean进行装配，找不到或者找到多个，都会抛出异常;</li>
<li>如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配；</li>
</ol>
<blockquote>
<p>  @Autowired</p>
</blockquote>
<p>默认按类型装配（这个注解是属业spring的），默认情况下必须要求依赖对象必须存在，如果要允许null值，可以设置它的required属性为false，如：@Autowired(required=false),如果我们想使用名称装配可以结合@Qualifier注解进行使用，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span>() <span class="meta">@Qualifier</span>(<span class="string">"baseDao"</span>)    </div><div class="line"><span class="keyword">private</span> BaseDao baseDao;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@autowired和@resource的区别&lt;/p&gt;
    
    </summary>
    
    
      <category term="spring" scheme="https://eagleless.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Mysql自增长触发器</title>
    <link href="https://eagleless.github.io/20161029/20161029Mysql%E8%87%AA%E5%A2%9E%E9%95%BF%E8%A7%A6%E5%8F%91%E5%99%A8.html"/>
    <id>https://eagleless.github.io/20161029/20161029Mysql自增长触发器.html</id>
    <published>2016-10-29T10:08:57.000Z</published>
    <updated>2016-11-02T02:39:38.016Z</updated>
    
    <content type="html"><![CDATA[<p>Mysql自增长触发器。<br><a id="more"></a><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb(BH <span class="built_in">CHAR</span>(<span class="number">16</span>),<span class="keyword">content</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>),<span class="string">`date`</span> DATETIME,val <span class="built_in">INT</span>);</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> tri_NewBH $$</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> tri_NewBH <span class="keyword">BEFORE</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> tb</div><div class="line">    <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></div><div class="line">    <span class="keyword">BEGIN</span></div><div class="line">        <span class="keyword">DECLARE</span> dt <span class="built_in">CHAR</span>(<span class="number">8</span>);</div><div class="line">        <span class="keyword">DECLARE</span> bh_id <span class="built_in">CHAR</span>(<span class="number">16</span>);</div><div class="line">        <span class="keyword">DECLARE</span> <span class="built_in">number</span> <span class="built_in">INT</span>;</div><div class="line">        <span class="keyword">DECLARE</span> new_bh <span class="built_in">VARCHAR</span>(<span class="number">16</span>);</div><div class="line">    </div><div class="line">        <span class="keyword">SET</span> dt = <span class="keyword">DATE_FORMAT</span>(<span class="keyword">CURDATE</span>(),<span class="string">'%Y%m%d'</span>);</div><div class="line">    </div><div class="line">        <span class="keyword">SELECT</span></div><div class="line">            <span class="keyword">MAX</span>(BH) <span class="keyword">INTO</span> bh_id</div><div class="line">        <span class="keyword">FROM</span> tb</div><div class="line">        <span class="keyword">WHERE</span> BH <span class="keyword">LIKE</span> <span class="keyword">CONCAT</span>(dt,<span class="string">'%'</span>);</div><div class="line">    </div><div class="line">        IF bh_id = '' OR bh_id IS NULL THEN</div><div class="line">            <span class="keyword">SET</span> new_bh = <span class="keyword">CONCAT</span>(dt,<span class="string">'00000001'</span>);</div><div class="line">        ELSE</div><div class="line">            <span class="keyword">SET</span> <span class="built_in">number</span> = <span class="keyword">RIGHT</span>(bh_id,<span class="number">8</span>) + <span class="number">1</span>;</div><div class="line">            <span class="keyword">SET</span> new_bh =  <span class="keyword">RIGHT</span>(<span class="keyword">CONCAT</span>(<span class="string">'00000000'</span>,<span class="built_in">number</span>),<span class="number">8</span>);</div><div class="line">            <span class="keyword">SET</span> new_bh=<span class="keyword">CONCAT</span>(dt,new_bh);</div><div class="line">        <span class="keyword">END</span> <span class="keyword">IF</span>;</div><div class="line">    </div><div class="line">        <span class="keyword">SET</span> NEW.BH = new_bh;</div><div class="line">    <span class="keyword">END</span>$$</div><div class="line"></div><div class="line">    </div><div class="line">DELIMITER ;</div><div class="line"></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb(<span class="keyword">content</span>,<span class="string">`date`</span>,val) <span class="keyword">VALUES</span>(<span class="string">'LiangCK'</span>,<span class="string">'2009-05-11'</span>,<span class="number">20</span>);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mysql自增长触发器。&lt;br&gt;
    
    </summary>
    
    
      <category term="database" scheme="https://eagleless.github.io/tags/database/"/>
    
      <category term="mysql" scheme="https://eagleless.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql配置简介</title>
    <link href="https://eagleless.github.io/20161029/20161029Mysql%E9%85%8D%E7%BD%AE%E7%AE%80%E4%BB%8B.html"/>
    <id>https://eagleless.github.io/20161029/20161029Mysql配置简介.html</id>
    <published>2016-10-29T10:02:32.000Z</published>
    <updated>2016-11-02T02:39:38.017Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<blockquote>
<p>  数据文件存放</p>
</blockquote>
<p>在my.init中定义了数据文件的存放目录<br>datadir=”C:/ProgramData/MySQL/MySQL Server 5.1/Data/“<br>文件夹中有mysql各数据库文件</p>
<blockquote>
<p>  注意事项</p>
</blockquote>
<p>注释–之后务必添加一个空格使注释生效</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;  数据文件存放&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在my.init中定义了数据文件的存放目录&lt;br&gt;datadir=”C:/ProgramData/MySQL/MySQL Server 5.1/Data
    
    </summary>
    
    
      <category term="database" scheme="https://eagleless.github.io/tags/database/"/>
    
      <category term="mysql" scheme="https://eagleless.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql常用语句汇总</title>
    <link href="https://eagleless.github.io/20161029/20161029Mysql%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5%E6%B1%87%E6%80%BB.html"/>
    <id>https://eagleless.github.io/20161029/20161029Mysql常用语句汇总.html</id>
    <published>2016-10-29T09:59:54.000Z</published>
    <updated>2016-11-02T02:39:38.013Z</updated>
    
    <content type="html"><![CDATA[<p>修改自增长、显示建表语句。<br><a id="more"></a></p>
<blockquote>
<p>  修改自增长</p>
</blockquote>
<pre><code>ALTER TABLE test_table AUTO_INCREMENT = 100
</code></pre><blockquote>
<p>  显示建表语句</p>
</blockquote>
<pre><code>SHOW CREATE TABLE APP_USER;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;修改自增长、显示建表语句。&lt;br&gt;
    
    </summary>
    
    
      <category term="database" scheme="https://eagleless.github.io/tags/database/"/>
    
      <category term="mysql" scheme="https://eagleless.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql常用问题汇总</title>
    <link href="https://eagleless.github.io/20161029/20161029Mysql%E5%B8%B8%E7%94%A8%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB.html"/>
    <id>https://eagleless.github.io/20161029/20161029Mysql常用问题汇总.html</id>
    <published>2016-10-29T09:56:07.000Z</published>
    <updated>2016-11-02T02:39:38.014Z</updated>
    
    <content type="html"><![CDATA[<p>重置root密码、数据库乱码。<br><a id="more"></a></p>
<blockquote>
<p>  重置root密码</p>
</blockquote>
<p>在my.ini中的<br>【mysqld】下添加<br>skip-grant-tables</p>
<blockquote>
<p>  MySql优化</p>
</blockquote>
<p><a href="http://blog.chinaunix.net/uid-16728139-id-3156242.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-16728139-id-3156242.html</a></p>
<blockquote>
<p>  关于MySQL的wait_timeout连接超时问题报错解决方案</p>
</blockquote>
<p><a href="http://blog.csdn.net/happyangelling/article/details/5877343" target="_blank" rel="external">http://blog.csdn.net/happyangelling/article/details/5877343</a></p>
<blockquote>
<p>  数据库乱码</p>
</blockquote>
<p>现象:用JDBC将中文字段插入MySQL数据库中，然后打开表发现，那些字段都是”??”,或者是乱码.。</p>
<p>原因:</p>
<ol>
<li>创建数据库时没有指定默认的编码方式，导致数据库使用了MySql的默认字符集latin1。 </li>
<li>Client端字符集为latin1. </li>
<li>进行jdbc链接时使用了不匹配的字符集。</li>
</ol>
<p>解决办法:</p>
<ol>
<li>创建数据库时将数据库的缺省字符集指定为utf8。sql语句没查到…</li>
<li>修改Client默认字符集为utft。windows下在mysql安装目录下找到my.ini,将里面的default-character-set=latin1 改为default-character-set=UTF8，然后重起mysql服务即可将数据库默认字符集改为utf8.此时应该在mysql命令行用\s命令检查一下看是否改好了。</li>
<li>修改jdbc的链接，将原来的<code>jdbc:mysql://localhost:3306/YourDb</code><br>改为<code>jdbc:mysql://localhost:3306/YourDb?useUnicode=true&amp;characterEncoding=UTF-8</code></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;重置root密码、数据库乱码。&lt;br&gt;
    
    </summary>
    
    
      <category term="database" scheme="https://eagleless.github.io/tags/database/"/>
    
      <category term="mysql" scheme="https://eagleless.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql开机自启动</title>
    <link href="https://eagleless.github.io/20161029/20161029Mysql%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8.html"/>
    <id>https://eagleless.github.io/20161029/20161029Mysql开机自启动.html</id>
    <published>2016-10-29T09:50:41.000Z</published>
    <updated>2016-11-02T02:39:38.015Z</updated>
    
    <content type="html"><![CDATA[<p>添加Mysql系统服务，设置开机自启动。<br><a id="more"></a></p>
<blockquote>
<p>  将MYSQL服务添加进winsows services.msc</p>
</blockquote>
<pre><code>mysqld --install MySQL --defaults-file=&quot;C:\Program Files\MySQL\MySQL Server 5.6\my-default.ini&quot;
</code></pre><p>成功后，开始-&gt;运行-&gt;services.msc 找MySQL服务，启动服务即可。<br>注：若启动不成功 修改注册表开始-&gt;运行-&gt;regedit<br>找HKEY_LOCAL_MECHINE—SYSTEM —ControlSet001或ControlSet002中找Services，再找MySQL项，修改 ImagePath 值改为：”C:\Program Files\MySQL\MySQL Server 5.6\bin\mysqld” –defaults-file=”C:\Program Files\MySQL\MySQL Server 5.6\my.ini” MySQL</p>
<p>卸载mysql系统服务：mysqld –remove</p>
<p>使用命令行手动启动:mysqld</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;添加Mysql系统服务，设置开机自启动。&lt;br&gt;
    
    </summary>
    
    
      <category term="database" scheme="https://eagleless.github.io/tags/database/"/>
    
      <category term="mysql" scheme="https://eagleless.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>CHM中文乱码</title>
    <link href="https://eagleless.github.io/20161029/20161029CHM%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81.html"/>
    <id>https://eagleless.github.io/20161029/20161029CHM中文乱码.html</id>
    <published>2016-10-29T09:43:12.000Z</published>
    <updated>2016-11-02T02:39:38.011Z</updated>
    
    <content type="html"><![CDATA[<p>CHM中文乱码问题。</p>
<a id="more"></a>
<p>经常碰到一些 CHM 格式的帮助文档出现乱码无法阅读的情况，而且 CHM 文档不像浏览器一样，右键可以选择字符编码，非常不便。究其原因，主要就是 CHM 文档在页面中没有指定合适的字符编码所致。</p>
<p>CHM 的实质是 HTML 文件。一般情况下没有指定字符编码的 CHM 是调用 Internet Explorer 浏览器的字符编码设定来显示 CHM 文件的。</p>
<p>在注册表 HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer\International 下有 AutoDetect 和 Default_CodePage 2个键名，就是IE浏览器字符编码的相关设定键。<br>其中：AutoDetect 是表示自动侦测字符编码的意思。同 IE 浏览器“查看”菜单的“编码”中的“自动选择”。键值设置1，表示启用自动侦测。一般的，简体中文的操作系统，IE浏览器就会使用 GB2312去显示那些没有指定字符编码的页面。如果AutoDetect设置为0，那浏览器会去使用 Default_CodePage 的设定来显示页面</p>
<p>因此，我们在简体中文的操作系统上打开简体中文的 CHM 文档出现乱码时，把 AutoDetect 设置为1就能正常显示；在简体中文的操作系统上打开繁体中文的 CHM 文档出现乱码时，先把 AutoDetect 设置为0，然后把 Default_CodePage 设置为 BIG5 的代码页 950 即可。</p>
<p>简体中文Windows常用 ANSI 代码页936，在注册表二进制值是 A8 03 00 00；<br>繁体中文Windows常用 ANSI 代码页950，在注册表二进制值是 B6 03 00 00；<br>拉丁语系Windows常用 ANSI 代码页1252，在注册表二进制值是 E4 04 00 00</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CHM中文乱码问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CHM" scheme="https://eagleless.github.io/tags/CHM/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat问题汇总</title>
    <link href="https://eagleless.github.io/20161029/20161029Tomcat%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB.html"/>
    <id>https://eagleless.github.io/20161029/20161029Tomcat问题汇总.html</id>
    <published>2016-10-29T09:40:47.000Z</published>
    <updated>2016-11-02T02:39:38.017Z</updated>
    
    <content type="html"><![CDATA[<p>开发中遇到的一些tomcat问题汇总。</p>
<a id="more"></a>
<blockquote>
<p>  CSRF Security Error</p>
</blockquote>
<p>利用DWR实现无刷新动态提交,结果,配置到远程服务器上竟然出现了这样的错误,弹出了错误窗口,错误信息为 “CSRF Security Error” ,左查右查,终于知道为啥了…<br>一般tomcat6是没有这样的错误,换成tomcat7就会这样,听一个老外说,tomcat7默认为<code>sessionID</code>实现HTTP,所以,解决问题的办法,就是更改这个tomcat的默认配置:<br>在<code>tomcat/conf/context.xml</code>中,在<context>中添加属性:<context usehttponly="false">.<br>重启tomcat就over啦~</context></context></p>
<blockquote>
<p>  welcome-list不起作用</p>
</blockquote>
<p>解决问题一定要从原理入手，所以要先分析welcome-file-list是怎么工作的。<br>welcome-file-list的工作原理是，按照welcome-file的.list一个一个去检查是否web目录下面存在这个文件，如果存在，继续下面的工作（或者跳转到index.html页面，或者配置有struts的，会直接struts的过滤工作）.如上例，先去webcontent(这里是Eclipse的工程目录根目录)下是否真的存在index.html这个文件，如果不存在去找是否存在index.jsp这个文件，以此类推。<br>还要说的是welcome-file不一定是html或者jsp等文件，也可以是直接访问一个action。就像我上面配置的一样，但要注意的是，一定要在webcontent下面建立一个index.action的空文件，然后使用struts配置去跳转，不然web找不到index.action这个文件，会报404错误。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发中遇到的一些tomcat问题汇总。&lt;/p&gt;
    
    </summary>
    
    
      <category term="tomcat" scheme="https://eagleless.github.io/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Maven生命周期</title>
    <link href="https://eagleless.github.io/20161029/20161029Maven%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html"/>
    <id>https://eagleless.github.io/20161029/20161029Maven生命周期.html</id>
    <published>2016-10-29T09:25:37.000Z</published>
    <updated>2016-11-02T02:39:38.012Z</updated>
    
    <content type="html"><![CDATA[<p>Maven的生命周期是抽象的，实际工作都是由插件来完成的。插件都在<code>org\apache\maven\plugins</code>里，运行机制类似于设计模式中的模板方法。</p>
<a id="more"></a>
<p>Maven生命周期不是一个整体，有三套独立的生命周期，分别是<code>clean</code>（清理项目）、<code>default</code>（构建项目）和<code>site</code>（建立项目站点）。以clean生命周期为例，有pre-clean、clean和post-clean，当执行pre-clean时只执行此命令，当执行clean时会执行pre-clean和clean，当执行post-clean时会将三个命令顺序执行。</p>
<blockquote>
<p>  clean生命周期</p>
</blockquote>
<p>pre-clean：执行一些清理前需要完成的工作。<br>clean：清理上一次构建生成的文件。<br>post-clean：执行一些清理后需要完成的工作。</p>
<blockquote>
<p>  default生命周期：真正的构建</p>
</blockquote>
<p>validate<br>initialize<br>generate-sources<br>process-sources:处理项目主资源文件。一般是对src/main/sources目录的内容进行变量替换等工作后，复制到项目输出的主classpath目录中。<br>generate-resources<br>process-resources<br>compile:编译项目的主源码。一般是编译src/main/java目录中的java文件至项目输出的主classpath目录中。<br>process-classes<br>generate-test-sources<br>process-test-sources:处理项目测试资源文件。一般是对src/test/sources目录的内容进行变量替换等工作后，复制到项目输出的主classpath目录中。<br>generate-test-resources<br>process-test-resources<br>test-compile:编译测试代码。一般是编译src/test/java目录中的java文件至项目输出的主classpath目录中。<br>process-test-classes<br>test:使用单元测试框架运行测试，测试代码不会被打包或部署。<br>prepare-package<br>package:接受编译好的代码，打包成可发布的格式，如jar。<br>pre-integration-test<br>integration-test<br>post-integration-test<br>verify<br>install:将包安装到本地Maven仓库，供本地的其他项目使用。<br>deploy：将最终的包复制到远程仓库，供其他开发人员和Maven项目使用。</p>
<blockquote>
<p>  site生命周期</p>
</blockquote>
<p>建立和发布项目站点，基于POM所包含的信息，自动生成一个友好的站点，方便团队交流和项目发布。<br>pre-site执行一些在生成项目站点之前需要完成的工作。<br>site生成项目站点文档。<br>post-site执行一些在生成项目站点之后需要完成的工作。<br>site-deploy将生成的项目站点发布到服务器上。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Maven的生命周期是抽象的，实际工作都是由插件来完成的。插件都在&lt;code&gt;org\apache\maven\plugins&lt;/code&gt;里，运行机制类似于设计模式中的模板方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="maven" scheme="https://eagleless.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>常用ORACLE函数</title>
    <link href="https://eagleless.github.io/20161025/20161025%E5%B8%B8%E7%94%A8ORACLE%E5%87%BD%E6%95%B0.html"/>
    <id>https://eagleless.github.io/20161025/20161025常用ORACLE函数.html</id>
    <published>2016-10-25T09:38:52.000Z</published>
    <updated>2016-10-25T10:05:09.070Z</updated>
    
    <content type="html"><![CDATA[<p>常用oracle函数。</p>
<a id="more"></a>
<blockquote>
<p>  随机获取</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> d.mobile <span class="keyword">from</span> (<span class="keyword">select</span> u.mobile <span class="keyword">from</span> itm_store s ,itm_user u <span class="keyword">where</span> s.userid =u.id <span class="keyword">and</span> s.status = <span class="number">0</span> <span class="keyword">order</span> <span class="keyword">by</span> dbms_random.value) d <span class="keyword">where</span> <span class="keyword">rownum</span> = <span class="number">1</span></div></pre></td></tr></table></figure>
<blockquote>
<p>  随机数</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> trunc(dbms_random.value(<span class="number">0</span>, <span class="number">1000</span>)) <span class="keyword">from</span> dual; <span class="comment">--(0-1000的整数)</span></div><div class="line"><span class="keyword">select</span> dbms_random.value(<span class="number">0</span>, <span class="number">1000</span>) <span class="keyword">from</span> dual; <span class="comment">--(0-1000的浮点数)</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用oracle函数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="oracle" scheme="https://eagleless.github.io/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>SpringMvc静态资源处理</title>
    <link href="https://eagleless.github.io/20161013/20161013SpringMvc%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86.html"/>
    <id>https://eagleless.github.io/20161013/20161013SpringMvc静态资源处理.html</id>
    <published>2016-10-13T02:01:52.000Z</published>
    <updated>2016-10-13T02:09:10.791Z</updated>
    
    <content type="html"><![CDATA[<p>处理静态资源，我想这可能是框架搭建完成之后Web开发的”头等大事“了。<br><a id="more"></a><br>还记得Spring MVC中的DispatcherServlet吗？它是Spring MVC中的前置控制器，若配置的拦截路径为“/”，那么所有的请求都将被它拦截。对静态资源的访问也属于一个请求，那么也会被它拦截，然后进入它的匹配流 程，我们知道它是根据HandlerMapping的配置来匹配的。而对于静态资源来说，默认的Spring MVC是没有注册匹配规则的，此时若你去请求一个静态资源，则会报404错误。</p>
<blockquote>
<p>  如何处理静态资源的请求呢？</p>
</blockquote>
<p>我们可以配置一个处理静态资源的HandlerMapping<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"resourceHttpRequestHandler"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.resource.ResourceHttpRequestHandler"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span> <span class="attr">value</span>=<span class="string">"classpath:/META-INF/resources/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>     </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/resources/**"</span>&gt;</span>resourceHttpRequestHandler<span class="tag">&lt;/<span class="name">prop</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>另外，还可以使用mvc命名空间的resources标签来配置</p>
<pre><code>&lt;mvc:resources mapping=&quot;/resources/**&quot; location=&quot;/resources/&quot; /&gt;
</code></pre><blockquote>
<p>  直接用容器的DefaultServlet</p>
</blockquote>
<p>比如我们将资源文件都放在resouces目录下，那么只需要在web.xml中配置：</p>
<pre><code> &lt;servlet-mapping&gt;  
    &lt;servlet-name&gt;default&lt;/servlet-name&gt;  
    &lt;url-pattern&gt;/resource/*&lt;/url-pattern&gt;  
&lt;/servlet-mapping&gt;  
</code></pre><p>并将它放在所有Servlet的最前面（为了让它最先匹配），这样的话性能上应该比较好</p>
<p>所以，综上所述，性能最好的应该是直接利用容器的DefaultServlet，让它最先拦截静态资源请求，这样就避免了后续的转发等操作，提高了 性能，但是无法访问classpath下的资源文件。而通过mvc:resources标签可以简单配置匹配规则和资源文件路径，应该说是最简单快捷的一 种方式，当然这大概也是mvc命名空间设计的初衷。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;处理静态资源，我想这可能是框架搭建完成之后Web开发的”头等大事“了。&lt;br&gt;
    
    </summary>
    
    
      <category term="spring" scheme="https://eagleless.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>对象的生命周期</title>
    <link href="https://eagleless.github.io/20161005/20161005%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html"/>
    <id>https://eagleless.github.io/20161005/20161005对象的生命周期.html</id>
    <published>2016-10-05T08:13:29.000Z</published>
    <updated>2016-11-02T02:39:38.010Z</updated>
    
    <content type="html"><![CDATA[<p>对象的生命周期分为七个阶段。<br><a id="more"></a></p>
<blockquote>
<p>  对象的生命周期</p>
</blockquote>
<p>大致分为七个阶段<br>1、创建阶段Creation<br>2、应用阶段Using<br>3、不可视阶段Invisible<br>4、不可到达阶段Unreachable<br>5、可收集阶段Collected<br>6、终结阶段Finalized<br>7、释放阶段Free</p>
<blockquote>
<blockquote>
<p> 对象的创建过程</p>
</blockquote>
</blockquote>
<p>1、为对象分配存储空间<br>2、开始构造对象<br>3、递归调用其超类的构造方法</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对象的生命周期分为七个阶段。&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://eagleless.github.io/tags/java/"/>
    
      <category term="gc" scheme="https://eagleless.github.io/tags/gc/"/>
    
  </entry>
  
  <entry>
    <title>Java中堆内存和栈内存详解</title>
    <link href="https://eagleless.github.io/20161005/20161005Java%E4%B8%AD%E5%A0%86%E5%86%85%E5%AD%98%E5%92%8C%E6%A0%88%E5%86%85%E5%AD%98%E8%AF%A6%E8%A7%A3.html"/>
    <id>https://eagleless.github.io/20161005/20161005Java中堆内存和栈内存详解.html</id>
    <published>2016-10-05T08:10:18.000Z</published>
    <updated>2016-10-12T10:02:08.185Z</updated>
    
    <content type="html"><![CDATA[<p>Java把内存分成两种，一种叫做栈内存，一种叫做堆内存。<br><a id="more"></a></p>
<p>在函数中定义的<em>一些基本类型的变量和对象的引用变量都是在函数的栈内存中分配</em>。当在一段代码块中定义一个变量时，java就在栈中为这个变量分配内存空间，当超过变量的作用域后，java会自动释放掉为该变量分配的内存空间，该内存空间可以立刻被另作他用。</p>
<p><em>堆内存用于存放由new创建的对象和数组</em>。在堆中分配的内存，由java虚拟机自动垃圾回收器来管理。在堆中产生了一个数组或者对象后，还可以在栈中定义一个特殊的变量，这个变量的取值等于数组或者对象在堆内存中的首地址，在栈中的这个特殊的变量就变成了数组或者对象的引用变量，以后就可以在程序中使用栈内存中的引用变量来访问堆中的数组或者对象，引用变量相当于为数组或者对象起的一个别名，或者代号。</p>
<p>引用变量是普通变量，定义时在栈中分配内存，引用变量在程序运行到作用域外释放。而数组＆对象本身在堆中分配，即使程序运行到使用new产生数组和对象的语句所在地代码块之外，数组和对象本身占用的堆内存也不会被释放，<em>数组和对象在没有引用变量指向它的时候，才变成垃圾，不能再被使用，但是仍然占着内存，在随后的一个不确定的时间被垃圾回收器释放掉</em>。<em>这个也是java比较占内存的主要原因</em>，实际上，栈中的变量指向堆内存中的变量，这就是 Java 中的指针!</p>
<p><strong>java中内存分配策略及堆和栈的比较</strong></p>
<blockquote>
<p>  内存分配策略 </p>
</blockquote>
<p>按照编译原理的观点,程序运行时的内存分配有三种策略,分别是<code>静态的,栈式的,和堆式的</code>。<br>　　<code>静态存储分配</code>是指在编译时就能确定每个数据目标在运行时刻的存储空间需求,因而在编译时就可以给他们分配固定的内存空间.这种分配策略要求程序代码中不允许有可变数据结构(比如可变数组)的存在,也不允许有嵌套或者递归的结构出现,因为它们都会导致编译程序无法计算准确的存储空间需求.<br>　　<code>栈式存储分配</code>也可称为动态存储分配,是由一个类似于堆栈的运行栈来实现的.和静态存储分配相反,在栈式存储方案中,程序对数据区的需求在编译时是完全未知的,只有到运行的时候才能够知道,但是规定在运行中进入一个程序模块时,必须知道该程序模块所需的数据区大小才能够为其分配内存.和我们在数据结构所熟知的栈一样,栈式存储分配按照先进后出的原则进行分配。<br>　　<code>静态存储分配</code>要求在编译时能知道所有变量的存储要求,栈式存储分配要求在过程的入口处必须知道所有的存储要求,而堆式存储分配则专门负责在编译时或运行时模块入口处都无法确定存储要求的数据结构的内存分配,比如可变长度串和对象实例.堆由大片的可利用块或空闲块组成,堆中的内存可以按照任意顺序分配和释放. </p>
<blockquote>
<p>  堆和栈的比较</p>
</blockquote>
<p>从堆和栈的功能和作用来通俗的比较,<em>堆主要用来存放对象的，栈主要是用来执行程序的</em>.而这种不同又主要是由于堆和栈的特点决定的。</p>
<blockquote>
<p>  JVM中的堆和栈</p>
</blockquote>
<p>JVM是基于堆栈的虚拟机。JVM为每个新创建的线程都分配一个堆栈。也就是说,对于一个Java程序来说，它的运行就是通过对堆栈的操作来完成的。堆栈以帧为单位保存线程的状态。JVM对堆栈只进行两种操作:以帧为单位的压栈和出栈操作。 </p>
<p>　　我们知道,某个线程正在执行的方法称为此线程的当前方法。我们可能不知道,当前方法使用的帧称为<code>当前帧</code>。当线程激活一个Java方法,JVM就会在线程的Java堆栈里新压入一个帧。这个帧自然成为了当前帧。在此方法执行期间,这个帧将用来保存参数,局部变量,中间计算过程和其他数据。这个帧在这里和编译原理中的活动纪录的概念是差不多的。</p>
<p>　　从Java的这种分配机制来看,堆栈又可以这样理解:堆栈(Stack)是操作系统在建立某个进程时或者线程(在支持多线程的操作系统中是线程)为这个线程建立的存储区域，该区域具有<code>先进后出</code>的特性。 </p>
<p>　　每一个Java应用都唯一对应一个JVM实例，每一个实例唯一对应一个堆。应用程序在运行中所创建的所有类实例或数组都放在这个堆中,并由应用所有的线程共享。跟C/C++不同，Java中分配堆内存是自动初始化的。Java中所有对象的存储空间都是在堆中分配的，但是这个对象的引用却是在堆栈中分配,也就是说在建立一个对象时<code>从两个地方都分配内存</code>，在堆中分配的内存实际建立这个对象，而在堆栈中分配的内存只是一个指向这个堆对象的指针(引用)而已。</p>
<blockquote>
<p>  Java 中的堆和栈</p>
</blockquote>
<p>Java把内存划分成两种：一种是栈内存，一种是堆内存。 </p>
<p>　　在函数中定义的一些<code>基本类型的变量和对象的引用变量</code>都在函数的栈内存中分配。 </p>
<p>　　当在一段代码块定义一个变量时，Java就在栈中为这个变量分配内存空间，当超过变量的作用域后，Java会自动释放掉为该变量所分配的内存空间，该内存空间可以立即被另作他用。 </p>
<p>　　堆内存用来存放由new创建的<code>对象和数组</code>。 </p>
<p>　　在堆中分配的内存，由Java虚拟机的自动垃圾回收器来管理。 </p>
<p>　　在堆中产生了一个数组或对象后，还可以在栈中定义一个特殊的变量，让栈中这个变量的取值等于数组或对象在堆内存中的<code>首地址</code>，栈中的这个变量就成了数组或对象的引用变量。 </p>
<p>　　引用变量就相当于是为数组或对象起的一个名称，以后就可以在程序中使用栈中的引用变量来访问堆中的数组或对象。 </p>
<p>　　具体的说： </p>
<p>　　栈与堆都是Java用来在Ram中存放数据的地方。与C++不同，Java自动管理栈和堆，程序员不能直接地设置栈或堆。 </p>
<p>　　Java的堆是一个<code>运行时数据区</code>,类的(对象从中分配空间。这些对象通过new、newarray、anewarray和multianewarray等指令建立，它们不需要程序代码来显式的释放。堆是由垃圾回收来负责的，堆的优势是可以动态地分配内存大小，生存期也不必事先告诉编译器，因为它是在运行时动态分配内存的，Java的垃圾收集器会自动收走这些不再使用的数据。但缺点是，由于要在运行时动态分配内存，存取速度较慢。 </p>
<p>　　栈的优势是，存取速度比堆要快，仅次于寄存器，栈数据可以共享。但缺点是，存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。栈中主要存放一些基本类型的变量(,int, short, long, byte, float, double, boolean, char)和对象句柄。 </p>
<p>　　栈有一个很重要的特殊性，就是存在栈中的数据可以共享。假设我们同时定义： </p>
<p>　　int a = 3; </p>
<p>　　int b = 3; </p>
<p>　　编译器先处理int a = 3;首先它会在栈中创建一个变量为a的引用，然后查找栈中是否有3这个值，如果没找到，就将3存放进来，然后将a指向3。接着处理int b = 3;在创建完b的引用变量后，因为在栈中已经有3这个值，便将b直接指向3。这样，就出现了a与b同时均指向3的情况。这时，如果再令a=4;那么编译器会重新搜索栈中是否有4值，如果没有，则将4存放进来，并令a指向4;如果已经有了，则直接将a指向这个地址。因此a值的改变不会影响到b的值。要注意这种数据的共享与两个对象的引用同时指向一个对象的这种共享是不同的，因为这种情况a的修改并不会影响到b, 它是由编译器完成的，它有利于节省空间。<em>而一个对象引用变量修改了这个对象的内部状态，会影响到另一个对象引用变量</em>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java把内存分成两种，一种叫做栈内存，一种叫做堆内存。&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://eagleless.github.io/tags/java/"/>
    
      <category term="gc" scheme="https://eagleless.github.io/tags/gc/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse常用设置及问题处理</title>
    <link href="https://eagleless.github.io/20161004/20161004Eclipse%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE%E5%8F%8A%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86.html"/>
    <id>https://eagleless.github.io/20161004/20161004Eclipse常用设置及问题处理.html</id>
    <published>2016-10-04T07:42:14.000Z</published>
    <updated>2016-10-12T10:02:08.183Z</updated>
    
    <content type="html"><![CDATA[<p>eclipse_ini介绍;本地tld设置;设置new菜单;最佳保护色;eclipse闪退;RemoteSystemsTempFiles项目;main方法需运行两次;邮件发送失败;<br><a id="more"></a></p>
<blockquote>
<p>  eclipse_ini</p>
</blockquote>
<p>首先了解下JVM中几个相关的概念：</p>
<p>Xms：最小堆大小<br>Xmx：最大堆大小<br>Xmn：年轻代堆大小<br>Xss：每个线程的堆大小<br>PermSize：初始持久代大小<br>MaxPermSize：最大持久代大小</p>
<p>一般Xms、Xmx设置相同，PermSize、MaxPermSize设置相同，这样可以避免伸缩堆大小带来的性能损耗。</p>
<blockquote>
<p>  本地tld设置</p>
</blockquote>
<ol>
<li>先找到 XML 的 dtd 文件</li>
<li>后 window—&gt;preference—&gt;XML—&gt;XML catalog—&gt;User Specified Entries—&gt;add-&gt; 其中 key Type 选择 URI ， Key 选择 XML 文件中 docType 中引用的那个 key 地址， Location 选择 dtd 文件在本地硬盘上的完整路径。<br>注意：完成以上操作后，关闭 XML 文件，重新打开就可以了。</li>
</ol>
<blockquote>
<p>  设置new菜单</p>
</blockquote>
<p>Windows–&gt;Customize Perspective<br>在打开的窗口里Shortcuts选中需要显示的选项</p>
<blockquote>
<p>  最佳保护色</p>
</blockquote>
<p>色调：84<br>饱和度：91<br>亮度：205</p>
<blockquote>
<p>  eclipse闪退</p>
</blockquote>
<p>删除文件 [workspace]<code>/.metadata/.plugins/org.eclipse.e4.workbench/workbench.xmi</code></p>
<blockquote>
<p>  RemoteSystemsTempFiles项目</p>
</blockquote>
<p>删除Eclipse工作空间中自动生成的RemoteSystemsTempFiles项目<br>step1、在Eclipse中依次打开Windows–&gt;Preferences–&gt;General–&gt;Startup and Shutdown将RSE UI前的对号去掉，关闭Eclipse；<br>step2、将Eclipse工作空间中的“RemoteSystemsTempFiles”项目删除掉，再启动Eclipse程序，这个项目就不会再自动生成了；</p>
<blockquote>
<p>  main方法需运行两次</p>
</blockquote>
<p>右键项目properties-&gt;builders<br>去掉JavaScript Validator前面的勾</p>
<blockquote>
<p>  邮件发送失败</p>
</blockquote>
<p>删除<code>E:\myEclipse8.5\Common\plugins\com.genuitec.eclipse.j2eedt.core_8.5.0.me201003231033\data\libraryset\EE_5</code><br>删除<code>mail.jar</code>和<code>activation.jar</code>(我的<code>javaee.jar</code>里，这两个东西是文件夹，总之删掉就OK，不过要注意备份一下)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;eclipse_ini介绍;本地tld设置;设置new菜单;最佳保护色;eclipse闪退;RemoteSystemsTempFiles项目;main方法需运行两次;邮件发送失败;&lt;br&gt;
    
    </summary>
    
    
      <category term="eclipse" scheme="https://eagleless.github.io/tags/eclipse/"/>
    
  </entry>
  
  <entry>
    <title>MyBase破解</title>
    <link href="https://eagleless.github.io/20161004/20161004MyBase%E7%A0%B4%E8%A7%A3.html"/>
    <id>https://eagleless.github.io/20161004/20161004MyBase破解.html</id>
    <published>2016-10-04T04:44:44.000Z</published>
    <updated>2016-10-12T10:02:08.184Z</updated>
    
    <content type="html"><![CDATA[<p>myBase Desktop 6.0 破解方法 (延长试用时间)<br><a id="more"></a></p>
<ol>
<li>打开软件根目录下的nyfedit.ini文件，找到App.UserLic.FirstUseOn=1475555574<br>这个参数记载着第一次打开此软件的时间，很明显，这个参数遵循Unix时间戳。<br>只需要修改这个Unix时间戳为你现在的时间，试用期就会变回30天。</li>
<li>最简单获得Unix时间戳的方法，访问如下链接就有：<br><a href="http://tool.chinaz.com/Tools/unixtime.aspx" target="_blank" rel="external">http://tool.chinaz.com/Tools/unixtime.aspx</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;myBase Desktop 6.0 破解方法 (延长试用时间)&lt;br&gt;
    
    </summary>
    
    
      <category term="tool" scheme="https://eagleless.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>Https通讯过程</title>
    <link href="https://eagleless.github.io/20161003/20161003Https%E9%80%9A%E8%AE%AF%E8%BF%87%E7%A8%8B.html"/>
    <id>https://eagleless.github.io/20161003/20161003Https通讯过程.html</id>
    <published>2016-10-03T05:11:51.000Z</published>
    <updated>2016-10-12T10:02:08.183Z</updated>
    
    <content type="html"><![CDATA[<p>HTTPS在传输数据之前需要客户端（浏览器）与服务端（网站）之间进行一次握手，在握手过程中将确立双方加密传输数据的密码信息。</p>
<a id="more"></a>
<p>TLS/SSL协议不仅仅是一套加密传输的协议，更是一件经过艺术家精心设计的艺术品，TLS/SSL中使用了非对称加密，对称加密以及HASH算法。握手过程的简单描述如下：</p>
<p>1.浏览器将自己支持的一套加密规则发送给网站。</p>
<p>2.网站从中选出一组加密算法与HASH算法，并将自己的身份信息以证书的形式发回给浏览器。证书里面包含了网站地址，加密公钥，以及证书的颁发机构等信息。</p>
<p>3.获得网站证书之后浏览器要做以下工作：</p>
<p>a) 验证证书的合法性（颁发证书的机构是否合法，证书中包含的网站地址是否与正在访问的地址一致等），如果证书受信任，则浏览器栏里面会显示一个小锁头，否则会给出证书不受信的提示。</p>
<p>b) 如果证书受信任，或者是用户接受了不受信的证书，浏览器会生成一串随机数的密码，并用证书中提供的公钥加密。</p>
<p>c) 使用约定好的HASH计算握手消息，并使用生成的随机数对消息进行加密，最后将之前生成的所有信息发送给网站。</p>
<p>4.网站接收浏览器发来的数据之后要做以下的操作：</p>
<p>a) 使用自己的私钥将信息解密取出密码，使用密码解密浏览器发来的握手消息，并验证HASH是否与浏览器发来的一致。</p>
<p>b) 使用密码加密一段握手消息，发送给浏览器。</p>
<p>5.浏览器解密并计算握手消息的HASH，如果与服务端发来的HASH一致，此时握手过程结束，之后所有的通信数据将由之前浏览器生成的随机密码并利用对称加密算法进行加密。</p>
<p>这里浏览器与网站互相发送加密的握手消息并验证，目的是为了保证双方都获得了一致的密码，并且可以正常的加密解密数据，为后续真正数据的传输做一次测试。另外，HTTPS一般使用的加密与HASH算法如下：</p>
<p>非对称加密算法：RSA，DSA/DSS</p>
<p>对称加密算法：AES，RC4，3DES</p>
<p>HASH算法：MD5，SHA1，SHA256</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTTPS在传输数据之前需要客户端（浏览器）与服务端（网站）之间进行一次握手，在握手过程中将确立双方加密传输数据的密码信息。&lt;/p&gt;
    
    </summary>
    
    
      <category term="https" scheme="https://eagleless.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>CSS属性大全</title>
    <link href="https://eagleless.github.io/20160928/20160928CSS%E5%B1%9E%E6%80%A7%E5%A4%A7%E5%85%A8.html"/>
    <id>https://eagleless.github.io/20160928/20160928CSS属性大全.html</id>
    <published>2016-09-28T05:10:02.000Z</published>
    <updated>2016-10-12T10:02:08.182Z</updated>
    
    <content type="html"><![CDATA[<p>常用CSS属性大全<br><a id="more"></a><br>字体属性：(font)<br>大小 font-size: x-large;(特大) xx-small;(极小) 一般中文用不到，只要用数值就可以，单位：PX、PD<br>样式 font-style: oblique;(偏斜体) italic;(斜体) normal;(正常)<br>行高 line-height: normal;(正常) 单位：PX、PD、EM<br>粗细 font-weight: bold;(粗体) lighter;(细体) normal;(正常)<br>变体 font-variant: small-caps;(小型大写字母) normal;(正常)<br>大小写 text-transform: capitalize;(首字母大写) uppercase;(大写) lowercase;(小写) none;(无)<br>修饰 text-decoration: underline;(下划线) overline;(上划线) line-through;(删除线) blink;(闪烁)<br>常用字体： (font-family)<br>“Courier New”, Courier, monospace, “Times New Roman”, Times, serif, Arial, Helvetica, sans-serif, Verdana<br>背景属性： (background)<br>色彩background-color: #FFFFFF;<br>图片background-image: url();<br>重复background-repeat: no-repeat;<br>滚动background-attachment: fixed;(固定) scroll;(滚动)<br>位置background-position: left(水平) top(垂直);<br>简写方法 background:#000 url(..) repeat fixed left top;<br>区块属性： (Block)<br>字间距letter-spacing: normal; 数值<br>对刘text-align: justify;(两端对齐) left;(左对齐) right;(右对齐) center;(居中)<br>缩进text-indent: 数值px;<br>垂直对齐vertical-align: baseline;(基线) sub;(下标) super;(下标) top; text-top; middle; bottom; text-bottom;<br>词间距word-spacing: normal; 数值<br>空格white-space: pre;(保留) nowrap;(不换行)<br>显示display:block;(块) inline;(内嵌) list-item;(列表项) run-in;(追加部分) compact;(紧凑) marker;(标记) table; inline-table; table-raw-group; table-header-group; table-footer-group; table-raw; table-column-group; table-column; table-cell; table-caption;(表格标题)<br>方框属性： (Box)<br>width:; height:; float:; clear:both; margin:; padding:;     顺序：上右下左<br>边框属性： (Border)<br>border-style: dotted;(点线) dashed;(虚线) solid; double;(双线) groove;(槽线) ridge;(脊状) inset;(凹陷) outset;<br>border-width:; 边框宽度<br>border-color:#;<br>简写方法border：width style color;<br>列表属性： (List-style)<br>类型list-style-type:    disc;(圆点) circle;(圆圈) square;(方块) decimal;(数字) lower-roman;(小罗码数字) upper-roman; lower-alpha; upper-alpha;<br>位置list-style-position: outside;(外) inside;<br>图像list-style-image: url(..);<br>定位属性： (Position)<br>Position: absolute; relative; static;<br>visibility: inherit; visible; hidden;<br>overflow:<br>visible (默认)：超出部分始终显示。<br>hidden：超出部分不显示。<br>scroll：始终显示水平和垂直滚动条。<br>auto：根据需要显示相应的滚动条<br>clip: rect(12px,auto,12px,auto) (裁切) </p>
<p>css属性代码大全<br>一 CSS文字属性：<br>color : #999999; /<em>文字颜色</em>/<br>font-family : 宋体,sans-serif; /<em>文字字体</em>/<br>font-size : 9pt; /<em>文字大小</em>/<br>font-style:itelic; /<em>文字斜体</em>/<br>font-variant:small-caps; /<em>小字体</em>/<br>letter-spacing : 1pt; /<em>字间距离</em>/<br>line-height : 200%; /<em>设置行高</em>/<br>font-weight:bold; /<em>文字粗体</em>/<br>vertical-align:sub; /<em>下标字</em>/<br>vertical-align:super; /<em>上标字</em>/<br>text-decoration:line-through; /<em>加删除线</em>/<br>text-decoration: overline; /<em>加顶线</em>/<br>text-decoration:underline; /<em>加下划线</em>/<br>text-decoration:none; /<em>删除链接下划线</em>/<br>text-transform : capitalize; /<em>首字大写</em>/<br>text-transform : uppercase; /<em>英文大写</em>/<br>text-transform : lowercase; /<em>英文小写</em>/<br>text-align:right; /<em>文字右对齐</em>/<br>text-align:left; /<em>文字左对齐</em>/<br>text-align:center; /<em>文字居中对齐</em>/<br>text-align:justify; /<em>文字分散对齐</em>/<br>vertical-align属性<br>vertical-align:top; /<em>垂直向上对齐</em>/<br>vertical-align:bottom; /<em>垂直向下对齐</em>/<br>vertical-align:middle; /<em>垂直居中对齐</em>/<br>vertical-align:text-top; /<em>文字垂直向上对齐</em>/<br>vertical-align:text-bottom; /<em>文字垂直向下对齐</em>/<br>二、CSS边框空白<br>padding-top:10px; /<em>上边框留空白</em>/<br>padding-right:10px; /<em>右边框留空白</em>/<br>padding-bottom:10px; /<em>下边框留空白</em>/<br>padding-left:10px; /<em>左边框留空白<br>三、CSS符号属性：<br>list-style-type:none; /</em>不编号<em>/<br>list-style-type:decimal; /</em>阿拉伯数字<em>/<br>list-style-type:lower-roman; /</em>小写罗马数字<em>/<br>list-style-type:upper-roman; /</em>大写罗马数字<em>/<br>list-style-type:lower-alpha; /</em>小写英文字母<em>/<br>list-style-type:upper-alpha; /</em>大写英文字母<em>/<br>list-style-type:disc; /</em>实心圆形符号<em>/<br>list-style-type:circle; /</em>空心圆形符号<em>/<br>list-style-type:square; /</em>实心方形符号<em>/<br>list-style-image:url(/dot.gif); /</em>图片式符号<em>/<br>list-style-position: outside; /</em>凸排<em>/<br>list-style-position:inside; /</em>缩进<em>/<br>四、CSS背景样式：<br>background-color:#F5E2EC; /</em>背景颜色<em>/<br>background:transparent; /</em>透视背景<em>/<br>background-image : url(/image/bg.gif); /</em>背景图片<em>/<br>background-attachment : fixed; /</em>浮水印固定背景<em>/<br>background-repeat : repeat; /</em>重复排列-网页默认<em>/<br>background-repeat : no-repeat; /</em>不重复排列<em>/<br>background-repeat : repeat-x; /</em>在x轴重复排列<em>/<br>background-repeat : repeat-y; /</em>在y轴重复排列<em>/<br>指定背景位置<br>background-position : 90% 90%; /</em>背景图片x与y轴的位置<em>/<br>background-position : top; /</em>向上对齐<em>/<br>background-position : buttom; /</em>向下对齐<em>/<br>background-position : left; /</em>向左对齐<em>/<br>background-position : right; /</em>向右对齐<em>/<br>background-position : center; /</em>居中对齐<em>/<br>五、CSS连接属性：<br>a /</em>所有超链接<em>/<br>a:link /</em>超链接文字格式<em>/<br>a:visited /</em>浏览过的链接文字格式<em>/<br>a:active /</em>按下链接的格式<em>/<br>a:hover /</em>鼠标转到链接<em>/<br>鼠标光标样式：<br>链接手指 CURSOR: hand<br>十字体 cursor:crosshair<br>箭头朝下 cursor:s-resize<br>十字箭头 cursor:move<br>箭头朝右 cursor:move<br>加一问号 cursor:help<br>箭头朝左 cursor:w-resize<br>箭头朝上 cursor:n-resize<br>箭头朝右上 cursor:ne-resize<br>箭头朝左上 cursor:nw-resize<br>文字I型 cursor:text<br>箭头斜右下 cursor:se-resize<br>箭头斜左下 cursor:sw-resize<br>漏斗 cursor:wait<br>光标图案(IE6)   p {cursor:url(“光标文件名.cur”),text;}<br>六、CSS框线一览表：<br>border-top : 1px solid #6699cc; /</em>上框线<em>/<br>border-bottom : 1px solid #6699cc; /</em>下框线<em>/<br>border-left : 1px solid #6699cc; /</em>左框线<em>/<br>border-right : 1px solid #6699cc; /</em>右框线<em>/<br>以上是建议书写方式,但也可以使用常规的方式 如下:<br>border-top-color : #369 /</em>设置上框线top颜色<em>/<br>border-top-width :1px /</em>设置上框线top宽度<em>/<br>border-top-style : solid/</em>设置上框线top样式<em>/<br>其他框线样式<br>solid /</em>实线框<em>/<br>dotted /</em>虚线框<em>/<br>double /</em>双线框<em>/<br>groove /</em>立体内凸框<em>/<br>ridge /</em>立体浮雕框<em>/<br>inset /</em>凹框<em>/<br>outset /</em>凸框<em>/<br>七、CSS表单运用：<br>文字方块<br>按钮<br>复选框<br>选择钮<br>多行文字方块<br>下拉式菜单 选项1选项2<br>八、CSS边界样式：<br>margin-top:10px; /</em>上边界<em>/<br>ＱＱ291911320<br>margin-right:10px; /</em>右边界值<em>/<br>margin-bottom:10px; /</em>下边界值<em>/<br>margin-left:10px; /</em>左边界值*/ </p>
<p>CSS 属性： 字体样式(Font Style)<br>序号 中文说明 标记语法<br>1 字体样式 {font:font-style font-variant font-weight font-size font-family}<br>2 字体类型 {font-family:”字体1”,”字体2”,”字体3”,…}<br>3 字体大小 {font-size:数值|inherit| medium| large| larger| x-large| xx-large| small| smaller| x-small| xx-small}<br>4 字体风格 {font-style:inherit|italic|normal|oblique}<br>5 字体粗细   {font-weight:100-900|bold|bolder|lighter|normal;}<br>6 字体颜色   {color:数值;}<br>7 阴影颜色 {text-shadow:16位色值}<br>8 字体行高   {line-height:数值|inherit|normal;}<br>9 字 间 距   {letter-spacing:数值|inherit|normal}<br>10 单词间距 {word-spacing:数值|inherit|normal}<br>11 字体变形 {font-variant:inherit|normal|small-cps }<br>12 英文转换 {text-transform:inherit|none|capitalize|uppercase|lowercase}<br>13 字体变形 {font-size-adjust:inherit|none}<br>14 字体 {font-stretch:condensed|expanded|extra-condensed|extra-expanded|inherit|narrower|normal| semi-condensed|semi-expanded|ultra-condensed|ultra-expanded|wider}<br>文本样式(Text Style)<br>序号 中文说明 标记语法<br>1 行 间 距 {line-height:数值|inherit|normal;}<br>2 文本修饰 {text-decoration:inherit|none|underline|overline|line-through|blink}<br>3 段首空格   {text-indent:数值|inherit}<br>4 水平对齐 {text-align:left|right|center|justify}<br>5 垂直对齐 {vertical-align:inherit|top|bottom|text-top|text-bottom|baseline|middle|sub|super}<br>6 书写方式 {writing-mode:lr-tb|tb-rl}<br>背景样式<br>序号 中文说明 标记语法<br>1 背景颜色 {background-color:数值}<br>2 背景图片 {background-image: url(URL)|none}<br>3 背景重复 {background-repeat:inherit|no-repeat|repeat|repeat-x|repeat-y}<br>4 背景固定 {background-attachment:fixed|scroll}<br>5 背景定位 {background-position:数值|top|bottom|left|right|center}<br>6 背影样式 {background:背景颜色|背景图象|背景重复|背景附件|背景位置}<br>框架样式(Box Style)<br>序号 中文说明 标记语法<br>1 边界留白 {margin:margin-top margin-right margin-bottom margin-left}<br>2 补　　白 {padding:padding-top padding-right padding-bottom padding-left}<br>3 边框宽度 {border-width:border-top-width border-right-width border-bottom-width border-left-width}　　<br>宽度值： thin|medium|thick|数值<br>4 边框颜色 {border-color:数值 数值 数值 数值}　　数值：分别代表top、right、bottom、left颜色值<br>5 边框风格 {border-style:none|hidden|inherit|dashed|solid|double|inset|outset|ridge|groove}<br>6 边　　框 {border:border-width border-style color}<br>   上 边 框 {border-top:border-top-width border-style color}<br>   右 边 框 {border-right:border-right-width border-style color}<br>   下 边 框 {border-bottom:border-bottom-width border-style color}<br>   左 边 框 {border-left:border-left-width border-style color}<br>7 宽　　度 {width:长度|百分比| auto}<br>8 高　　度 {height:数值|auto}<br>9 漂　　浮 {float:left|right|none}<br>10 清　　除 {clear:none|left|right|both}<br>分类列表<br>序号 中文说明 标记语法<br>1 控制显示 {display:none|block|inline|list-item}<br>2 控制空白 {white-space:normal|pre|nowarp}<br>3 符号列表 {list-style-type:disc|circle|square|decimal|lower-roman|upper-roman|lower-alpha|upper-alpha|none}<br>4 图形列表 {list-style-image:URL}<br>5 位置列表 {list-style-position:inside|outside}<br>6 目录列表 {list-style:目录样式类型|目录样式位置|url}<br>7 鼠标形状 {cursor:hand|crosshair|text|wait|move|help|e-resize|nw-resize|w-resize|s-resize|se-resize|sw-resize} </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用CSS属性大全&lt;br&gt;
    
    </summary>
    
    
      <category term="css" scheme="https://eagleless.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>GitPush问题</title>
    <link href="https://eagleless.github.io/20160918/20160918GitPush%E9%97%AE%E9%A2%98.html"/>
    <id>https://eagleless.github.io/20160918/20160918GitPush问题.html</id>
    <published>2016-09-18T10:12:44.000Z</published>
    <updated>2016-09-18T10:32:10.147Z</updated>
    
    <content type="html"><![CDATA[<p>git branch –set-upstream-to=origin/master master</p>
<a id="more"></a>
<p>git push时报错：<br>the current branch master has no upstream branch</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git branch –set-upstream-to=origin/master master&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://eagleless.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat简介</title>
    <link href="https://eagleless.github.io/20160829/20160829Tomcat%E7%AE%80%E4%BB%8B.html"/>
    <id>https://eagleless.github.io/20160829/20160829Tomcat简介.html</id>
    <published>2016-08-29T07:59:47.000Z</published>
    <updated>2016-10-12T10:02:08.181Z</updated>
    
    <content type="html"><![CDATA[<p>tomcat参数、跨域访问、tomcat-user、tomcat服务开机后台启动、tomcat_permgen_space错误<br><a id="more"></a></p>
<blockquote>
<p>  设置tomcat参数</p>
</blockquote>
<p>-Xmx1024M -Xms512M -XX:MaxPermSize=256m</p>
<blockquote>
<p>  tomcat跨域访问</p>
</blockquote>
<p><a href="http://blog.csdn.net/liumm0000/article/details/8443550" target="_blank" rel="external">http://blog.csdn.net/liumm0000/article/details/8443550</a><br>若允许Tomcat所有域访问，将clientaccesspolicy.xml和crossdomain.xml加入%TOMCAT_HOME%\webapps\ROOT 目录下即可<br>clientaccesspolicy.xml示例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span> <span class="meta">?&gt;</span></span>  </div><div class="line"><span class="tag">&lt;<span class="name">access-policy</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">cross-domain-access</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">policy</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">allow-from</span> <span class="attr">http-request-headers</span>=<span class="string">"*"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">domain</span> <span class="attr">uri</span>=<span class="string">"*"</span>/&gt;</span>  </div><div class="line">      <span class="tag">&lt;/<span class="name">allow-from</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">grant-to</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">resource</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">include-subpaths</span>=<span class="string">"true"</span>/&gt;</span>  </div><div class="line">      <span class="tag">&lt;/<span class="name">grant-to</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">policy</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;/<span class="name">cross-domain-access</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">access-policy</span>&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>  设置tomcat开机后台启动</p>
</blockquote>
<p><a href="http://jingyan.baidu.com/article/a65957f4b12b8724e77f9b5a.html" target="_blank" rel="external">http://jingyan.baidu.com/article/a65957f4b12b8724e77f9b5a.html</a></p>
<blockquote>
<p>  tomcat_permgen_space错误</p>
</blockquote>
<p>rem permgen space<br>rem —– Execute The Requested Command —————————————<br>set JAVA_OPTS=%JAVA_OPTS% -server -XX:PermSize=128m -XX:MaxPermSize=512m</p>
<blockquote>
<p>  tomcat-user</p>
</blockquote>
<p>tomcat7<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">tomcat-users</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"tomcat"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"role1"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">user</span> <span class="attr">password</span>=<span class="string">"tomcat"</span> <span class="attr">roles</span>=<span class="string">"tomcat"</span> <span class="attr">username</span>=<span class="string">"tomcat"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">user</span> <span class="attr">password</span>=<span class="string">"tomcat"</span> <span class="attr">roles</span>=<span class="string">"tomcat,role1"</span> <span class="attr">username</span>=<span class="string">"both"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">user</span> <span class="attr">password</span>=<span class="string">"tomcat"</span> <span class="attr">roles</span>=<span class="string">"role1"</span> <span class="attr">username</span>=<span class="string">"role1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tomcat-users</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>tomcat8<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">tomcat-users</span> <span class="attr">version</span>=<span class="string">"1.0"</span> <span class="attr">xmlns</span>=<span class="string">"http://tomcat.apache.org/xml"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://tomcat.apache.org/xml tomcat-users.xsd"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager"</span>/&gt;</span>　</div><div class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-gui"</span>/&gt;</span>　</div><div class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"admin"</span>/&gt;</span>　</div><div class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"admin-gui"</span>/&gt;</span>　</div><div class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"tomcat"</span> <span class="attr">password</span>=<span class="string">"tomcat"</span> <span class="attr">roles</span>=<span class="string">"admin-gui,admin,manager-gui,manager"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tomcat-users</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tomcat参数、跨域访问、tomcat-user、tomcat服务开机后台启动、tomcat_permgen_space错误&lt;br&gt;
    
    </summary>
    
    
      <category term="tomcat" scheme="https://eagleless.github.io/tags/tomcat/"/>
    
      <category term="server" scheme="https://eagleless.github.io/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>CXFWebservice暴露方式</title>
    <link href="https://eagleless.github.io/20160828/20160828CXFWebservice%E6%9A%B4%E9%9C%B2%E6%96%B9%E5%BC%8F.html"/>
    <id>https://eagleless.github.io/20160828/20160828CXFWebservice暴露方式.html</id>
    <published>2016-08-28T14:39:18.000Z</published>
    <updated>2016-10-18T03:12:30.667Z</updated>
    
    <content type="html"><![CDATA[<p>使用注解和XML方式暴露REST风格webservice，使用JAX-WS暴露SOAP风格webservice。<br>使用wsdl2java根据wsdl生成java源码。<br><a id="more"></a></p>
<blockquote>
<p>  REST风格 注解方式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//接口使用注解</span></div><div class="line"><span class="meta">@WebService</span></div><div class="line"><span class="meta">@Path</span>(<span class="string">"/users"</span>)</div><div class="line"><span class="comment">//方法声明如下</span></div><div class="line"><span class="meta">@GET</span>    </div><div class="line"><span class="meta">@Path</span>(<span class="string">"&#123;lastname&#125;"</span>)    </div><div class="line"><span class="function">List&lt;Person&gt; <span class="title">findByLastName</span><span class="params">(@PathParam(<span class="string">"lastname"</span>)</span> String lastName)</span>;     </div><div class="line"><span class="meta">@GET</span>    </div><div class="line"><span class="function">List&lt;Person&gt; <span class="title">getPeople</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>  REST风格 XML配置方式</p>
</blockquote>
<p>使用了JAX-RS，无需在接口中声明任何注解<br><code>src/main/webapp/WEB-INF/cxf-servlet.xml</code>中添加</p>
<pre><code>&lt;jaxrs:serviceBeans&gt;
    &lt;ref bean=&quot;userManager&quot;/&gt;
&lt;/jaxrs:serviceBeans&gt;
</code></pre><p><code>http://localhost:8080/services/api/users.json</code><br>也可以这样访问<code>http://localhost:8080/services/api/users</code><br>但必须给User添加@XmlRootElement注解</p>
<blockquote>
<p>  暴露SOAP WebService</p>
</blockquote>
<p>SOAP:Simple Object Access Protocol简单对象访问协议<br>接口UserService使用@WebService注解</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebService</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span></span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现类UserServiceImpl使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(<span class="string">"userManager"</span>)</div><div class="line"><span class="meta">@WebService</span>(serviceName = <span class="string">"UserService"</span>,  endpointInterface = <span class="string">"com.joiest.service.UserService"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最好提供无参构造器，以满足JAX-WS<br><code>src/main/webapp/WEB-INF/cxf-servlet.xml</code> 中添加</p>
<pre><code>&lt;jaxws:endpoint id=&quot;userService&quot; implementor=&quot;#userManager&quot; address=&quot;/UserService&quot;/&gt;
</code></pre><p>运行mvn jetty:run<br><a href="http://localhost:8080/services/UserService?wsdl" target="_blank" rel="external">http://localhost:8080/services/UserService?wsdl</a><br>即可查看userService的wsdl描述</p>
<blockquote>
<p>  wsdl2java生成java源码</p>
</blockquote>
<pre><code>wsdl2java -s E:\myToolsApi\studyTools\tools\webservice\cxf\gen_src\src -uri http://localhost:8088/cxfws/services/Hellows?wsdl
wsimport –s . client http://localhost:8088/cxfws/services/Hellows?wsdl
wsimport -s . http://127.0.0.1:8088/cxfws/services/Hellows?wsdl
wsdl2java -s . -uri http://localhost:8088/cxfws/services/Hellows?wsdl
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用注解和XML方式暴露REST风格webservice，使用JAX-WS暴露SOAP风格webservice。&lt;br&gt;使用wsdl2java根据wsdl生成java源码。&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://eagleless.github.io/tags/java/"/>
    
      <category term="webservice" scheme="https://eagleless.github.io/tags/webservice/"/>
    
  </entry>
  
</feed>
